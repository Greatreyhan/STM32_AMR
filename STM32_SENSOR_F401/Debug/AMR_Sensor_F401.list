
AMR_Sensor_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  2000000c  08008794  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08008794  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182e5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f72  00000000  00000000  00038364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109a  00000000  00000000  0003c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000390e  00000000  00000000  0003d862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a5e  00000000  00000000  00041170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fdd6  00000000  00000000  0005abce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ab4  00000000  00000000  000fa9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00100458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008740 	.word	0x08008740

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08008740 	.word	0x08008740

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <VoltCurrent_Init>:
int ADC_range = 4095;
//static float const_voltage = 1.035;

ADC_HandleTypeDef hadc;

void VoltCurrent_Init(ADC_HandleTypeDef *hadc_config){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	hadc = *hadc_config;
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <VoltCurrent_Init+0x20>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4610      	mov	r0, r2
 80004de:	4619      	mov	r1, r3
 80004e0:	2348      	movs	r3, #72	; 0x48
 80004e2:	461a      	mov	r2, r3
 80004e4:	f008 f91e 	bl	8008724 <memcpy>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000080 	.word	0x20000080

080004f4 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b0af      	sub	sp, #188	; 0xbc
 80004f8:	af2a      	add	r7, sp, #168	; 0xa8
 80004fa:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 800050c:	687c      	ldr	r4, [r7, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9329      	str	r3, [sp, #164]	; 0xa4
 8000512:	f107 030e 	add.w	r3, r7, #14
 8000516:	9328      	str	r3, [sp, #160]	; 0xa0
 8000518:	2300      	movs	r3, #0
 800051a:	9327      	str	r3, [sp, #156]	; 0x9c
 800051c:	4668      	mov	r0, sp
 800051e:	f104 0310 	add.w	r3, r4, #16
 8000522:	229c      	movs	r2, #156	; 0x9c
 8000524:	4619      	mov	r1, r3
 8000526:	f008 f8fd 	bl	8008724 <memcpy>
 800052a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800052e:	f001 fbb6 	bl	8001c9e <bno055_read_regs>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <bno055_init+0x4c>
        return err;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	e0b6      	b.n	80006ae <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2ba0      	cmp	r3, #160	; 0xa0
 8000544:	d001      	beq.n	800054a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000546:	2306      	movs	r3, #6
 8000548:	e0b1      	b.n	80006ae <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800054a:	2100      	movs	r1, #0
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f001 fa74 	bl	8001a3a <bno055_set_opmode>
 8000552:	4603      	mov	r3, r0
 8000554:	73fb      	strb	r3, [r7, #15]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <bno055_init+0x6c>
        return err;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	e0a6      	b.n	80006ae <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000560:	2002      	movs	r0, #2
 8000562:	f004 f9ad 	bl	80048c0 <HAL_Delay>
    bno055_reset(imu);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f001 fb53 	bl	8001c12 <bno055_reset>
    HAL_Delay(5000);
 800056c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000570:	f004 f9a6 	bl	80048c0 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000574:	2100      	movs	r1, #0
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f001 faee 	bl	8001b58 <bno055_set_pwr_mode>
 800057c:	4603      	mov	r3, r0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <bno055_init+0x96>
        return err;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	e091      	b.n	80006ae <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f004 f998 	bl	80048c0 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000590:	2100      	movs	r1, #0
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f001 fbe6 	bl	8001d64 <bno055_set_page>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <bno055_init+0xb2>
        return err;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	e083      	b.n	80006ae <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80005a6:	200c      	movs	r0, #12
 80005a8:	f004 f98a 	bl	80048c0 <HAL_Delay>
    bno055_on(imu);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f001 fb53 	bl	8001c58 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	4619      	mov	r1, r3
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f001 fa3e 	bl	8001a3a <bno055_set_opmode>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <bno055_init+0xd8>
        return err;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	e070      	b.n	80006ae <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80005cc:	2018      	movs	r0, #24
 80005ce:	f004 f977 	bl	80048c0 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <bno055_init+0x1c4>)
 80005d6:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a38      	ldr	r2, [pc, #224]	; (80006bc <bno055_init+0x1c8>)
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a37      	ldr	r2, [pc, #220]	; (80006c0 <bno055_init+0x1cc>)
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <bno055_init+0x1d0>)
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <bno055_init+0x1d4>)
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a36      	ldr	r2, [pc, #216]	; (80006cc <bno055_init+0x1d8>)
 80005f4:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <bno055_init+0x1dc>)
 80005fa:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <bno055_init+0x1e0>)
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <bno055_init+0x1e4>)
 8000606:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a34      	ldr	r2, [pc, #208]	; (80006dc <bno055_init+0x1e8>)
 800060c:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a33      	ldr	r2, [pc, #204]	; (80006e0 <bno055_init+0x1ec>)
 8000612:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a33      	ldr	r2, [pc, #204]	; (80006e4 <bno055_init+0x1f0>)
 8000618:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <bno055_init+0x1f4>)
 800061e:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a32      	ldr	r2, [pc, #200]	; (80006ec <bno055_init+0x1f8>)
 8000624:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <bno055_init+0x1fc>)
 800062a:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <bno055_init+0x200>)
 8000630:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <bno055_init+0x204>)
 8000636:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <bno055_init+0x208>)
 800063c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <bno055_init+0x20c>)
 8000642:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <bno055_init+0x210>)
 8000648:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a2e      	ldr	r2, [pc, #184]	; (8000708 <bno055_init+0x214>)
 800064e:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a2e      	ldr	r2, [pc, #184]	; (800070c <bno055_init+0x218>)
 8000654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <bno055_init+0x21c>)
 800065c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <bno055_init+0x220>)
 8000662:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <bno055_init+0x224>)
 8000668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a2b      	ldr	r2, [pc, #172]	; (800071c <bno055_init+0x228>)
 8000670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <bno055_init+0x22c>)
 8000678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a29      	ldr	r2, [pc, #164]	; (8000724 <bno055_init+0x230>)
 8000680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <bno055_init+0x234>)
 8000688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <bno055_init+0x238>)
 8000690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a26      	ldr	r2, [pc, #152]	; (8000730 <bno055_init+0x23c>)
 8000698:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a25      	ldr	r2, [pc, #148]	; (8000734 <bno055_init+0x240>)
 80006a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <bno055_init+0x244>)
 80006a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	0800073d 	.word	0x0800073d
 80006bc:	080007a5 	.word	0x080007a5
 80006c0:	08000825 	.word	0x08000825
 80006c4:	080008a5 	.word	0x080008a5
 80006c8:	08000925 	.word	0x08000925
 80006cc:	080009f1 	.word	0x080009f1
 80006d0:	08000a71 	.word	0x08000a71
 80006d4:	08000af1 	.word	0x08000af1
 80006d8:	08000b71 	.word	0x08000b71
 80006dc:	08000c3d 	.word	0x08000c3d
 80006e0:	08000cbd 	.word	0x08000cbd
 80006e4:	08000d3d 	.word	0x08000d3d
 80006e8:	08000dbd 	.word	0x08000dbd
 80006ec:	08000e89 	.word	0x08000e89
 80006f0:	08000ef5 	.word	0x08000ef5
 80006f4:	08000f61 	.word	0x08000f61
 80006f8:	08000fcd 	.word	0x08000fcd
 80006fc:	08001081 	.word	0x08001081
 8000700:	08001105 	.word	0x08001105
 8000704:	08001189 	.word	0x08001189
 8000708:	0800120d 	.word	0x0800120d
 800070c:	080012d9 	.word	0x080012d9
 8000710:	0800135d 	.word	0x0800135d
 8000714:	080013e1 	.word	0x080013e1
 8000718:	08001465 	.word	0x08001465
 800071c:	08001531 	.word	0x08001531
 8000720:	080015a1 	.word	0x080015a1
 8000724:	08001611 	.word	0x08001611
 8000728:	08001681 	.word	0x08001681
 800072c:	080016f1 	.word	0x080016f1
 8000730:	080017cd 	.word	0x080017cd
 8000734:	0800189d 	.word	0x0800189d
 8000738:	0800196b 	.word	0x0800196b

0800073c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b0af      	sub	sp, #188	; 0xbc
 8000740:	af2a      	add	r7, sp, #168	; 0xa8
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 800074a:	687c      	ldr	r4, [r7, #4]
 800074c:	2301      	movs	r3, #1
 800074e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000750:	f107 030e 	add.w	r3, r7, #14
 8000754:	9328      	str	r3, [sp, #160]	; 0xa0
 8000756:	2334      	movs	r3, #52	; 0x34
 8000758:	9327      	str	r3, [sp, #156]	; 0x9c
 800075a:	4668      	mov	r0, sp
 800075c:	f104 0310 	add.w	r3, r4, #16
 8000760:	229c      	movs	r2, #156	; 0x9c
 8000762:	4619      	mov	r1, r3
 8000764:	f007 ffde 	bl	8008724 <memcpy>
 8000768:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800076c:	f001 fa97 	bl	8001c9e <bno055_read_regs>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <bno055_temperature+0x42>
        return err;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	e00d      	b.n	800079a <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7bdb      	ldrb	r3, [r3, #15]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <bno055_temperature+0x54>
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	b25b      	sxtb	r3, r3
 800078e:	e001      	b.n	8000794 <bno055_temperature+0x58>
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}
	...

080007a4 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b0af      	sub	sp, #188	; 0xbc
 80007a8:	af2a      	add	r7, sp, #168	; 0xa8
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 80007ae:	687c      	ldr	r4, [r7, #4]
 80007b0:	2302      	movs	r3, #2
 80007b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80007ba:	2308      	movs	r3, #8
 80007bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80007be:	4668      	mov	r0, sp
 80007c0:	f104 0310 	add.w	r3, r4, #16
 80007c4:	229c      	movs	r2, #156	; 0x9c
 80007c6:	4619      	mov	r1, r3
 80007c8:	f007 ffac 	bl	8008724 <memcpy>
 80007cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007d0:	f001 fa65 	bl	8001c9e <bno055_read_regs>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <bno055_acc_x+0x3e>
        return err;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	e019      	b.n	8000816 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	7b3b      	ldrb	r3, [r7, #12]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <bno055_acc_x+0x62>
 8000800:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000820 <bno055_acc_x+0x7c>
 8000804:	e001      	b.n	800080a <bno055_acc_x+0x66>
 8000806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800080a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000814:	2300      	movs	r3, #0
};
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	bf00      	nop
 8000820:	42c80000 	.word	0x42c80000

08000824 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b0af      	sub	sp, #188	; 0xbc
 8000828:	af2a      	add	r7, sp, #168	; 0xa8
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800082e:	687c      	ldr	r4, [r7, #4]
 8000830:	2302      	movs	r3, #2
 8000832:	9329      	str	r3, [sp, #164]	; 0xa4
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	9328      	str	r3, [sp, #160]	; 0xa0
 800083a:	230a      	movs	r3, #10
 800083c:	9327      	str	r3, [sp, #156]	; 0x9c
 800083e:	4668      	mov	r0, sp
 8000840:	f104 0310 	add.w	r3, r4, #16
 8000844:	229c      	movs	r2, #156	; 0x9c
 8000846:	4619      	mov	r1, r3
 8000848:	f007 ff6c 	bl	8008724 <memcpy>
 800084c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000850:	f001 fa25 	bl	8001c9e <bno055_read_regs>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <bno055_acc_y+0x3e>
        return err;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	e019      	b.n	8000896 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000862:	7b7b      	ldrb	r3, [r7, #13]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	7b3b      	ldrb	r3, [r7, #12]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21b      	sxth	r3, r3
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <bno055_acc_y+0x62>
 8000880:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80008a0 <bno055_acc_y+0x7c>
 8000884:	e001      	b.n	800088a <bno055_acc_y+0x66>
 8000886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800088a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000894:	2300      	movs	r3, #0
};
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	42c80000 	.word	0x42c80000

080008a4 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b0af      	sub	sp, #188	; 0xbc
 80008a8:	af2a      	add	r7, sp, #168	; 0xa8
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80008ae:	687c      	ldr	r4, [r7, #4]
 80008b0:	2302      	movs	r3, #2
 80008b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80008ba:	230c      	movs	r3, #12
 80008bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80008be:	4668      	mov	r0, sp
 80008c0:	f104 0310 	add.w	r3, r4, #16
 80008c4:	229c      	movs	r2, #156	; 0x9c
 80008c6:	4619      	mov	r1, r3
 80008c8:	f007 ff2c 	bl	8008724 <memcpy>
 80008cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008d0:	f001 f9e5 	bl	8001c9e <bno055_read_regs>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <bno055_acc_z+0x3e>
        return err;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	e019      	b.n	8000916 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7b3b      	ldrb	r3, [r7, #12]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <bno055_acc_z+0x62>
 8000900:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000920 <bno055_acc_z+0x7c>
 8000904:	e001      	b.n	800090a <bno055_acc_z+0x66>
 8000906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800090a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000914:	2300      	movs	r3, #0
};
 8000916:	4618      	mov	r0, r3
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	42c80000 	.word	0x42c80000

08000924 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b0b1      	sub	sp, #196	; 0xc4
 8000928:	af2a      	add	r7, sp, #168	; 0xa8
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 800092e:	687c      	ldr	r4, [r7, #4]
 8000930:	2306      	movs	r3, #6
 8000932:	9329      	str	r3, [sp, #164]	; 0xa4
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	9328      	str	r3, [sp, #160]	; 0xa0
 800093a:	2308      	movs	r3, #8
 800093c:	9327      	str	r3, [sp, #156]	; 0x9c
 800093e:	4668      	mov	r0, sp
 8000940:	f104 0310 	add.w	r3, r4, #16
 8000944:	229c      	movs	r2, #156	; 0x9c
 8000946:	4619      	mov	r1, r3
 8000948:	f007 feec 	bl	8008724 <memcpy>
 800094c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000950:	f001 f9a5 	bl	8001c9e <bno055_read_regs>
 8000954:	4603      	mov	r3, r0
 8000956:	75fb      	strb	r3, [r7, #23]
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <bno055_acc+0x3e>
        return err;
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	e03f      	b.n	80009e2 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <bno055_acc+0x4a>
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <bno055_acc+0xc8>)
 800096c:	e001      	b.n	8000972 <bno055_acc+0x4e>
 800096e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000972:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000974:	7a7b      	ldrb	r3, [r7, #9]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	7a3b      	ldrb	r3, [r7, #8]
 800097c:	b21b      	sxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b21b      	sxth	r3, r3
 8000982:	ee07 3a90 	vmov	s15, r3
 8000986:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800098a:	ed97 7a04 	vldr	s14, [r7, #16]
 800098e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000998:	7afb      	ldrb	r3, [r7, #11]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80009b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7b3b      	ldrb	r3, [r7, #12]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80009d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80009e0:	2300      	movs	r3, #0
};
 80009e2:	4618      	mov	r0, r3
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	42c80000 	.word	0x42c80000

080009f0 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b0af      	sub	sp, #188	; 0xbc
 80009f4:	af2a      	add	r7, sp, #168	; 0xa8
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80009fa:	687c      	ldr	r4, [r7, #4]
 80009fc:	2302      	movs	r3, #2
 80009fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	9328      	str	r3, [sp, #160]	; 0xa0
 8000a06:	2328      	movs	r3, #40	; 0x28
 8000a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f104 0310 	add.w	r3, r4, #16
 8000a10:	229c      	movs	r2, #156	; 0x9c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f007 fe86 	bl	8008724 <memcpy>
 8000a18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a1c:	f001 f93f 	bl	8001c9e <bno055_read_regs>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <bno055_linear_acc_x+0x3e>
        return err;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	e019      	b.n	8000a62 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000a2e:	7b7b      	ldrb	r3, [r7, #13]
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	7b3b      	ldrb	r3, [r7, #12]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <bno055_linear_acc_x+0x62>
 8000a4c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000a6c <bno055_linear_acc_x+0x7c>
 8000a50:	e001      	b.n	8000a56 <bno055_linear_acc_x+0x66>
 8000a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000a60:	2300      	movs	r3, #0
};
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	42c80000 	.word	0x42c80000

08000a70 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b0af      	sub	sp, #188	; 0xbc
 8000a74:	af2a      	add	r7, sp, #168	; 0xa8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000a7a:	687c      	ldr	r4, [r7, #4]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	9328      	str	r3, [sp, #160]	; 0xa0
 8000a86:	232a      	movs	r3, #42	; 0x2a
 8000a88:	9327      	str	r3, [sp, #156]	; 0x9c
 8000a8a:	4668      	mov	r0, sp
 8000a8c:	f104 0310 	add.w	r3, r4, #16
 8000a90:	229c      	movs	r2, #156	; 0x9c
 8000a92:	4619      	mov	r1, r3
 8000a94:	f007 fe46 	bl	8008724 <memcpy>
 8000a98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a9c:	f001 f8ff 	bl	8001c9e <bno055_read_regs>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <bno055_linear_acc_y+0x3e>
        return err;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	e019      	b.n	8000ae2 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	7b3b      	ldrb	r3, [r7, #12]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <bno055_linear_acc_y+0x62>
 8000acc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000aec <bno055_linear_acc_y+0x7c>
 8000ad0:	e001      	b.n	8000ad6 <bno055_linear_acc_y+0x66>
 8000ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ae0:	2300      	movs	r3, #0
};
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	42c80000 	.word	0x42c80000

08000af0 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b0af      	sub	sp, #188	; 0xbc
 8000af4:	af2a      	add	r7, sp, #168	; 0xa8
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000afa:	687c      	ldr	r4, [r7, #4]
 8000afc:	2302      	movs	r3, #2
 8000afe:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b06:	232c      	movs	r3, #44	; 0x2c
 8000b08:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b0a:	4668      	mov	r0, sp
 8000b0c:	f104 0310 	add.w	r3, r4, #16
 8000b10:	229c      	movs	r2, #156	; 0x9c
 8000b12:	4619      	mov	r1, r3
 8000b14:	f007 fe06 	bl	8008724 <memcpy>
 8000b18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b1c:	f001 f8bf 	bl	8001c9e <bno055_read_regs>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <bno055_linear_acc_z+0x3e>
        return err;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	e019      	b.n	8000b62 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b2e:	7b7b      	ldrb	r3, [r7, #13]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	7b3b      	ldrb	r3, [r7, #12]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <bno055_linear_acc_z+0x62>
 8000b4c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b6c <bno055_linear_acc_z+0x7c>
 8000b50:	e001      	b.n	8000b56 <bno055_linear_acc_z+0x66>
 8000b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000b60:	2300      	movs	r3, #0
};
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	42c80000 	.word	0x42c80000

08000b70 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0b1      	sub	sp, #196	; 0xc4
 8000b74:	af2a      	add	r7, sp, #168	; 0xa8
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000b7a:	687c      	ldr	r4, [r7, #4]
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	9328      	str	r3, [sp, #160]	; 0xa0
 8000b86:	2328      	movs	r3, #40	; 0x28
 8000b88:	9327      	str	r3, [sp, #156]	; 0x9c
 8000b8a:	4668      	mov	r0, sp
 8000b8c:	f104 0310 	add.w	r3, r4, #16
 8000b90:	229c      	movs	r2, #156	; 0x9c
 8000b92:	4619      	mov	r1, r3
 8000b94:	f007 fdc6 	bl	8008724 <memcpy>
 8000b98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b9c:	f001 f87f 	bl	8001c9e <bno055_read_regs>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	75fb      	strb	r3, [r7, #23]
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <bno055_linear_acc+0x3e>
        return err;
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	e03f      	b.n	8000c2e <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <bno055_linear_acc+0x4a>
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <bno055_linear_acc+0xc8>)
 8000bb8:	e001      	b.n	8000bbe <bno055_linear_acc+0x4e>
 8000bba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000bbe:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000bc0:	7a7b      	ldrb	r3, [r7, #9]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	7a3b      	ldrb	r3, [r7, #8]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	7abb      	ldrb	r3, [r7, #10]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	7b3b      	ldrb	r3, [r7, #12]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000c2c:	2300      	movs	r3, #0
};
 8000c2e:	4618      	mov	r0, r3
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	42c80000 	.word	0x42c80000

08000c3c <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b0af      	sub	sp, #188	; 0xbc
 8000c40:	af2a      	add	r7, sp, #168	; 0xa8
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000c46:	687c      	ldr	r4, [r7, #4]
 8000c48:	2302      	movs	r3, #2
 8000c4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	9328      	str	r3, [sp, #160]	; 0xa0
 8000c52:	2314      	movs	r3, #20
 8000c54:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c56:	4668      	mov	r0, sp
 8000c58:	f104 0310 	add.w	r3, r4, #16
 8000c5c:	229c      	movs	r2, #156	; 0x9c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f007 fd60 	bl	8008724 <memcpy>
 8000c64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c68:	f001 f819 	bl	8001c9e <bno055_read_regs>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <bno055_gyro_x+0x3e>
        return err;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	e019      	b.n	8000cae <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <bno055_gyro_x+0x62>
 8000c98:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000c9c:	e001      	b.n	8000ca2 <bno055_gyro_x+0x66>
 8000c9e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000cb8 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000cac:	2300      	movs	r3, #0
};
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	44610000 	.word	0x44610000

08000cbc <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b0af      	sub	sp, #188	; 0xbc
 8000cc0:	af2a      	add	r7, sp, #168	; 0xa8
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000cc6:	687c      	ldr	r4, [r7, #4]
 8000cc8:	2302      	movs	r3, #2
 8000cca:	9329      	str	r3, [sp, #164]	; 0xa4
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	9328      	str	r3, [sp, #160]	; 0xa0
 8000cd2:	2316      	movs	r3, #22
 8000cd4:	9327      	str	r3, [sp, #156]	; 0x9c
 8000cd6:	4668      	mov	r0, sp
 8000cd8:	f104 0310 	add.w	r3, r4, #16
 8000cdc:	229c      	movs	r2, #156	; 0x9c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f007 fd20 	bl	8008724 <memcpy>
 8000ce4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ce8:	f000 ffd9 	bl	8001c9e <bno055_read_regs>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <bno055_gyro_y+0x3e>
        return err;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	e019      	b.n	8000d2e <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	7b3b      	ldrb	r3, [r7, #12]
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <bno055_gyro_y+0x62>
 8000d18:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d1c:	e001      	b.n	8000d22 <bno055_gyro_y+0x66>
 8000d1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d38 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000d2c:	2300      	movs	r3, #0
};
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	44610000 	.word	0x44610000

08000d3c <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b0af      	sub	sp, #188	; 0xbc
 8000d40:	af2a      	add	r7, sp, #168	; 0xa8
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000d46:	687c      	ldr	r4, [r7, #4]
 8000d48:	2302      	movs	r3, #2
 8000d4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	9328      	str	r3, [sp, #160]	; 0xa0
 8000d52:	2318      	movs	r3, #24
 8000d54:	9327      	str	r3, [sp, #156]	; 0x9c
 8000d56:	4668      	mov	r0, sp
 8000d58:	f104 0310 	add.w	r3, r4, #16
 8000d5c:	229c      	movs	r2, #156	; 0x9c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f007 fce0 	bl	8008724 <memcpy>
 8000d64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d68:	f000 ff99 	bl	8001c9e <bno055_read_regs>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <bno055_gyro_z+0x3e>
        return err;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	e019      	b.n	8000dae <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <bno055_gyro_z+0x62>
 8000d98:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000d9c:	e001      	b.n	8000da2 <bno055_gyro_z+0x66>
 8000d9e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000db8 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000dac:	2300      	movs	r3, #0
};
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	44610000 	.word	0x44610000

08000dbc <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b0b1      	sub	sp, #196	; 0xc4
 8000dc0:	af2a      	add	r7, sp, #168	; 0xa8
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000dc6:	687c      	ldr	r4, [r7, #4]
 8000dc8:	2306      	movs	r3, #6
 8000dca:	9329      	str	r3, [sp, #164]	; 0xa4
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	9328      	str	r3, [sp, #160]	; 0xa0
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	9327      	str	r3, [sp, #156]	; 0x9c
 8000dd6:	4668      	mov	r0, sp
 8000dd8:	f104 0310 	add.w	r3, r4, #16
 8000ddc:	229c      	movs	r2, #156	; 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	f007 fca0 	bl	8008724 <memcpy>
 8000de4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000de8:	f000 ff59 	bl	8001c9e <bno055_read_regs>
 8000dec:	4603      	mov	r3, r0
 8000dee:	75fb      	strb	r3, [r7, #23]
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <bno055_gyro+0x3e>
        return err;
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	e03f      	b.n	8000e7a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <bno055_gyro+0x4c>
 8000e02:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000e06:	e000      	b.n	8000e0a <bno055_gyro+0x4e>
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8000e0a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8000e0c:	7a7b      	ldrb	r3, [r7, #9]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	7a3b      	ldrb	r3, [r7, #8]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e22:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	7abb      	ldrb	r3, [r7, #10]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	44610000 	.word	0x44610000

08000e88 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b0af      	sub	sp, #188	; 0xbc
 8000e8c:	af2a      	add	r7, sp, #168	; 0xa8
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000e92:	687c      	ldr	r4, [r7, #4]
 8000e94:	2302      	movs	r3, #2
 8000e96:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8000e9e:	230e      	movs	r3, #14
 8000ea0:	9327      	str	r3, [sp, #156]	; 0x9c
 8000ea2:	4668      	mov	r0, sp
 8000ea4:	f104 0310 	add.w	r3, r4, #16
 8000ea8:	229c      	movs	r2, #156	; 0x9c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f007 fc3a 	bl	8008724 <memcpy>
 8000eb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb4:	f000 fef3 	bl	8001c9e <bno055_read_regs>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <bno055_mag_x+0x3e>
        return err;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	e012      	b.n	8000eec <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000edc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b0af      	sub	sp, #188	; 0xbc
 8000ef8:	af2a      	add	r7, sp, #168	; 0xa8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000efe:	687c      	ldr	r4, [r7, #4]
 8000f00:	2302      	movs	r3, #2
 8000f02:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f0e:	4668      	mov	r0, sp
 8000f10:	f104 0310 	add.w	r3, r4, #16
 8000f14:	229c      	movs	r2, #156	; 0x9c
 8000f16:	4619      	mov	r1, r3
 8000f18:	f007 fc04 	bl	8008724 <memcpy>
 8000f1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f20:	f000 febd 	bl	8001c9e <bno055_read_regs>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <bno055_mag_y+0x3e>
        return err;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	e012      	b.n	8000f58 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7b3b      	ldrb	r3, [r7, #12]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b0af      	sub	sp, #188	; 0xbc
 8000f64:	af2a      	add	r7, sp, #168	; 0xa8
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000f6a:	687c      	ldr	r4, [r7, #4]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f76:	2312      	movs	r3, #18
 8000f78:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f7a:	4668      	mov	r0, sp
 8000f7c:	f104 0310 	add.w	r3, r4, #16
 8000f80:	229c      	movs	r2, #156	; 0x9c
 8000f82:	4619      	mov	r1, r3
 8000f84:	f007 fbce 	bl	8008724 <memcpy>
 8000f88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f8c:	f000 fe87 	bl	8001c9e <bno055_read_regs>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <bno055_mag_z+0x3e>
        return err;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	e012      	b.n	8000fc4 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}

08000fcc <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b0af      	sub	sp, #188	; 0xbc
 8000fd0:	af2a      	add	r7, sp, #168	; 0xa8
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8000fd6:	687c      	ldr	r4, [r7, #4]
 8000fd8:	2306      	movs	r3, #6
 8000fda:	9329      	str	r3, [sp, #164]	; 0xa4
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	9328      	str	r3, [sp, #160]	; 0xa0
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	9327      	str	r3, [sp, #156]	; 0x9c
 8000fe6:	4668      	mov	r0, sp
 8000fe8:	f104 0310 	add.w	r3, r4, #16
 8000fec:	229c      	movs	r2, #156	; 0x9c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f007 fb98 	bl	8008724 <memcpy>
 8000ff4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ff8:	f000 fe51 	bl	8001c9e <bno055_read_regs>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <bno055_mag+0x3e>
        return err;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	e036      	b.n	8001078 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800100a:	7a7b      	ldrb	r3, [r7, #9]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	7a3b      	ldrb	r3, [r7, #8]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7abb      	ldrb	r3, [r7, #10]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21b      	sxth	r3, r3
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001044:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001068:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001076:	2300      	movs	r3, #0
};
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}

08001080 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b0b1      	sub	sp, #196	; 0xc4
 8001084:	af2a      	add	r7, sp, #168	; 0xa8
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 800108a:	687c      	ldr	r4, [r7, #4]
 800108c:	2302      	movs	r3, #2
 800108e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	9328      	str	r3, [sp, #160]	; 0xa0
 8001096:	232e      	movs	r3, #46	; 0x2e
 8001098:	9327      	str	r3, [sp, #156]	; 0x9c
 800109a:	4668      	mov	r0, sp
 800109c:	f104 0310 	add.w	r3, r4, #16
 80010a0:	229c      	movs	r2, #156	; 0x9c
 80010a2:	4619      	mov	r1, r3
 80010a4:	f007 fb3e 	bl	8008724 <memcpy>
 80010a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ac:	f000 fdf7 	bl	8001c9e <bno055_read_regs>
 80010b0:	4603      	mov	r3, r0
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <bno055_gravity_x+0x3e>
        return err;
 80010ba:	7dfb      	ldrb	r3, [r7, #23]
 80010bc:	e01b      	b.n	80010f6 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <bno055_gravity_x+0x4a>
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <bno055_gravity_x+0x80>)
 80010c8:	e001      	b.n	80010ce <bno055_gravity_x+0x4e>
 80010ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80010ce:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	42c80000 	.word	0x42c80000

08001104 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b0b1      	sub	sp, #196	; 0xc4
 8001108:	af2a      	add	r7, sp, #168	; 0xa8
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800110e:	687c      	ldr	r4, [r7, #4]
 8001110:	2302      	movs	r3, #2
 8001112:	9329      	str	r3, [sp, #164]	; 0xa4
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	9328      	str	r3, [sp, #160]	; 0xa0
 800111a:	2330      	movs	r3, #48	; 0x30
 800111c:	9327      	str	r3, [sp, #156]	; 0x9c
 800111e:	4668      	mov	r0, sp
 8001120:	f104 0310 	add.w	r3, r4, #16
 8001124:	229c      	movs	r2, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f007 fafc 	bl	8008724 <memcpy>
 800112c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001130:	f000 fdb5 	bl	8001c9e <bno055_read_regs>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <bno055_gravity_y+0x3e>
        return err;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	e01b      	b.n	800117a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <bno055_gravity_y+0x4a>
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <bno055_gravity_y+0x80>)
 800114c:	e001      	b.n	8001152 <bno055_gravity_y+0x4e>
 800114e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001152:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800116a:	ed97 7a04 	vldr	s14, [r7, #16]
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	42c80000 	.word	0x42c80000

08001188 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b0b1      	sub	sp, #196	; 0xc4
 800118c:	af2a      	add	r7, sp, #168	; 0xa8
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001192:	687c      	ldr	r4, [r7, #4]
 8001194:	2302      	movs	r3, #2
 8001196:	9329      	str	r3, [sp, #164]	; 0xa4
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	9328      	str	r3, [sp, #160]	; 0xa0
 800119e:	2332      	movs	r3, #50	; 0x32
 80011a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80011a2:	4668      	mov	r0, sp
 80011a4:	f104 0310 	add.w	r3, r4, #16
 80011a8:	229c      	movs	r2, #156	; 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	f007 faba 	bl	8008724 <memcpy>
 80011b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011b4:	f000 fd73 	bl	8001c9e <bno055_read_regs>
 80011b8:	4603      	mov	r3, r0
 80011ba:	75fb      	strb	r3, [r7, #23]
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <bno055_gravity_z+0x3e>
        return err;
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	e01b      	b.n	80011fe <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <bno055_gravity_z+0x4a>
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <bno055_gravity_z+0x80>)
 80011d0:	e001      	b.n	80011d6 <bno055_gravity_z+0x4e>
 80011d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011d6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7b3b      	ldrb	r3, [r7, #12]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80011f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	bf00      	nop
 8001208:	42c80000 	.word	0x42c80000

0800120c <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b0b1      	sub	sp, #196	; 0xc4
 8001210:	af2a      	add	r7, sp, #168	; 0xa8
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001216:	687c      	ldr	r4, [r7, #4]
 8001218:	2306      	movs	r3, #6
 800121a:	9329      	str	r3, [sp, #164]	; 0xa4
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	9328      	str	r3, [sp, #160]	; 0xa0
 8001222:	232e      	movs	r3, #46	; 0x2e
 8001224:	9327      	str	r3, [sp, #156]	; 0x9c
 8001226:	4668      	mov	r0, sp
 8001228:	f104 0310 	add.w	r3, r4, #16
 800122c:	229c      	movs	r2, #156	; 0x9c
 800122e:	4619      	mov	r1, r3
 8001230:	f007 fa78 	bl	8008724 <memcpy>
 8001234:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001238:	f000 fd31 	bl	8001c9e <bno055_read_regs>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <bno055_gravity+0x3e>
        return err;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	e03f      	b.n	80012ca <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <bno055_gravity+0x4a>
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <bno055_gravity+0xc8>)
 8001254:	e001      	b.n	800125a <bno055_gravity+0x4e>
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800125a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800125c:	7a7b      	ldrb	r3, [r7, #9]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7a3b      	ldrb	r3, [r7, #8]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001272:	ed97 7a04 	vldr	s14, [r7, #16]
 8001276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	7abb      	ldrb	r3, [r7, #10]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21b      	sxth	r3, r3
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001296:	ed97 7a04 	vldr	s14, [r7, #16]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	7b3b      	ldrb	r3, [r7, #12]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b0b1      	sub	sp, #196	; 0xc4
 80012dc:	af2a      	add	r7, sp, #168	; 0xa8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 80012e2:	687c      	ldr	r4, [r7, #4]
 80012e4:	2302      	movs	r3, #2
 80012e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80012ee:	231a      	movs	r3, #26
 80012f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80012f2:	4668      	mov	r0, sp
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	229c      	movs	r2, #156	; 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f007 fa12 	bl	8008724 <memcpy>
 8001300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001304:	f000 fccb 	bl	8001c9e <bno055_read_regs>
 8001308:	4603      	mov	r3, r0
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	e01b      	b.n	800134e <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <bno055_euler_yaw+0x4c>
 800131e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001322:	e000      	b.n	8001326 <bno055_euler_yaw+0x4e>
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001326:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800133e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	44610000 	.word	0x44610000

0800135c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b0b1      	sub	sp, #196	; 0xc4
 8001360:	af2a      	add	r7, sp, #168	; 0xa8
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001366:	687c      	ldr	r4, [r7, #4]
 8001368:	2302      	movs	r3, #2
 800136a:	9329      	str	r3, [sp, #164]	; 0xa4
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	9328      	str	r3, [sp, #160]	; 0xa0
 8001372:	231c      	movs	r3, #28
 8001374:	9327      	str	r3, [sp, #156]	; 0x9c
 8001376:	4668      	mov	r0, sp
 8001378:	f104 0310 	add.w	r3, r4, #16
 800137c:	229c      	movs	r2, #156	; 0x9c
 800137e:	4619      	mov	r1, r3
 8001380:	f007 f9d0 	bl	8008724 <memcpy>
 8001384:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001388:	f000 fc89 	bl	8001c9e <bno055_read_regs>
 800138c:	4603      	mov	r3, r0
 800138e:	75fb      	strb	r3, [r7, #23]
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <bno055_euler_roll+0x3e>
        return err;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	e01b      	b.n	80013d2 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <bno055_euler_roll+0x4c>
 80013a2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80013a6:	e000      	b.n	80013aa <bno055_euler_roll+0x4e>
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80013aa:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7b3b      	ldrb	r3, [r7, #12]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	44610000 	.word	0x44610000

080013e0 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b0b1      	sub	sp, #196	; 0xc4
 80013e4:	af2a      	add	r7, sp, #168	; 0xa8
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 80013ea:	687c      	ldr	r4, [r7, #4]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80013f6:	231e      	movs	r3, #30
 80013f8:	9327      	str	r3, [sp, #156]	; 0x9c
 80013fa:	4668      	mov	r0, sp
 80013fc:	f104 0310 	add.w	r3, r4, #16
 8001400:	229c      	movs	r2, #156	; 0x9c
 8001402:	4619      	mov	r1, r3
 8001404:	f007 f98e 	bl	8008724 <memcpy>
 8001408:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800140c:	f000 fc47 	bl	8001c9e <bno055_read_regs>
 8001410:	4603      	mov	r3, r0
 8001412:	75fb      	strb	r3, [r7, #23]
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <bno055_euler_pitch+0x3e>
        return err;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	e01b      	b.n	8001456 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <bno055_euler_pitch+0x4c>
 8001426:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800142a:	e000      	b.n	800142e <bno055_euler_pitch+0x4e>
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800142e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21b      	sxth	r3, r3
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001446:	ed97 7a04 	vldr	s14, [r7, #16]
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	44610000 	.word	0x44610000

08001464 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b0b1      	sub	sp, #196	; 0xc4
 8001468:	af2a      	add	r7, sp, #168	; 0xa8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800146e:	687c      	ldr	r4, [r7, #4]
 8001470:	2306      	movs	r3, #6
 8001472:	9329      	str	r3, [sp, #164]	; 0xa4
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	9328      	str	r3, [sp, #160]	; 0xa0
 800147a:	231a      	movs	r3, #26
 800147c:	9327      	str	r3, [sp, #156]	; 0x9c
 800147e:	4668      	mov	r0, sp
 8001480:	f104 0310 	add.w	r3, r4, #16
 8001484:	229c      	movs	r2, #156	; 0x9c
 8001486:	4619      	mov	r1, r3
 8001488:	f007 f94c 	bl	8008724 <memcpy>
 800148c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001490:	f000 fc05 	bl	8001c9e <bno055_read_regs>
 8001494:	4603      	mov	r3, r0
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	e03f      	b.n	8001522 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <bno055_euler+0x4c>
 80014aa:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80014ae:	e000      	b.n	80014b2 <bno055_euler+0x4e>
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80014b2:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 80014b4:	7a7b      	ldrb	r3, [r7, #9]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	7abb      	ldrb	r3, [r7, #10]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	7b3b      	ldrb	r3, [r7, #12]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001512:	ed97 7a04 	vldr	s14, [r7, #16]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}
 800152a:	bf00      	nop
 800152c:	44610000 	.word	0x44610000

08001530 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b0af      	sub	sp, #188	; 0xbc
 8001534:	af2a      	add	r7, sp, #168	; 0xa8
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 800153a:	687c      	ldr	r4, [r7, #4]
 800153c:	2302      	movs	r3, #2
 800153e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	9328      	str	r3, [sp, #160]	; 0xa0
 8001546:	2320      	movs	r3, #32
 8001548:	9327      	str	r3, [sp, #156]	; 0x9c
 800154a:	4668      	mov	r0, sp
 800154c:	f104 0310 	add.w	r3, r4, #16
 8001550:	229c      	movs	r2, #156	; 0x9c
 8001552:	4619      	mov	r1, r3
 8001554:	f007 f8e6 	bl	8008724 <memcpy>
 8001558:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800155c:	f000 fb9f 	bl	8001c9e <bno055_read_regs>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <bno055_quaternion_w+0x3e>
        return err;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	e012      	b.n	8001594 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21b      	sxth	r3, r3
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	eddf 6a05 	vldr	s13, [pc, #20]	; 800159c <bno055_quaternion_w+0x6c>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	46800000 	.word	0x46800000

080015a0 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b0af      	sub	sp, #188	; 0xbc
 80015a4:	af2a      	add	r7, sp, #168	; 0xa8
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80015aa:	687c      	ldr	r4, [r7, #4]
 80015ac:	2302      	movs	r3, #2
 80015ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80015b6:	2322      	movs	r3, #34	; 0x22
 80015b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80015ba:	4668      	mov	r0, sp
 80015bc:	f104 0310 	add.w	r3, r4, #16
 80015c0:	229c      	movs	r2, #156	; 0x9c
 80015c2:	4619      	mov	r1, r3
 80015c4:	f007 f8ae 	bl	8008724 <memcpy>
 80015c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015cc:	f000 fb67 	bl	8001c9e <bno055_read_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <bno055_quaternion_x+0x3e>
        return err;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	e012      	b.n	8001604 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	eddf 6a05 	vldr	s13, [pc, #20]	; 800160c <bno055_quaternion_x+0x6c>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	46800000 	.word	0x46800000

08001610 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b0af      	sub	sp, #188	; 0xbc
 8001614:	af2a      	add	r7, sp, #168	; 0xa8
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800161a:	687c      	ldr	r4, [r7, #4]
 800161c:	2302      	movs	r3, #2
 800161e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	9328      	str	r3, [sp, #160]	; 0xa0
 8001626:	2324      	movs	r3, #36	; 0x24
 8001628:	9327      	str	r3, [sp, #156]	; 0x9c
 800162a:	4668      	mov	r0, sp
 800162c:	f104 0310 	add.w	r3, r4, #16
 8001630:	229c      	movs	r2, #156	; 0x9c
 8001632:	4619      	mov	r1, r3
 8001634:	f007 f876 	bl	8008724 <memcpy>
 8001638:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800163c:	f000 fb2f 	bl	8001c9e <bno055_read_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <bno055_quaternion_y+0x3e>
        return err;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e012      	b.n	8001674 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	7b3b      	ldrb	r3, [r7, #12]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21b      	sxth	r3, r3
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001664:	eddf 6a05 	vldr	s13, [pc, #20]	; 800167c <bno055_quaternion_y+0x6c>
 8001668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	46800000 	.word	0x46800000

08001680 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b0af      	sub	sp, #188	; 0xbc
 8001684:	af2a      	add	r7, sp, #168	; 0xa8
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800168a:	687c      	ldr	r4, [r7, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	9328      	str	r3, [sp, #160]	; 0xa0
 8001696:	2326      	movs	r3, #38	; 0x26
 8001698:	9327      	str	r3, [sp, #156]	; 0x9c
 800169a:	4668      	mov	r0, sp
 800169c:	f104 0310 	add.w	r3, r4, #16
 80016a0:	229c      	movs	r2, #156	; 0x9c
 80016a2:	4619      	mov	r1, r3
 80016a4:	f007 f83e 	bl	8008724 <memcpy>
 80016a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ac:	f000 faf7 	bl	8001c9e <bno055_read_regs>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <bno055_quaternion_z+0x3e>
        return err;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	e012      	b.n	80016e4 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	7b3b      	ldrb	r3, [r7, #12]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016ec <bno055_quaternion_z+0x6c>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	46800000 	.word	0x46800000

080016f0 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b0b1      	sub	sp, #196	; 0xc4
 80016f4:	af2a      	add	r7, sp, #168	; 0xa8
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80016fa:	687c      	ldr	r4, [r7, #4]
 80016fc:	2308      	movs	r3, #8
 80016fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	9328      	str	r3, [sp, #160]	; 0xa0
 8001706:	2320      	movs	r3, #32
 8001708:	9327      	str	r3, [sp, #156]	; 0x9c
 800170a:	4668      	mov	r0, sp
 800170c:	f104 0310 	add.w	r3, r4, #16
 8001710:	229c      	movs	r2, #156	; 0x9c
 8001712:	4619      	mov	r1, r3
 8001714:	f007 f806 	bl	8008724 <memcpy>
 8001718:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800171c:	f000 fabf 	bl	8001c9e <bno055_read_regs>
 8001720:	4603      	mov	r3, r0
 8001722:	75fb      	strb	r3, [r7, #23]
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <bno055_quaternion+0x3e>
        return err;
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	e048      	b.n	80017c0 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001744:	eddf 6a20 	vldr	s13, [pc, #128]	; 80017c8 <bno055_quaternion+0xd8>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	b21a      	sxth	r2, r3
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	eddf 6a17 	vldr	s13, [pc, #92]	; 80017c8 <bno055_quaternion+0xd8>
 800176c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7c3b      	ldrb	r3, [r7, #16]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80017c8 <bno055_quaternion+0xd8>
 8001790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80017c8 <bno055_quaternion+0xd8>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	46800000 	.word	0x46800000

080017cc <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b0af      	sub	sp, #188	; 0xbc
 80017d0:	af2a      	add	r7, sp, #168	; 0xa8
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4603      	mov	r3, r0
 80017dc:	70fb      	strb	r3, [r7, #3]
 80017de:	460b      	mov	r3, r1
 80017e0:	70bb      	strb	r3, [r7, #2]
 80017e2:	4613      	mov	r3, r2
 80017e4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80017e6:	2101      	movs	r1, #1
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fabb 	bl	8001d64 <bno055_set_page>
 80017ee:	4603      	mov	r3, r0
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <bno055_acc_conf+0x30>
        return err;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	e04b      	b.n	8001894 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80017fc:	2100      	movs	r1, #0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f91b 	bl	8001a3a <bno055_set_opmode>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <bno055_acc_conf+0x46>
        return err;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	e040      	b.n	8001894 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001812:	200c      	movs	r0, #12
 8001814:	f003 f854 	bl	80048c0 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	78bb      	ldrb	r3, [r7, #2]
 800181c:	4313      	orrs	r3, r2
 800181e:	b2da      	uxtb	r2, r3
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	4313      	orrs	r3, r2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8001828:	687c      	ldr	r4, [r7, #4]
 800182a:	2301      	movs	r3, #1
 800182c:	9329      	str	r3, [sp, #164]	; 0xa4
 800182e:	f107 030e 	add.w	r3, r7, #14
 8001832:	9328      	str	r3, [sp, #160]	; 0xa0
 8001834:	2308      	movs	r3, #8
 8001836:	9327      	str	r3, [sp, #156]	; 0x9c
 8001838:	4668      	mov	r0, sp
 800183a:	f104 0310 	add.w	r3, r4, #16
 800183e:	229c      	movs	r2, #156	; 0x9c
 8001840:	4619      	mov	r1, r3
 8001842:	f006 ff6f 	bl	8008724 <memcpy>
 8001846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800184a:	f000 fa5e 	bl	8001d0a <bno055_write_regs>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <bno055_acc_conf+0x90>
        return err;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	e01b      	b.n	8001894 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	791b      	ldrb	r3, [r3, #4]
 8001860:	4619      	mov	r1, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f8e9 	bl	8001a3a <bno055_set_opmode>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <bno055_acc_conf+0xaa>
        return err;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	e00e      	b.n	8001894 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001876:	2018      	movs	r0, #24
 8001878:	f003 f822 	bl	80048c0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800187c:	2100      	movs	r1, #0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fa70 	bl	8001d64 <bno055_set_page>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <bno055_acc_conf+0xc6>
        return err;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	e000      	b.n	8001894 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b0af      	sub	sp, #188	; 0xbc
 80018a0:	af2a      	add	r7, sp, #168	; 0xa8
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70bb      	strb	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80018b6:	2101      	movs	r1, #1
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa53 	bl	8001d64 <bno055_set_page>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <bno055_gyr_conf+0x30>
        return err;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	e04a      	b.n	8001962 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8b3 	bl	8001a3a <bno055_set_opmode>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <bno055_gyr_conf+0x46>
        return err;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	e03f      	b.n	8001962 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80018e2:	200c      	movs	r0, #12
 80018e4:	f002 ffec 	bl	80048c0 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	78bb      	ldrb	r3, [r7, #2]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	733b      	strb	r3, [r7, #12]
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80018f6:	687c      	ldr	r4, [r7, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	9328      	str	r3, [sp, #160]	; 0xa0
 8001902:	230a      	movs	r3, #10
 8001904:	9327      	str	r3, [sp, #156]	; 0x9c
 8001906:	4668      	mov	r0, sp
 8001908:	f104 0310 	add.w	r3, r4, #16
 800190c:	229c      	movs	r2, #156	; 0x9c
 800190e:	4619      	mov	r1, r3
 8001910:	f006 ff08 	bl	8008724 <memcpy>
 8001914:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001918:	f000 f9f7 	bl	8001d0a <bno055_write_regs>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	e01b      	b.n	8001962 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	791b      	ldrb	r3, [r3, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f882 	bl	8001a3a <bno055_set_opmode>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <bno055_gyr_conf+0xa8>
        return err;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	e00e      	b.n	8001962 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001944:	2018      	movs	r0, #24
 8001946:	f002 ffbb 	bl	80048c0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800194a:	2100      	movs	r1, #0
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa09 	bl	8001d64 <bno055_set_page>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <bno055_gyr_conf+0xc4>
        return err;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	e000      	b.n	8001962 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}

0800196a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800196a:	b590      	push	{r4, r7, lr}
 800196c:	b0af      	sub	sp, #188	; 0xbc
 800196e:	af2a      	add	r7, sp, #168	; 0xa8
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	461a      	mov	r2, r3
 8001978:	4603      	mov	r3, r0
 800197a:	70fb      	strb	r3, [r7, #3]
 800197c:	460b      	mov	r3, r1
 800197e:	70bb      	strb	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001984:	2101      	movs	r1, #1
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f9ec 	bl	8001d64 <bno055_set_page>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <bno055_mag_conf+0x30>
        return err;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	e04b      	b.n	8001a32 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f84c 	bl	8001a3a <bno055_set_opmode>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <bno055_mag_conf+0x46>
        return err;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	e040      	b.n	8001a32 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80019b0:	200c      	movs	r0, #12
 80019b2:	f002 ff85 	bl	80048c0 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80019c6:	687c      	ldr	r4, [r7, #4]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80019cc:	f107 030e 	add.w	r3, r7, #14
 80019d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019d2:	2309      	movs	r3, #9
 80019d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019d6:	4668      	mov	r0, sp
 80019d8:	f104 0310 	add.w	r3, r4, #16
 80019dc:	229c      	movs	r2, #156	; 0x9c
 80019de:	4619      	mov	r1, r3
 80019e0:	f006 fea0 	bl	8008724 <memcpy>
 80019e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019e8:	f000 f98f 	bl	8001d0a <bno055_write_regs>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <bno055_mag_conf+0x90>
        return err;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	e01b      	b.n	8001a32 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	791b      	ldrb	r3, [r3, #4]
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f81a 	bl	8001a3a <bno055_set_opmode>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <bno055_mag_conf+0xaa>
        return err;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	e00e      	b.n	8001a32 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001a14:	2018      	movs	r0, #24
 8001a16:	f002 ff53 	bl	80048c0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f9a1 	bl	8001d64 <bno055_set_page>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <bno055_mag_conf+0xc6>
        return err;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	e000      	b.n	8001a32 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd90      	pop	{r4, r7, pc}

08001a3a <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8001a3a:	b590      	push	{r4, r7, lr}
 8001a3c:	b0af      	sub	sp, #188	; 0xbc
 8001a3e:	af2a      	add	r7, sp, #168	; 0xa8
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8001a46:	687c      	ldr	r4, [r7, #4]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a4c:	1cfb      	adds	r3, r7, #3
 8001a4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a50:	233d      	movs	r3, #61	; 0x3d
 8001a52:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a54:	4668      	mov	r0, sp
 8001a56:	f104 0310 	add.w	r3, r4, #16
 8001a5a:	229c      	movs	r2, #156	; 0x9c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f006 fe61 	bl	8008724 <memcpy>
 8001a62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a66:	f000 f950 	bl	8001d0a <bno055_write_regs>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	e003      	b.n	8001a80 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001a78:	2018      	movs	r0, #24
 8001a7a:	f002 ff21 	bl	80048c0 <HAL_Delay>
    return BNO_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}

08001a88 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b0af      	sub	sp, #188	; 0xbc
 8001a8c:	af2a      	add	r7, sp, #168	; 0xa8
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	70fb      	strb	r3, [r7, #3]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70bb      	strb	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffc8 	bl	8001a3a <bno055_set_opmode>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <bno055_set_unit+0x30>
        return err;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	e04b      	b.n	8001b50 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f952 	bl	8001d64 <bno055_set_page>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <bno055_set_unit+0x46>
        return err;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	e040      	b.n	8001b50 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	787b      	ldrb	r3, [r7, #1]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8001ae6:	687c      	ldr	r4, [r7, #4]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9329      	str	r3, [sp, #164]	; 0xa4
 8001aec:	f107 030e 	add.w	r3, r7, #14
 8001af0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001af2:	233b      	movs	r3, #59	; 0x3b
 8001af4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001af6:	4668      	mov	r0, sp
 8001af8:	f104 0310 	add.w	r3, r4, #16
 8001afc:	229c      	movs	r2, #156	; 0x9c
 8001afe:	4619      	mov	r1, r3
 8001b00:	f006 fe10 	bl	8008724 <memcpy>
 8001b04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b08:	f000 f8ff 	bl	8001d0a <bno055_write_regs>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <bno055_set_unit+0x92>
        return err;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	e01a      	b.n	8001b50 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	78ba      	ldrb	r2, [r7, #2]
 8001b1e:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	787a      	ldrb	r2, [r7, #1]
 8001b24:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b2c:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff7d 	bl	8001a3a <bno055_set_opmode>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <bno055_set_unit+0xc6>
        return err;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	e000      	b.n	8001b50 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b0af      	sub	sp, #188	; 0xbc
 8001b5c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e04d      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff62 	bl	8001a3a <bno055_set_opmode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <bno055_set_pwr_mode+0x2c>
        return err;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	e042      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001b84:	2100      	movs	r1, #0
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8ec 	bl	8001d64 <bno055_set_page>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <bno055_set_pwr_mode+0x42>
        return err;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	e037      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8001b9a:	687c      	ldr	r4, [r7, #4]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001ba0:	1cfb      	adds	r3, r7, #3
 8001ba2:	9328      	str	r3, [sp, #160]	; 0xa0
 8001ba4:	233e      	movs	r3, #62	; 0x3e
 8001ba6:	9327      	str	r3, [sp, #156]	; 0x9c
 8001ba8:	4668      	mov	r0, sp
 8001baa:	f104 0310 	add.w	r3, r4, #16
 8001bae:	229c      	movs	r2, #156	; 0x9c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f006 fdb7 	bl	8008724 <memcpy>
 8001bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bba:	f000 f8a6 	bl	8001d0a <bno055_write_regs>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	e01e      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8c5 	bl	8001d64 <bno055_set_page>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <bno055_set_pwr_mode+0x90>
        return err;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	e010      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff23 	bl	8001a3a <bno055_set_opmode>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <bno055_set_pwr_mode+0xaa>
        return err;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	e003      	b.n	8001c0a <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8001c02:	2002      	movs	r0, #2
 8001c04:	f002 fe5c 	bl	80048c0 <HAL_Delay>
    return BNO_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b0af      	sub	sp, #188	; 0xbc
 8001c16:	af2a      	add	r7, sp, #168	; 0xa8
 8001c18:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001c1e:	687c      	ldr	r4, [r7, #4]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c24:	f107 030f 	add.w	r3, r7, #15
 8001c28:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c2a:	233f      	movs	r3, #63	; 0x3f
 8001c2c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c2e:	4668      	mov	r0, sp
 8001c30:	f104 0310 	add.w	r3, r4, #16
 8001c34:	229c      	movs	r2, #156	; 0x9c
 8001c36:	4619      	mov	r1, r3
 8001c38:	f006 fd74 	bl	8008724 <memcpy>
 8001c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c40:	f000 f863 	bl	8001d0a <bno055_write_regs>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}

08001c58 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b0af      	sub	sp, #188	; 0xbc
 8001c5c:	af2a      	add	r7, sp, #168	; 0xa8
 8001c5e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8001c64:	687c      	ldr	r4, [r7, #4]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c6a:	f107 030f 	add.w	r3, r7, #15
 8001c6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c70:	233f      	movs	r3, #63	; 0x3f
 8001c72:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c74:	4668      	mov	r0, sp
 8001c76:	f104 0310 	add.w	r3, r4, #16
 8001c7a:	229c      	movs	r2, #156	; 0x9c
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f006 fd51 	bl	8008724 <memcpy>
 8001c82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c86:	f000 f840 	bl	8001d0a <bno055_write_regs>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <bno055_on+0x3e>
    }
    return BNO_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}

08001c9e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	f107 0c10 	add.w	ip, r7, #16
 8001caa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8001cae:	6938      	ldr	r0, [r7, #16]
 8001cb0:	7dbb      	ldrb	r3, [r7, #22]
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f003 fec6 	bl	8005a50 <HAL_I2C_Master_Transmit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e014      	b.n	8001cfc <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8001cd2:	6938      	ldr	r0, [r7, #16]
 8001cd4:	7dbb      	ldrb	r3, [r7, #22]
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce2:	9200      	str	r2, [sp, #0]
 8001ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ce8:	f003 ffb0 	bl	8005c4c <HAL_I2C_Master_Receive>
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d06:	b004      	add	sp, #16
 8001d08:	4770      	bx	lr

08001d0a <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	f107 0418 	add.w	r4, r7, #24
 8001d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	7fbb      	ldrb	r3, [r7, #30]
 8001d1e:	b299      	uxth	r1, r3
 8001d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d2a:	b29c      	uxth	r4, r3
 8001d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d36:	9502      	str	r5, [sp, #8]
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4623      	mov	r3, r4
 8001d42:	f004 f9b5 	bl	80060b0 <HAL_I2C_Mem_Write>
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d60:	b004      	add	sp, #16
 8001d62:	4770      	bx	lr

08001d64 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b0af      	sub	sp, #188	; 0xbc
 8001d68:	af2a      	add	r7, sp, #168	; 0xa8
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b5a      	ldrb	r2, [r3, #13]
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <bno055_set_page+0x1a>
        return BNO_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e024      	b.n	8001dc8 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d901      	bls.n	8001d88 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8001d84:	2302      	movs	r3, #2
 8001d86:	e01f      	b.n	8001dc8 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8001d88:	687c      	ldr	r4, [r7, #4]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d8e:	1cfb      	adds	r3, r7, #3
 8001d90:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d92:	2307      	movs	r3, #7
 8001d94:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d96:	4668      	mov	r0, sp
 8001d98:	f104 0310 	add.w	r3, r4, #16
 8001d9c:	229c      	movs	r2, #156	; 0x9c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f006 fcc0 	bl	8008724 <memcpy>
 8001da4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da8:	f7ff ffaf 	bl	8001d0a <bno055_write_regs>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <bno055_set_page+0x56>
        return err;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	e006      	b.n	8001dc8 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f002 fd7d 	bl	80048c0 <HAL_Delay>
    return BNO_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}

08001dd0 <bno055_start>:
            return "[BNO] Wrong Chip ID.";
    }
    return "[BNO] Ok!";
}

void bno055_start(bno055_t* bno, error_bno* err, I2C_HandleTypeDef* hi2c) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0b2      	sub	sp, #200	; 0xc8
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
    // Initialize the bno structure
    *bno = (bno055_t){
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4618      	mov	r0, r3
 8001de0:	23ac      	movs	r3, #172	; 0xac
 8001de2:	461a      	mov	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f006 fc71 	bl	80086cc <memset>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2208      	movs	r2, #8
 8001df4:	711a      	strb	r2, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2228      	movs	r2, #40	; 0x28
 8001dfa:	719a      	strb	r2, [r3, #6]
        .addr = BNO_ADDR_ALT,
        .mode = BNO_MODE_IMU,
        ._temp_unit = 0,
    };

    HAL_Delay(1000);
 8001dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e00:	f002 fd5e 	bl	80048c0 <HAL_Delay>
    if ((*err = bno055_init(bno)) == BNO_OK) {
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7fe fb75 	bl	80004f4 <bno055_init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11b      	bne.n	8001e52 <bno055_start+0x82>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e20:	482c      	ldr	r0, [pc, #176]	; (8001ed4 <bno055_start+0x104>)
 8001e22:	f003 fcb7 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001e26:	2201      	movs	r2, #1
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	482a      	ldr	r0, [pc, #168]	; (8001ed8 <bno055_start+0x108>)
 8001e2e:	f003 fcb1 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8001e32:	2064      	movs	r0, #100	; 0x64
 8001e34:	f002 fd44 	bl	80048c0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <bno055_start+0x108>)
 8001e40:	f003 fca8 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4a:	4822      	ldr	r0, [pc, #136]	; (8001ed4 <bno055_start+0x104>)
 8001e4c:	f003 fca2 	bl	8005794 <HAL_GPIO_WritePin>
 8001e50:	e007      	b.n	8001e62 <bno055_start+0x92>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e58:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <bno055_start+0x104>)
 8001e5a:	f003 fc9b 	bl	8005794 <HAL_GPIO_WritePin>
        Error_Handler();
 8001e5e:	f002 f9b7 	bl	80041d0 <Error_Handler>
    }

    HAL_Delay(100);
 8001e62:	2064      	movs	r0, #100	; 0x64
 8001e64:	f002 fd2c 	bl	80048c0 <HAL_Delay>
    *err = bno055_set_unit(bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fe08 	bl	8001a88 <bno055_set_unit>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	701a      	strb	r2, [r3, #0]
    if (*err != BNO_OK) {
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <bno055_start+0xf0>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <bno055_start+0x104>)
 8001e90:	f003 fc80 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <bno055_start+0x108>)
 8001e9c:	f003 fc7a 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8001ea0:	2064      	movs	r0, #100	; 0x64
 8001ea2:	f002 fd0d 	bl	80048c0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <bno055_start+0x108>)
 8001eae:	f003 fc71 	bl	8005794 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <bno055_start+0x104>)
 8001eba:	f003 fc6b 	bl	8005794 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
    }

}
 8001ebe:	e005      	b.n	8001ecc <bno055_start+0xfc>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <bno055_start+0x104>)
 8001ec8:	f003 fc64 	bl	8005794 <HAL_GPIO_WritePin>
}
 8001ecc:	bf00      	nop
 8001ece:	37c0      	adds	r7, #192	; 0xc0
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020400 	.word	0x40020400

08001edc <get_euler_imu>:

void get_euler_imu(bno055_t* bno, bno055_euler_t* eul, bno055_vec3_t* lia, s8* temperature, BNO055_Typedef* package){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
    bno->euler(bno, eul); // Remove the & operators
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	4798      	blx	r3
    bno->linear_acc(bno, lia);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	4798      	blx	r3
    package->roll = (int16_t)(eul->roll*10);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f12:	ee17 3a90 	vmov	r3, s15
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	809a      	strh	r2, [r3, #4]
    package->pitch = (int16_t)(eul->pitch*10);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	805a      	strh	r2, [r3, #2]
    package->yaw = (int16_t)(eul->yaw*10);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4a:	ee17 3a90 	vmov	r3, s15
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	801a      	strh	r2, [r3, #0]
    package->x_acceleration = (int16_t)(lia->x*10);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f66:	ee17 3a90 	vmov	r3, s15
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	80da      	strh	r2, [r3, #6]
    package->y_acceleration = (int16_t)(lia->y*10);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 3a90 	vmov	r3, s15
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	811a      	strh	r2, [r3, #8]
    package->z_acceleration = (int16_t)(lia->z*10);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9e:	ee17 3a90 	vmov	r3, s15
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	815a      	strh	r2, [r3, #10]
    package->temperature = (intptr_t)(temperature);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	819a      	strh	r2, [r3, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <komunikasi_ctrl_init>:
static uint8_t rx_buf_command[19];
static uint8_t rx_buf_holder[300];
static uint8_t id_holder = 0;
//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <komunikasi_ctrl_init+0x1c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200000e0 	.word	0x200000e0

08001fd8 <checksum_ctrl_generator>:

uint8_t checksum_ctrl_generator(uint8_t* arr, uint8_t size){
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73bb      	strb	r3, [r7, #14]
 8001fec:	e009      	b.n	8002002 <checksum_ctrl_generator+0x2a>
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73bb      	strb	r3, [r7, #14]
 8002002:	7bba      	ldrb	r2, [r7, #14]
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3f1      	bcc.n	8001fee <checksum_ctrl_generator+0x16>
	return (chksm & 0xFF);
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <tx_ctrl_send_BNO055>:

	if(HAL_UART_Transmit(huart_ctrl, ping, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

bool tx_ctrl_send_BNO055(BNO055_Typedef BNO055){
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b08b      	sub	sp, #44	; 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	463c      	mov	r4, r7
 8002020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t BNO[] = {0xA5, 0x5A, 0x02, ((BNO055.yaw >> 8) & 0XFF), ((BNO055.yaw) & 0XFF), ((BNO055.pitch >> 8) & 0XFF), ((BNO055.pitch) & 0XFF), ((BNO055.roll >> 8) & 0XFF), ((BNO055.roll) & 0XFF), ((BNO055.x_acceleration >> 8) & 0XFF), ((BNO055.x_acceleration) & 0XFF), ((BNO055.y_acceleration >> 8) & 0XFF), ((BNO055.y_acceleration) & 0XFF), ((BNO055.z_acceleration >> 8) & 0XFF), ((BNO055.z_acceleration) & 0XFF), ((BNO055.temperature >> 8) & 0XFF), ((BNO055.temperature) & 0XFF), 0x00, 0x00};
 8002024:	23a5      	movs	r3, #165	; 0xa5
 8002026:	753b      	strb	r3, [r7, #20]
 8002028:	235a      	movs	r3, #90	; 0x5a
 800202a:	757b      	strb	r3, [r7, #21]
 800202c:	2302      	movs	r3, #2
 800202e:	75bb      	strb	r3, [r7, #22]
 8002030:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002034:	121b      	asrs	r3, r3, #8
 8002036:	b21b      	sxth	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	75fb      	strb	r3, [r7, #23]
 800203c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	763b      	strb	r3, [r7, #24]
 8002044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002048:	121b      	asrs	r3, r3, #8
 800204a:	b21b      	sxth	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	767b      	strb	r3, [r7, #25]
 8002050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	76bb      	strb	r3, [r7, #26]
 8002058:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800205c:	121b      	asrs	r3, r3, #8
 800205e:	b21b      	sxth	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	76fb      	strb	r3, [r7, #27]
 8002064:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	773b      	strb	r3, [r7, #28]
 800206c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002070:	121b      	asrs	r3, r3, #8
 8002072:	b21b      	sxth	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	777b      	strb	r3, [r7, #29]
 8002078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	77bb      	strb	r3, [r7, #30]
 8002080:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002084:	121b      	asrs	r3, r3, #8
 8002086:	b21b      	sxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	77fb      	strb	r3, [r7, #31]
 800208c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f887 3020 	strb.w	r3, [r7, #32]
 8002096:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800209a:	121b      	asrs	r3, r3, #8
 800209c:	b21b      	sxth	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80020a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80020ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020b2:	121b      	asrs	r3, r3, #8
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	BNO[18] = checksum_ctrl_generator(BNO, 19);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	2113      	movs	r1, #19
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff7d 	bl	8001fd8 <checksum_ctrl_generator>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if(HAL_UART_Transmit(huart_ctrl, BNO, 19, TIMEOUT_SEND) == HAL_OK) return true;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <tx_ctrl_send_BNO055+0xf0>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	f107 0114 	add.w	r1, r7, #20
 80020ec:	2364      	movs	r3, #100	; 0x64
 80020ee:	2213      	movs	r2, #19
 80020f0:	f005 fd2a 	bl	8007b48 <HAL_UART_Transmit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <tx_ctrl_send_BNO055+0xe6>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <tx_ctrl_send_BNO055+0xe8>
	else return false;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	372c      	adds	r7, #44	; 0x2c
 8002104:	46bd      	mov	sp, r7
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	200000e0 	.word	0x200000e0

0800210c <tx_ctrl_send_Astar>:
	encoder_data[18] = checksum_ctrl_generator(encoder_data, 19);

	if(HAL_UART_Transmit(huart_ctrl, encoder_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}
bool tx_ctrl_send_Astar(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
	for(int i = 0; i <= id_holder; i++){
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e021      	b.n	800215c <tx_ctrl_send_Astar+0x50>
		uint8_t tx_data[19];
		for(int j = 0; j < 19;j++){
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e011      	b.n	8002142 <tx_ctrl_send_Astar+0x36>
			tx_data[j] = rx_buf_holder[(i*19)+j];
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	441a      	add	r2, r3
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <tx_ctrl_send_Astar+0x68>)
 8002130:	5cd1      	ldrb	r1, [r2, r3]
 8002132:	1d3a      	adds	r2, r7, #4
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4413      	add	r3, r2
 8002138:	460a      	mov	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 19;j++){
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	3301      	adds	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b12      	cmp	r3, #18
 8002146:	ddea      	ble.n	800211e <tx_ctrl_send_Astar+0x12>
		}
		HAL_UART_Transmit(huart_ctrl, tx_data, 19, TIMEOUT_SEND);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <tx_ctrl_send_Astar+0x6c>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	1d39      	adds	r1, r7, #4
 800214e:	2364      	movs	r3, #100	; 0x64
 8002150:	2213      	movs	r2, #19
 8002152:	f005 fcf9 	bl	8007b48 <HAL_UART_Transmit>
	for(int i = 0; i <= id_holder; i++){
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <tx_ctrl_send_Astar+0x70>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4293      	cmp	r3, r2
 8002166:	ddd7      	ble.n	8002118 <tx_ctrl_send_Astar+0xc>
	}
	return true;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000010c 	.word	0x2000010c
 8002178:	200000e0 	.word	0x200000e0
 800217c:	20000238 	.word	0x20000238

08002180 <tx_ctrl_send_Command>:

bool tx_ctrl_send_Command(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	if(HAL_UART_Transmit(huart_ctrl, rx_buf_command, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <tx_ctrl_send_Command+0x24>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	2364      	movs	r3, #100	; 0x64
 800218a:	2213      	movs	r2, #19
 800218c:	4906      	ldr	r1, [pc, #24]	; (80021a8 <tx_ctrl_send_Command+0x28>)
 800218e:	f005 fcdb 	bl	8007b48 <HAL_UART_Transmit>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <tx_ctrl_send_Command+0x1c>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <tx_ctrl_send_Command+0x1e>
	else return false;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000e0 	.word	0x200000e0
 80021a8:	200000f8 	.word	0x200000f8

080021ac <rx_ctrl_start_get>:
	if(HAL_UART_Transmit(huart_ctrl, odom_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}


void rx_ctrl_start_get(void){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 19);
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <rx_ctrl_start_get+0x18>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2213      	movs	r2, #19
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <rx_ctrl_start_get+0x1c>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 fd50 	bl	8007c5e <HAL_UART_Receive_DMA>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200000e0 	.word	0x200000e0
 80021c8:	200000e4 	.word	0x200000e4

080021cc <rx_ctrl_get>:

void rx_ctrl_get(com_ctrl_get_t* get){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <rx_ctrl_get+0x248>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2ba5      	cmp	r3, #165	; 0xa5
 80021da:	f040 8514 	bne.w	8002c06 <rx_ctrl_get+0xa3a>
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <rx_ctrl_get+0x248>)
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b5a      	cmp	r3, #90	; 0x5a
 80021e4:	f040 850f 	bne.w	8002c06 <rx_ctrl_get+0xa3a>

			// Check for ping
			if(rxbuf_get_ctrl[2] == 0x01){
 80021e8:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <rx_ctrl_get+0x248>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d104      	bne.n	80021fa <rx_ctrl_get+0x2e>
				get->cmd = PING;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80021f8:	e0bc      	b.n	8002374 <rx_ctrl_get+0x1a8>
			}
			// Check for BNO08X Sensor
			else if(rxbuf_get_ctrl[2] == 0x02){
 80021fa:	4b86      	ldr	r3, [pc, #536]	; (8002414 <rx_ctrl_get+0x248>)
 80021fc:	789b      	ldrb	r3, [r3, #2]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80b8 	bne.w	8002374 <rx_ctrl_get+0x1a8>

				if((rxbuf_get_ctrl[3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <rx_ctrl_get+0x248>)
 8002206:	78db      	ldrb	r3, [r3, #3]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	da0c      	bge.n	8002228 <rx_ctrl_get+0x5c>
 800220e:	4b81      	ldr	r3, [pc, #516]	; (8002414 <rx_ctrl_get+0x248>)
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	4b7f      	ldr	r3, [pc, #508]	; (8002414 <rx_ctrl_get+0x248>)
 8002218:	791b      	ldrb	r3, [r3, #4]
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21a      	sxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8002226:	e00b      	b.n	8002240 <rx_ctrl_get+0x74>
				else get->yaw = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002228:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <rx_ctrl_get+0x248>)
 800222a:	78db      	ldrb	r3, [r3, #3]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	4b78      	ldr	r3, [pc, #480]	; (8002414 <rx_ctrl_get+0x248>)
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8

				if((rxbuf_get_ctrl[5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002240:	4b74      	ldr	r3, [pc, #464]	; (8002414 <rx_ctrl_get+0x248>)
 8002242:	795b      	ldrb	r3, [r3, #5]
 8002244:	b25b      	sxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	da0c      	bge.n	8002264 <rx_ctrl_get+0x98>
 800224a:	4b72      	ldr	r3, [pc, #456]	; (8002414 <rx_ctrl_get+0x248>)
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	b21a      	sxth	r2, r3
 8002252:	4b70      	ldr	r3, [pc, #448]	; (8002414 <rx_ctrl_get+0x248>)
 8002254:	799b      	ldrb	r3, [r3, #6]
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 8002262:	e00b      	b.n	800227c <rx_ctrl_get+0xb0>
				else get->pitch = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 8002264:	4b6b      	ldr	r3, [pc, #428]	; (8002414 <rx_ctrl_get+0x248>)
 8002266:	795b      	ldrb	r3, [r3, #5]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b21a      	sxth	r2, r3
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <rx_ctrl_get+0x248>)
 800226e:	799b      	ldrb	r3, [r3, #6]
 8002270:	b21b      	sxth	r3, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	b21a      	sxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6

				if((rxbuf_get_ctrl[7] & 0x80)) get->roll = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <rx_ctrl_get+0x248>)
 800227e:	79db      	ldrb	r3, [r3, #7]
 8002280:	b25b      	sxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	da0c      	bge.n	80022a0 <rx_ctrl_get+0xd4>
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <rx_ctrl_get+0x248>)
 8002288:	79db      	ldrb	r3, [r3, #7]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	4b61      	ldr	r3, [pc, #388]	; (8002414 <rx_ctrl_get+0x248>)
 8002290:	7a1b      	ldrb	r3, [r3, #8]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
 800229e:	e00b      	b.n	80022b8 <rx_ctrl_get+0xec>
				else get->roll = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <rx_ctrl_get+0x248>)
 80022a2:	79db      	ldrb	r3, [r3, #7]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <rx_ctrl_get+0x248>)
 80022aa:	7a1b      	ldrb	r3, [r3, #8]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <rx_ctrl_get+0x248>)
 80022ba:	7a5b      	ldrb	r3, [r3, #9]
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da0c      	bge.n	80022dc <rx_ctrl_get+0x110>
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <rx_ctrl_get+0x248>)
 80022c4:	7a5b      	ldrb	r3, [r3, #9]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	4b52      	ldr	r3, [pc, #328]	; (8002414 <rx_ctrl_get+0x248>)
 80022cc:	7a9b      	ldrb	r3, [r3, #10]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
 80022da:	e00b      	b.n	80022f4 <rx_ctrl_get+0x128>
				else get->x_acceleration = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 80022dc:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <rx_ctrl_get+0x248>)
 80022de:	7a5b      	ldrb	r3, [r3, #9]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <rx_ctrl_get+0x248>)
 80022e6:	7a9b      	ldrb	r3, [r3, #10]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 80022f4:	4b47      	ldr	r3, [pc, #284]	; (8002414 <rx_ctrl_get+0x248>)
 80022f6:	7adb      	ldrb	r3, [r3, #11]
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da0c      	bge.n	8002318 <rx_ctrl_get+0x14c>
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <rx_ctrl_get+0x248>)
 8002300:	7adb      	ldrb	r3, [r3, #11]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b21a      	sxth	r2, r3
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <rx_ctrl_get+0x248>)
 8002308:	7b1b      	ldrb	r3, [r3, #12]
 800230a:	b21b      	sxth	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b21a      	sxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
 8002316:	e00b      	b.n	8002330 <rx_ctrl_get+0x164>
				else get->y_acceleration = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 8002318:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <rx_ctrl_get+0x248>)
 800231a:	7adb      	ldrb	r3, [r3, #11]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <rx_ctrl_get+0x248>)
 8002322:	7b1b      	ldrb	r3, [r3, #12]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21a      	sxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc

				if((rxbuf_get_ctrl[13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 8002330:	4b38      	ldr	r3, [pc, #224]	; (8002414 <rx_ctrl_get+0x248>)
 8002332:	7b5b      	ldrb	r3, [r3, #13]
 8002334:	b25b      	sxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	da0c      	bge.n	8002354 <rx_ctrl_get+0x188>
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <rx_ctrl_get+0x248>)
 800233c:	7b5b      	ldrb	r3, [r3, #13]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <rx_ctrl_get+0x248>)
 8002344:	7b9b      	ldrb	r3, [r3, #14]
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	b21a      	sxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
 8002352:	e00b      	b.n	800236c <rx_ctrl_get+0x1a0>
				else get->z_acceleration = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <rx_ctrl_get+0x248>)
 8002356:	7b5b      	ldrb	r3, [r3, #13]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b21a      	sxth	r2, r3
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <rx_ctrl_get+0x248>)
 800235e:	7b9b      	ldrb	r3, [r3, #14]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de

				get->cmd = DATA;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
			}

			// Check for Task Done
			if(rxbuf_get_ctrl[2] == 0x03){
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <rx_ctrl_get+0x248>)
 8002376:	789b      	ldrb	r3, [r3, #2]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d153      	bne.n	8002424 <rx_ctrl_get+0x258>
				if((rxbuf_get_ctrl[3] & 0x80)) get->step = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <rx_ctrl_get+0x248>)
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	b25b      	sxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	da0c      	bge.n	80023a0 <rx_ctrl_get+0x1d4>
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <rx_ctrl_get+0x248>)
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	4b21      	ldr	r3, [pc, #132]	; (8002414 <rx_ctrl_get+0x248>)
 8002390:	791b      	ldrb	r3, [r3, #4]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
 800239e:	e00b      	b.n	80023b8 <rx_ctrl_get+0x1ec>
				else get->step = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <rx_ctrl_get+0x248>)
 80023a2:	78db      	ldrb	r3, [r3, #3]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <rx_ctrl_get+0x248>)
 80023aa:	791b      	ldrb	r3, [r3, #4]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6

				// Cleaning rx_buf_holder & rx_buf_command
				for(int i = 0; i <= id_holder; i++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e01b      	b.n	80023f6 <rx_ctrl_get+0x22a>
					for(int j = 0; j < 19;j++){
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	e012      	b.n	80023ea <rx_ctrl_get+0x21e>
						rx_buf_holder[(i*19)+j] = 0;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	441a      	add	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a10      	ldr	r2, [pc, #64]	; (8002418 <rx_ctrl_get+0x24c>)
 80023d6:	2100      	movs	r1, #0
 80023d8:	54d1      	strb	r1, [r2, r3]
						rx_buf_command[j] = 0;
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <rx_ctrl_get+0x250>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 19;j++){
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3301      	adds	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	dde9      	ble.n	80023c4 <rx_ctrl_get+0x1f8>
				for(int i = 0; i <= id_holder; i++){
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <rx_ctrl_get+0x254>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4293      	cmp	r3, r2
 8002400:	dddd      	ble.n	80023be <rx_ctrl_get+0x1f2>
					}
				}
				id_holder = 0;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <rx_ctrl_get+0x254>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]

				get->cmd = DATA;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2205      	movs	r2, #5
 800240c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002410:	e3f9      	b.n	8002c06 <rx_ctrl_get+0xa3a>
 8002412:	bf00      	nop
 8002414:	200000e4 	.word	0x200000e4
 8002418:	2000010c 	.word	0x2000010c
 800241c:	200000f8 	.word	0x200000f8
 8002420:	20000238 	.word	0x20000238
			}

			// Check for Kinematic
			else if(rxbuf_get_ctrl[2] == 0x05){
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <rx_ctrl_get+0x48c>)
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d17c      	bne.n	8002526 <rx_ctrl_get+0x35a>

				if((rxbuf_get_ctrl[3] & 0x80)) get->Sx = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <rx_ctrl_get+0x48c>)
 800242e:	78db      	ldrb	r3, [r3, #3]
 8002430:	b25b      	sxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0c      	bge.n	8002450 <rx_ctrl_get+0x284>
 8002436:	4b88      	ldr	r3, [pc, #544]	; (8002658 <rx_ctrl_get+0x48c>)
 8002438:	78db      	ldrb	r3, [r3, #3]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b21a      	sxth	r2, r3
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <rx_ctrl_get+0x48c>)
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	b21b      	sxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b21a      	sxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 800244e:	e00b      	b.n	8002468 <rx_ctrl_get+0x29c>
				else get->Sx = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <rx_ctrl_get+0x48c>)
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <rx_ctrl_get+0x48c>)
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21a      	sxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				if((rxbuf_get_ctrl[5] & 0x80)) get->Sy = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <rx_ctrl_get+0x48c>)
 800246a:	795b      	ldrb	r3, [r3, #5]
 800246c:	b25b      	sxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	da0c      	bge.n	800248c <rx_ctrl_get+0x2c0>
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <rx_ctrl_get+0x48c>)
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b21a      	sxth	r2, r3
 800247a:	4b77      	ldr	r3, [pc, #476]	; (8002658 <rx_ctrl_get+0x48c>)
 800247c:	799b      	ldrb	r3, [r3, #6]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 800248a:	e00b      	b.n	80024a4 <rx_ctrl_get+0x2d8>
				else get->Sy = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 800248c:	4b72      	ldr	r3, [pc, #456]	; (8002658 <rx_ctrl_get+0x48c>)
 800248e:	795b      	ldrb	r3, [r3, #5]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21a      	sxth	r2, r3
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <rx_ctrl_get+0x48c>)
 8002496:	799b      	ldrb	r3, [r3, #6]
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21a      	sxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_ctrl[7] & 0x80)) get->St = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <rx_ctrl_get+0x48c>)
 80024a6:	79db      	ldrb	r3, [r3, #7]
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da0c      	bge.n	80024c8 <rx_ctrl_get+0x2fc>
 80024ae:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <rx_ctrl_get+0x48c>)
 80024b0:	79db      	ldrb	r3, [r3, #7]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <rx_ctrl_get+0x48c>)
 80024b8:	7a1b      	ldrb	r3, [r3, #8]
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21a      	sxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 80024c6:	e00b      	b.n	80024e0 <rx_ctrl_get+0x314>
				else get->St = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80024c8:	4b63      	ldr	r3, [pc, #396]	; (8002658 <rx_ctrl_get+0x48c>)
 80024ca:	79db      	ldrb	r3, [r3, #7]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <rx_ctrl_get+0x48c>)
 80024d2:	7a1b      	ldrb	r3, [r3, #8]
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b21a      	sxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				if((rxbuf_get_ctrl[9] & 0x80)) get->T = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 80024e0:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <rx_ctrl_get+0x48c>)
 80024e2:	7a5b      	ldrb	r3, [r3, #9]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da0c      	bge.n	8002504 <rx_ctrl_get+0x338>
 80024ea:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <rx_ctrl_get+0x48c>)
 80024ec:	7a5b      	ldrb	r3, [r3, #9]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	4b59      	ldr	r3, [pc, #356]	; (8002658 <rx_ctrl_get+0x48c>)
 80024f4:	7a9b      	ldrb	r3, [r3, #10]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002502:	e00b      	b.n	800251c <rx_ctrl_get+0x350>
				else get->T = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002504:	4b54      	ldr	r3, [pc, #336]	; (8002658 <rx_ctrl_get+0x48c>)
 8002506:	7a5b      	ldrb	r3, [r3, #9]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	4b52      	ldr	r3, [pc, #328]	; (8002658 <rx_ctrl_get+0x48c>)
 800250e:	7a9b      	ldrb	r3, [r3, #10]
 8002510:	b21b      	sxth	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				get->cmd = DATA;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2205      	movs	r2, #5
 8002520:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002524:	e36f      	b.n	8002c06 <rx_ctrl_get+0xa3a>
			}

			// Check for Encoder
			else if(rxbuf_get_ctrl[2] == 0x06){
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <rx_ctrl_get+0x48c>)
 8002528:	789b      	ldrb	r3, [r3, #2]
 800252a:	2b06      	cmp	r3, #6
 800252c:	d17c      	bne.n	8002628 <rx_ctrl_get+0x45c>

				if((rxbuf_get_ctrl[3] & 0x80)) get->S3 = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <rx_ctrl_get+0x48c>)
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	b25b      	sxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	da0c      	bge.n	8002552 <rx_ctrl_get+0x386>
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <rx_ctrl_get+0x48c>)
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	b21a      	sxth	r2, r3
 8002540:	4b45      	ldr	r3, [pc, #276]	; (8002658 <rx_ctrl_get+0x48c>)
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	b21b      	sxth	r3, r3
 8002546:	4313      	orrs	r3, r2
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 8002550:	e00b      	b.n	800256a <rx_ctrl_get+0x39e>
				else get->S3 = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <rx_ctrl_get+0x48c>)
 8002554:	78db      	ldrb	r3, [r3, #3]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	b21a      	sxth	r2, r3
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <rx_ctrl_get+0x48c>)
 800255c:	791b      	ldrb	r3, [r3, #4]
 800255e:	b21b      	sxth	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b21a      	sxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_ctrl[5] & 0x80)) get->S4 = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <rx_ctrl_get+0x48c>)
 800256c:	795b      	ldrb	r3, [r3, #5]
 800256e:	b25b      	sxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	da0c      	bge.n	800258e <rx_ctrl_get+0x3c2>
 8002574:	4b38      	ldr	r3, [pc, #224]	; (8002658 <rx_ctrl_get+0x48c>)
 8002576:	795b      	ldrb	r3, [r3, #5]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <rx_ctrl_get+0x48c>)
 800257e:	799b      	ldrb	r3, [r3, #6]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	b21a      	sxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 800258c:	e00b      	b.n	80025a6 <rx_ctrl_get+0x3da>
				else get->S4 = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 800258e:	4b32      	ldr	r3, [pc, #200]	; (8002658 <rx_ctrl_get+0x48c>)
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	b21a      	sxth	r2, r3
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <rx_ctrl_get+0x48c>)
 8002598:	799b      	ldrb	r3, [r3, #6]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	b21a      	sxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_ctrl[7] & 0x80)) get->V3 = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <rx_ctrl_get+0x48c>)
 80025a8:	79db      	ldrb	r3, [r3, #7]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da0c      	bge.n	80025ca <rx_ctrl_get+0x3fe>
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <rx_ctrl_get+0x48c>)
 80025b2:	79db      	ldrb	r3, [r3, #7]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <rx_ctrl_get+0x48c>)
 80025ba:	7a1b      	ldrb	r3, [r3, #8]
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 80025c8:	e00b      	b.n	80025e2 <rx_ctrl_get+0x416>
				else get->V3 = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <rx_ctrl_get+0x48c>)
 80025cc:	79db      	ldrb	r3, [r3, #7]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <rx_ctrl_get+0x48c>)
 80025d4:	7a1b      	ldrb	r3, [r3, #8]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b21a      	sxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

				if((rxbuf_get_ctrl[9] & 0x80)) get->V4 = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <rx_ctrl_get+0x48c>)
 80025e4:	7a5b      	ldrb	r3, [r3, #9]
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da0c      	bge.n	8002606 <rx_ctrl_get+0x43a>
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <rx_ctrl_get+0x48c>)
 80025ee:	7a5b      	ldrb	r3, [r3, #9]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <rx_ctrl_get+0x48c>)
 80025f6:	7a9b      	ldrb	r3, [r3, #10]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8002604:	e00b      	b.n	800261e <rx_ctrl_get+0x452>
				else get->V4 = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <rx_ctrl_get+0x48c>)
 8002608:	7a5b      	ldrb	r3, [r3, #9]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <rx_ctrl_get+0x48c>)
 8002610:	7a9b      	ldrb	r3, [r3, #10]
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21a      	sxth	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				get->cmd = DATA;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002626:	e2ee      	b.n	8002c06 <rx_ctrl_get+0xa3a>
			}

			// Check for Odometry
			else if(rxbuf_get_ctrl[2] == 0x15){
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <rx_ctrl_get+0x48c>)
 800262a:	789b      	ldrb	r3, [r3, #2]
 800262c:	2b15      	cmp	r3, #21
 800262e:	f040 80bc 	bne.w	80027aa <rx_ctrl_get+0x5de>
				if((rxbuf_get_ctrl[3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <rx_ctrl_get+0x48c>)
 8002634:	78db      	ldrb	r3, [r3, #3]
 8002636:	b25b      	sxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	da0f      	bge.n	800265c <rx_ctrl_get+0x490>
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <rx_ctrl_get+0x48c>)
 800263e:	78db      	ldrb	r3, [r3, #3]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <rx_ctrl_get+0x48c>)
 8002646:	791b      	ldrb	r3, [r3, #4]
 8002648:	b21b      	sxth	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b21a      	sxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 8002654:	e00e      	b.n	8002674 <rx_ctrl_get+0x4a8>
 8002656:	bf00      	nop
 8002658:	200000e4 	.word	0x200000e4
				else get->x_pos = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 800265c:	4b8b      	ldr	r3, [pc, #556]	; (800288c <rx_ctrl_get+0x6c0>)
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b21a      	sxth	r2, r3
 8002664:	4b89      	ldr	r3, [pc, #548]	; (800288c <rx_ctrl_get+0x6c0>)
 8002666:	791b      	ldrb	r3, [r3, #4]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	b21a      	sxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

				if((rxbuf_get_ctrl[5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002674:	4b85      	ldr	r3, [pc, #532]	; (800288c <rx_ctrl_get+0x6c0>)
 8002676:	795b      	ldrb	r3, [r3, #5]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	da0c      	bge.n	8002698 <rx_ctrl_get+0x4cc>
 800267e:	4b83      	ldr	r3, [pc, #524]	; (800288c <rx_ctrl_get+0x6c0>)
 8002680:	795b      	ldrb	r3, [r3, #5]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	b21a      	sxth	r2, r3
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <rx_ctrl_get+0x6c0>)
 8002688:	799b      	ldrb	r3, [r3, #6]
 800268a:	b21b      	sxth	r3, r3
 800268c:	4313      	orrs	r3, r2
 800268e:	b21a      	sxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 8002696:	e00b      	b.n	80026b0 <rx_ctrl_get+0x4e4>
				else get->y_pos = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 8002698:	4b7c      	ldr	r3, [pc, #496]	; (800288c <rx_ctrl_get+0x6c0>)
 800269a:	795b      	ldrb	r3, [r3, #5]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	4b7a      	ldr	r3, [pc, #488]	; (800288c <rx_ctrl_get+0x6c0>)
 80026a2:	799b      	ldrb	r3, [r3, #6]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

				if((rxbuf_get_ctrl[7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80026b0:	4b76      	ldr	r3, [pc, #472]	; (800288c <rx_ctrl_get+0x6c0>)
 80026b2:	79db      	ldrb	r3, [r3, #7]
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0c      	bge.n	80026d4 <rx_ctrl_get+0x508>
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <rx_ctrl_get+0x6c0>)
 80026bc:	79db      	ldrb	r3, [r3, #7]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <rx_ctrl_get+0x6c0>)
 80026c4:	7a1b      	ldrb	r3, [r3, #8]
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 80026d2:	e00b      	b.n	80026ec <rx_ctrl_get+0x520>
				else get->t_pos = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80026d4:	4b6d      	ldr	r3, [pc, #436]	; (800288c <rx_ctrl_get+0x6c0>)
 80026d6:	79db      	ldrb	r3, [r3, #7]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b6b      	ldr	r3, [pc, #428]	; (800288c <rx_ctrl_get+0x6c0>)
 80026de:	7a1b      	ldrb	r3, [r3, #8]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <rx_ctrl_get+0x6c0>)
 80026ee:	7a5b      	ldrb	r3, [r3, #9]
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da0c      	bge.n	8002710 <rx_ctrl_get+0x544>
 80026f6:	4b65      	ldr	r3, [pc, #404]	; (800288c <rx_ctrl_get+0x6c0>)
 80026f8:	7a5b      	ldrb	r3, [r3, #9]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <rx_ctrl_get+0x6c0>)
 8002700:	7a9b      	ldrb	r3, [r3, #10]
 8002702:	b21b      	sxth	r3, r3
 8002704:	4313      	orrs	r3, r2
 8002706:	b21a      	sxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 800270e:	e00b      	b.n	8002728 <rx_ctrl_get+0x55c>
				else get->x_vel = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <rx_ctrl_get+0x6c0>)
 8002712:	7a5b      	ldrb	r3, [r3, #9]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	4b5c      	ldr	r3, [pc, #368]	; (800288c <rx_ctrl_get+0x6c0>)
 800271a:	7a9b      	ldrb	r3, [r3, #10]
 800271c:	b21b      	sxth	r3, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	b21a      	sxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <rx_ctrl_get+0x6c0>)
 800272a:	7adb      	ldrb	r3, [r3, #11]
 800272c:	b25b      	sxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	da0c      	bge.n	800274c <rx_ctrl_get+0x580>
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <rx_ctrl_get+0x6c0>)
 8002734:	7adb      	ldrb	r3, [r3, #11]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	b21a      	sxth	r2, r3
 800273a:	4b54      	ldr	r3, [pc, #336]	; (800288c <rx_ctrl_get+0x6c0>)
 800273c:	7b1b      	ldrb	r3, [r3, #12]
 800273e:	b21b      	sxth	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 800274a:	e00b      	b.n	8002764 <rx_ctrl_get+0x598>
				else get->y_vel = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <rx_ctrl_get+0x6c0>)
 800274e:	7adb      	ldrb	r3, [r3, #11]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	4b4d      	ldr	r3, [pc, #308]	; (800288c <rx_ctrl_get+0x6c0>)
 8002756:	7b1b      	ldrb	r3, [r3, #12]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21a      	sxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8

				if((rxbuf_get_ctrl[13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 8002764:	4b49      	ldr	r3, [pc, #292]	; (800288c <rx_ctrl_get+0x6c0>)
 8002766:	7b5b      	ldrb	r3, [r3, #13]
 8002768:	b25b      	sxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	da0c      	bge.n	8002788 <rx_ctrl_get+0x5bc>
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <rx_ctrl_get+0x6c0>)
 8002770:	7b5b      	ldrb	r3, [r3, #13]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	b21a      	sxth	r2, r3
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <rx_ctrl_get+0x6c0>)
 8002778:	7b9b      	ldrb	r3, [r3, #14]
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b21a      	sxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 8002786:	e00b      	b.n	80027a0 <rx_ctrl_get+0x5d4>
				else get->t_vel = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <rx_ctrl_get+0x6c0>)
 800278a:	7b5b      	ldrb	r3, [r3, #13]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <rx_ctrl_get+0x6c0>)
 8002792:	7b9b      	ldrb	r3, [r3, #14]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b21a      	sxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa

				get->cmd = DATA;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2205      	movs	r2, #5
 80027a4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80027a8:	e22d      	b.n	8002c06 <rx_ctrl_get+0xa3a>

			}

			// Check for Data
			else if(rxbuf_get_ctrl[2] == 0x55){
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <rx_ctrl_get+0x6c0>)
 80027ac:	789b      	ldrb	r3, [r3, #2]
 80027ae:	2b55      	cmp	r3, #85	; 0x55
 80027b0:	f040 80d9 	bne.w	8002966 <rx_ctrl_get+0x79a>
				if((rxbuf_get_ctrl[3] & 0x80)) get->data1 = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <rx_ctrl_get+0x6c0>)
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da0c      	bge.n	80027d8 <rx_ctrl_get+0x60c>
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <rx_ctrl_get+0x6c0>)
 80027c0:	78db      	ldrb	r3, [r3, #3]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	b21a      	sxth	r2, r3
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <rx_ctrl_get+0x6c0>)
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 80027d6:	e00b      	b.n	80027f0 <rx_ctrl_get+0x624>
				else get->data1 = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <rx_ctrl_get+0x6c0>)
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <rx_ctrl_get+0x6c0>)
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				if((rxbuf_get_ctrl[5] & 0x80)) get->data2 = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <rx_ctrl_get+0x6c0>)
 80027f2:	795b      	ldrb	r3, [r3, #5]
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0c      	bge.n	8002814 <rx_ctrl_get+0x648>
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <rx_ctrl_get+0x6c0>)
 80027fc:	795b      	ldrb	r3, [r3, #5]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	b21a      	sxth	r2, r3
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <rx_ctrl_get+0x6c0>)
 8002804:	799b      	ldrb	r3, [r3, #6]
 8002806:	b21b      	sxth	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b21a      	sxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 8002812:	e00b      	b.n	800282c <rx_ctrl_get+0x660>
				else get->data2 = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <rx_ctrl_get+0x6c0>)
 8002816:	795b      	ldrb	r3, [r3, #5]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <rx_ctrl_get+0x6c0>)
 800281e:	799b      	ldrb	r3, [r3, #6]
 8002820:	b21b      	sxth	r3, r3
 8002822:	4313      	orrs	r3, r2
 8002824:	b21a      	sxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				if((rxbuf_get_ctrl[7] & 0x80)) get->data3 = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <rx_ctrl_get+0x6c0>)
 800282e:	79db      	ldrb	r3, [r3, #7]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	da0c      	bge.n	8002850 <rx_ctrl_get+0x684>
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <rx_ctrl_get+0x6c0>)
 8002838:	79db      	ldrb	r3, [r3, #7]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <rx_ctrl_get+0x6c0>)
 8002840:	7a1b      	ldrb	r3, [r3, #8]
 8002842:	b21b      	sxth	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	b21a      	sxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 800284e:	e00b      	b.n	8002868 <rx_ctrl_get+0x69c>
				else get->data3 = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <rx_ctrl_get+0x6c0>)
 8002852:	79db      	ldrb	r3, [r3, #7]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <rx_ctrl_get+0x6c0>)
 800285a:	7a1b      	ldrb	r3, [r3, #8]
 800285c:	b21b      	sxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b21a      	sxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				if((rxbuf_get_ctrl[9] & 0x80)) get->data4 = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <rx_ctrl_get+0x6c0>)
 800286a:	7a5b      	ldrb	r3, [r3, #9]
 800286c:	b25b      	sxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	da0e      	bge.n	8002890 <rx_ctrl_get+0x6c4>
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <rx_ctrl_get+0x6c0>)
 8002874:	7a5b      	ldrb	r3, [r3, #9]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <rx_ctrl_get+0x6c0>)
 800287c:	7a9b      	ldrb	r3, [r3, #10]
 800287e:	b21b      	sxth	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	b21a      	sxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
 800288a:	e00d      	b.n	80028a8 <rx_ctrl_get+0x6dc>
 800288c:	200000e4 	.word	0x200000e4
				else get->data4 = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002890:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002892:	7a5b      	ldrb	r3, [r3, #9]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	b21a      	sxth	r2, r3
 8002898:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800289a:	7a9b      	ldrb	r3, [r3, #10]
 800289c:	b21b      	sxth	r3, r3
 800289e:	4313      	orrs	r3, r2
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc

				if((rxbuf_get_ctrl[11] & 0x80)) get->data5 = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 80028a8:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028aa:	7adb      	ldrb	r3, [r3, #11]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da0c      	bge.n	80028cc <rx_ctrl_get+0x700>
 80028b2:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028b4:	7adb      	ldrb	r3, [r3, #11]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028bc:	7b1b      	ldrb	r3, [r3, #12]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
 80028ca:	e00b      	b.n	80028e4 <rx_ctrl_get+0x718>
				else get->data5 = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028ce:	7adb      	ldrb	r3, [r3, #11]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028d6:	7b1b      	ldrb	r3, [r3, #12]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b21a      	sxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce

				if((rxbuf_get_ctrl[13] & 0x80)) get->data6 = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 80028e4:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028e6:	7b5b      	ldrb	r3, [r3, #13]
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da0c      	bge.n	8002908 <rx_ctrl_get+0x73c>
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028f0:	7b5b      	ldrb	r3, [r3, #13]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b21a      	sxth	r2, r3
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80028f8:	7b9b      	ldrb	r3, [r3, #14]
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b21a      	sxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 8002906:	e00b      	b.n	8002920 <rx_ctrl_get+0x754>
				else get->data6 = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800290a:	7b5b      	ldrb	r3, [r3, #13]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002912:	7b9b      	ldrb	r3, [r3, #14]
 8002914:	b21b      	sxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b21a      	sxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0

				if((rxbuf_get_ctrl[15] & 0x80)) get->data7 = ((rxbuf_get_ctrl[15] << 8) | rxbuf_get_ctrl[16])-(65536);
 8002920:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002922:	7bdb      	ldrb	r3, [r3, #15]
 8002924:	b25b      	sxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	da0c      	bge.n	8002944 <rx_ctrl_get+0x778>
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800292c:	7bdb      	ldrb	r3, [r3, #15]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	b21a      	sxth	r2, r3
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002934:	7c1b      	ldrb	r3, [r3, #16]
 8002936:	b21b      	sxth	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	b21a      	sxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
 8002942:	e00b      	b.n	800295c <rx_ctrl_get+0x790>
				else get->data7 = (rxbuf_get_ctrl[15] << 8) | rxbuf_get_ctrl[16];
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002946:	7bdb      	ldrb	r3, [r3, #15]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800294e:	7c1b      	ldrb	r3, [r3, #16]
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b21a      	sxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2

				get->cmd = DATA;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2205      	movs	r2, #5
 8002960:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002964:	e14f      	b.n	8002c06 <rx_ctrl_get+0xa3a>
			}



			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x12){
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002968:	789b      	ldrb	r3, [r3, #2]
 800296a:	2b12      	cmp	r3, #18
 800296c:	d170      	bne.n	8002a50 <rx_ctrl_get+0x884>

				get->id_data = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4] ;
 800296e:	4b45      	ldr	r3, [pc, #276]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b21a      	sxth	r2, r3
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002978:	791b      	ldrb	r3, [r3, #4]
 800297a:	b21b      	sxth	r3, r3
 800297c:	4313      	orrs	r3, r2
 800297e:	b21b      	sxth	r3, r3
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_ctrl[5] & 0x80)) get->x_data = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800298a:	795b      	ldrb	r3, [r3, #5]
 800298c:	b25b      	sxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	da0c      	bge.n	80029ac <rx_ctrl_get+0x7e0>
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002994:	795b      	ldrb	r3, [r3, #5]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <rx_ctrl_get+0x8b8>)
 800299c:	799b      	ldrb	r3, [r3, #6]
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 80029aa:	e00b      	b.n	80029c4 <rx_ctrl_get+0x7f8>
				else get->x_data = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80029ac:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029ae:	795b      	ldrb	r3, [r3, #5]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029b6:	799b      	ldrb	r3, [r3, #6]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21a      	sxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_ctrl[7] & 0x80)) get->y_data = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029c6:	79db      	ldrb	r3, [r3, #7]
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da0c      	bge.n	80029e8 <rx_ctrl_get+0x81c>
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029d0:	79db      	ldrb	r3, [r3, #7]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	b21a      	sxth	r2, r3
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029d8:	7a1b      	ldrb	r3, [r3, #8]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b21a      	sxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 80029e6:	e00b      	b.n	8002a00 <rx_ctrl_get+0x834>
				else get->y_data = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029ea:	79db      	ldrb	r3, [r3, #7]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <rx_ctrl_get+0x8b8>)
 80029f2:	7a1b      	ldrb	r3, [r3, #8]
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_ctrl[9] & 0x80)) get->t_data = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a02:	7a5b      	ldrb	r3, [r3, #9]
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0c      	bge.n	8002a24 <rx_ctrl_get+0x858>
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a0c:	7a5b      	ldrb	r3, [r3, #9]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a14:	7a9b      	ldrb	r3, [r3, #10]
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8002a22:	e00b      	b.n	8002a3c <rx_ctrl_get+0x870>
				else get->t_data = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a26:	7a5b      	ldrb	r3, [r3, #9]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a2e:	7a9b      	ldrb	r3, [r3, #10]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				get->aktuator = rxbuf_get_ctrl[11] ;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a3e:	7ada      	ldrb	r2, [r3, #11]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e

				get->cmd = MOVE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002a4e:	e0da      	b.n	8002c06 <rx_ctrl_get+0xa3a>

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x13){
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a52:	789b      	ldrb	r3, [r3, #2]
 8002a54:	2b13      	cmp	r3, #19
 8002a56:	f040 80d6 	bne.w	8002c06 <rx_ctrl_get+0xa3a>
				uint8_t chk = checksum_ctrl_generator(rxbuf_get_ctrl,18);
 8002a5a:	2112      	movs	r1, #18
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a5e:	f7ff fabb 	bl	8001fd8 <checksum_ctrl_generator>
 8002a62:	4603      	mov	r3, r0
 8002a64:	72fb      	strb	r3, [r7, #11]
				if(chk == rxbuf_get_ctrl[18]){
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a68:	7c9b      	ldrb	r3, [r3, #18]
 8002a6a:	7afa      	ldrb	r2, [r7, #11]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f040 80ca 	bne.w	8002c06 <rx_ctrl_get+0xa3a>
				// Menghapus sisa koordinat
				for (int i = (rxbuf_get_ctrl[4]*5); i < 100-(rxbuf_get_ctrl[4]*5); i++) {
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <rx_ctrl_get+0x8b8>)
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e010      	b.n	8002aa4 <rx_ctrl_get+0x8d8>
 8002a82:	bf00      	nop
 8002a84:	200000e4 	.word	0x200000e4
					get->astar_coordinate_x[i] = 0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[i] = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	3264      	adds	r2, #100	; 0x64
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (int i = (rxbuf_get_ctrl[4]*5); i < 100-(rxbuf_get_ctrl[4]*5); i++) {
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	079b      	lsls	r3, r3, #30
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	3363      	adds	r3, #99	; 0x63
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dde5      	ble.n	8002a88 <rx_ctrl_get+0x8bc>
				}
				get->astar_id = (rxbuf_get_ctrl[3]);
 8002abc:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002abe:	78da      	ldrb	r2, [r3, #3]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				get->astar_length = (rxbuf_get_ctrl[4]);
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002ac8:	791a      	ldrb	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[5]);
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002ad2:	7959      	ldrb	r1, [r3, #5]
 8002ad4:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002ad6:	78db      	ldrb	r3, [r3, #3]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	b209      	sxth	r1, r1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[6]);
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002aea:	7999      	ldrb	r1, [r3, #6]
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	b209      	sxth	r1, r1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3264      	adds	r2, #100	; 0x64
 8002afe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[7]);
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b04:	79d9      	ldrb	r1, [r3, #7]
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	b209      	sxth	r1, r1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[8]);
 8002b1c:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b1e:	7a19      	ldrb	r1, [r3, #8]
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	b209      	sxth	r1, r1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3264      	adds	r2, #100	; 0x64
 8002b34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[9]);
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b3a:	7a59      	ldrb	r1, [r3, #9]
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	1c9a      	adds	r2, r3, #2
 8002b4a:	b209      	sxth	r1, r1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[10]);
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b54:	7a99      	ldrb	r1, [r3, #10]
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	b209      	sxth	r1, r1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3264      	adds	r2, #100	; 0x64
 8002b6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[11]);
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b70:	7ad9      	ldrb	r1, [r3, #11]
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b74:	78db      	ldrb	r3, [r3, #3]
 8002b76:	461a      	mov	r2, r3
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	1cda      	adds	r2, r3, #3
 8002b80:	b209      	sxth	r1, r1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[12]);
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b8a:	7b19      	ldrb	r1, [r3, #12]
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	1cda      	adds	r2, r3, #3
 8002b9a:	b209      	sxth	r1, r1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3264      	adds	r2, #100	; 0x64
 8002ba0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[13]);
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002ba6:	7b59      	ldrb	r1, [r3, #13]
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002baa:	78db      	ldrb	r3, [r3, #3]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	1d1a      	adds	r2, r3, #4
 8002bb6:	b209      	sxth	r1, r1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[14]);
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002bc0:	7b99      	ldrb	r1, [r3, #14]
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002bc4:	78db      	ldrb	r3, [r3, #3]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	b209      	sxth	r1, r1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3264      	adds	r2, #100	; 0x64
 8002bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_total_length = (rxbuf_get_ctrl[15] << 8) | rxbuf_get_ctrl[16];
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002bdc:	7bdb      	ldrb	r3, [r3, #15]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002be4:	7c1b      	ldrb	r3, [r3, #16]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
				get->astar_msg_id = rxbuf_get_ctrl[17];
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002bf6:	7c5a      	ldrb	r2, [r3, #17]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
				get->cmd = MOVE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
				}

			}

		}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 19);
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <rx_ctrl_get+0xa54>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2213      	movs	r2, #19
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <rx_ctrl_get+0xa50>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 f825 	bl	8007c5e <HAL_UART_Receive_DMA>
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200000e4 	.word	0x200000e4
 8002c20:	200000e0 	.word	0x200000e0

08002c24 <komunikasi_pc_init>:
//**************************************************** COMMUNICATION TO JETSON NANO *******************************************//

void komunikasi_pc_init(UART_HandleTypeDef* uart_handler){
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	huart_pc = uart_handler;
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <komunikasi_pc_init+0x1c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200000c8 	.word	0x200000c8

08002c44 <checksum_pc_generator>:

uint8_t checksum_pc_generator(uint8_t* arr, uint8_t size){
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8002c54:	2300      	movs	r3, #0
 8002c56:	73bb      	strb	r3, [r7, #14]
 8002c58:	e009      	b.n	8002c6e <checksum_pc_generator+0x2a>
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4413      	add	r3, r2
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73bb      	strb	r3, [r7, #14]
 8002c6e:	7bba      	ldrb	r2, [r7, #14]
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3f1      	bcc.n	8002c5a <checksum_pc_generator+0x16>
	return (chksm & 0xFF);
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <tx_pc_send_BNO055>:
	if(HAL_UART_Transmit(huart_pc, ping, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

//---------------------------------------------------- Send Roll Pitch & Yaw from BNO08X Sensor -------------------------------------------------------------------------//
bool tx_pc_send_BNO055(BNO055_Typedef BNO055){
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	463c      	mov	r4, r7
 8002c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t BNO[] = {0xA5, 0x5A, 0x02, ((BNO055.yaw >> 8) & 0XFF), ((BNO055.yaw) & 0XFF), ((BNO055.pitch >> 8) & 0XFF), ((BNO055.pitch) & 0XFF), ((BNO055.roll >> 8) & 0XFF), ((BNO055.roll) & 0XFF), ((BNO055.x_acceleration >> 8) & 0XFF), ((BNO055.x_acceleration) & 0XFF), ((BNO055.y_acceleration >> 8) & 0XFF), ((BNO055.y_acceleration) & 0XFF), ((BNO055.z_acceleration >> 8) & 0XFF), ((BNO055.z_acceleration) & 0XFF), ((BNO055.temperature >> 8) & 0XFF), ((BNO055.temperature) & 0XFF), 0x00, 0x00};
 8002c90:	23a5      	movs	r3, #165	; 0xa5
 8002c92:	753b      	strb	r3, [r7, #20]
 8002c94:	235a      	movs	r3, #90	; 0x5a
 8002c96:	757b      	strb	r3, [r7, #21]
 8002c98:	2302      	movs	r3, #2
 8002c9a:	75bb      	strb	r3, [r7, #22]
 8002c9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ca0:	121b      	asrs	r3, r3, #8
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	75fb      	strb	r3, [r7, #23]
 8002ca8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	763b      	strb	r3, [r7, #24]
 8002cb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cb4:	121b      	asrs	r3, r3, #8
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	767b      	strb	r3, [r7, #25]
 8002cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	76bb      	strb	r3, [r7, #26]
 8002cc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cc8:	121b      	asrs	r3, r3, #8
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	76fb      	strb	r3, [r7, #27]
 8002cd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	773b      	strb	r3, [r7, #28]
 8002cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cdc:	121b      	asrs	r3, r3, #8
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	777b      	strb	r3, [r7, #29]
 8002ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	77bb      	strb	r3, [r7, #30]
 8002cec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cf0:	121b      	asrs	r3, r3, #8
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f887 3020 	strb.w	r3, [r7, #32]
 8002d02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d06:	121b      	asrs	r3, r3, #8
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002d10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d1e:	121b      	asrs	r3, r3, #8
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	BNO[18] = checksum_pc_generator(BNO, 19);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	2113      	movs	r1, #19
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff7d 	bl	8002c44 <checksum_pc_generator>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if(HAL_UART_Transmit(huart_pc, BNO, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <tx_pc_send_BNO055+0xf0>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	f107 0114 	add.w	r1, r7, #20
 8002d58:	2364      	movs	r3, #100	; 0x64
 8002d5a:	2213      	movs	r2, #19
 8002d5c:	f004 fef4 	bl	8007b48 <HAL_UART_Transmit>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <tx_pc_send_BNO055+0xe6>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <tx_pc_send_BNO055+0xe8>
	else return false;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	372c      	adds	r7, #44	; 0x2c
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	200000c8 	.word	0x200000c8

08002d78 <tx_pc_send_Odometry>:
	encoder_data[18] = checksum_pc_generator(encoder_data, 19);

	if(HAL_UART_Transmit(huart_pc, encoder_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}
bool tx_pc_send_Odometry(int16_t Sx, int16_t Sy, int16_t St, int16_t Vx, int16_t Vy, int16_t Vt){
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4623      	mov	r3, r4
 8002d88:	80fb      	strh	r3, [r7, #6]
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80bb      	strh	r3, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	807b      	strh	r3, [r7, #2]
 8002d92:	4613      	mov	r3, r2
 8002d94:	803b      	strh	r3, [r7, #0]
	uint8_t odometry[] = {0xA5, 0x5A, 0x15, ((Sx >> 8) & 0XFF), ((Sx) & 0XFF), ((Sy >> 8) & 0XFF), ((Sy) & 0XFF), ((St >> 8) & 0XFF), ((St) & 0XFF), ((Vx >> 8) & 0XFF), ((Vx) & 0XFF), ((Vy >> 8) & 0XFF), ((Vy) & 0XFF), ((Vt >> 8) & 0XFF), ((Vt) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 8002d96:	23a5      	movs	r3, #165	; 0xa5
 8002d98:	733b      	strb	r3, [r7, #12]
 8002d9a:	235a      	movs	r3, #90	; 0x5a
 8002d9c:	737b      	strb	r3, [r7, #13]
 8002d9e:	2315      	movs	r3, #21
 8002da0:	73bb      	strb	r3, [r7, #14]
 8002da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da6:	121b      	asrs	r3, r3, #8
 8002da8:	b21b      	sxth	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	743b      	strb	r3, [r7, #16]
 8002db4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002db8:	121b      	asrs	r3, r3, #8
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	747b      	strb	r3, [r7, #17]
 8002dc0:	88bb      	ldrh	r3, [r7, #4]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	74bb      	strb	r3, [r7, #18]
 8002dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dca:	121b      	asrs	r3, r3, #8
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	74fb      	strb	r3, [r7, #19]
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	753b      	strb	r3, [r7, #20]
 8002dd8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ddc:	121b      	asrs	r3, r3, #8
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	757b      	strb	r3, [r7, #21]
 8002de4:	883b      	ldrh	r3, [r7, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	75bb      	strb	r3, [r7, #22]
 8002dea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002dee:	121b      	asrs	r3, r3, #8
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	75fb      	strb	r3, [r7, #23]
 8002df6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	763b      	strb	r3, [r7, #24]
 8002dfc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002e00:	121b      	asrs	r3, r3, #8
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	767b      	strb	r3, [r7, #25]
 8002e08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	76bb      	strb	r3, [r7, #26]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	76fb      	strb	r3, [r7, #27]
 8002e12:	2300      	movs	r3, #0
 8002e14:	773b      	strb	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	777b      	strb	r3, [r7, #29]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77bb      	strb	r3, [r7, #30]
	odometry[18] = checksum_pc_generator(odometry, 19);
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	2113      	movs	r1, #19
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff0d 	bl	8002c44 <checksum_pc_generator>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	77bb      	strb	r3, [r7, #30]

	if(HAL_UART_Transmit(huart_pc, odometry, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <tx_pc_send_Odometry+0xdc>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f107 010c 	add.w	r1, r7, #12
 8002e36:	2364      	movs	r3, #100	; 0x64
 8002e38:	2213      	movs	r2, #19
 8002e3a:	f004 fe85 	bl	8007b48 <HAL_UART_Transmit>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <tx_pc_send_Odometry+0xd0>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <tx_pc_send_Odometry+0xd2>
	else return false;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200000c8 	.word	0x200000c8

08002e58 <rx_pc_start_get>:

	if(HAL_UART_Transmit(huart_pc, encoder_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

void rx_pc_start_get(void){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_pc,rxbuf_get_pc, 19);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <rx_pc_start_get+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2213      	movs	r2, #19
 8002e62:	4904      	ldr	r1, [pc, #16]	; (8002e74 <rx_pc_start_get+0x1c>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fefa 	bl	8007c5e <HAL_UART_Receive_DMA>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200000c8 	.word	0x200000c8
 8002e74:	200000cc 	.word	0x200000cc

08002e78 <rx_pc_get>:

void rx_pc_get(com_pc_get_t* get){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 19; i++){
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	f000 bdae 	b.w	80039e4 <rx_pc_get+0xb6c>
		if((rxbuf_get_pc[i] == 0xA5) && (rxbuf_get_pc[i+1] == 0x5A)){
 8002e88:	4a98      	ldr	r2, [pc, #608]	; (80030ec <rx_pc_get+0x274>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2ba5      	cmp	r3, #165	; 0xa5
 8002e92:	f040 85a4 	bne.w	80039de <rx_pc_get+0xb66>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a94      	ldr	r2, [pc, #592]	; (80030ec <rx_pc_get+0x274>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	2b5a      	cmp	r3, #90	; 0x5a
 8002ea0:	f040 859d 	bne.w	80039de <rx_pc_get+0xb66>

			// Check for ping
			if(rxbuf_get_pc[2] == 0x01){
 8002ea4:	4b91      	ldr	r3, [pc, #580]	; (80030ec <rx_pc_get+0x274>)
 8002ea6:	789b      	ldrb	r3, [r3, #2]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d103      	bne.n	8002eb4 <rx_pc_get+0x3c>
				get->cmd = PING;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
			}

			// Check for Task Done
			if(rxbuf_get_pc[2] == 0x03){
 8002eb4:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <rx_pc_get+0x274>)
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d14b      	bne.n	8002f54 <rx_pc_get+0xdc>
				if((rxbuf_get_ctrl[3] & 0x80)) get->step = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <rx_pc_get+0x278>)
 8002ebe:	78db      	ldrb	r3, [r3, #3]
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da0c      	bge.n	8002ee0 <rx_pc_get+0x68>
 8002ec6:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <rx_pc_get+0x278>)
 8002ec8:	78db      	ldrb	r3, [r3, #3]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <rx_pc_get+0x278>)
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	b21a      	sxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
 8002ede:	e00b      	b.n	8002ef8 <rx_pc_get+0x80>
				else get->step = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8002ee0:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <rx_pc_get+0x278>)
 8002ee2:	78db      	ldrb	r3, [r3, #3]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <rx_pc_get+0x278>)
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b21a      	sxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6

					for(int i = 0; i <= id_holder; i++){
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e01b      	b.n	8002f36 <rx_pc_get+0xbe>
						for(int j = 0; j < 19;j++){
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e012      	b.n	8002f2a <rx_pc_get+0xb2>
							rx_buf_holder[(i*19)+j] = 0;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	441a      	add	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <rx_pc_get+0x27c>)
 8002f16:	2100      	movs	r1, #0
 8002f18:	54d1      	strb	r1, [r2, r3]
							rx_buf_command[j] = 0;
 8002f1a:	4a77      	ldr	r2, [pc, #476]	; (80030f8 <rx_pc_get+0x280>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	4413      	add	r3, r2
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 19;j++){
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	dde9      	ble.n	8002f04 <rx_pc_get+0x8c>
					for(int i = 0; i <= id_holder; i++){
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <rx_pc_get+0x284>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	dddd      	ble.n	8002efe <rx_pc_get+0x86>
							}
					}
					id_holder = 0;
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <rx_pc_get+0x284>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]

				get->cmd = DATA;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002f50:	f000 bd45 	b.w	80039de <rx_pc_get+0xb66>
			}

			// Check for Kinematic
			else if(rxbuf_get_pc[i+2] == 0x05){
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3302      	adds	r3, #2
 8002f58:	4a64      	ldr	r2, [pc, #400]	; (80030ec <rx_pc_get+0x274>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	f040 80a6 	bne.w	80030ae <rx_pc_get+0x236>

				if((rxbuf_get_pc[i+3] & 0x80)) get->Sx = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3303      	adds	r3, #3
 8002f66:	4a61      	ldr	r2, [pc, #388]	; (80030ec <rx_pc_get+0x274>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da10      	bge.n	8002f92 <rx_pc_get+0x11a>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3303      	adds	r3, #3
 8002f74:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <rx_pc_get+0x274>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	495a      	ldr	r1, [pc, #360]	; (80030ec <rx_pc_get+0x274>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 8002f90:	e00f      	b.n	8002fb2 <rx_pc_get+0x13a>
				else get->Sx = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3303      	adds	r3, #3
 8002f96:	4a55      	ldr	r2, [pc, #340]	; (80030ec <rx_pc_get+0x274>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4952      	ldr	r1, [pc, #328]	; (80030ec <rx_pc_get+0x274>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				if((rxbuf_get_pc[i+5] & 0x80)) get->Sy = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <rx_pc_get+0x274>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da10      	bge.n	8002fe2 <rx_pc_get+0x16a>
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3305      	adds	r3, #5
 8002fc4:	4a49      	ldr	r2, [pc, #292]	; (80030ec <rx_pc_get+0x274>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3306      	adds	r3, #6
 8002fd0:	4946      	ldr	r1, [pc, #280]	; (80030ec <rx_pc_get+0x274>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b21a      	sxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 8002fe0:	e00f      	b.n	8003002 <rx_pc_get+0x18a>
				else get->Sy = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3305      	adds	r3, #5
 8002fe6:	4a41      	ldr	r2, [pc, #260]	; (80030ec <rx_pc_get+0x274>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	b21a      	sxth	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3306      	adds	r3, #6
 8002ff2:	493e      	ldr	r1, [pc, #248]	; (80030ec <rx_pc_get+0x274>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b21a      	sxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_pc[i+7] & 0x80)) get->St = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3307      	adds	r3, #7
 8003006:	4a39      	ldr	r2, [pc, #228]	; (80030ec <rx_pc_get+0x274>)
 8003008:	5cd3      	ldrb	r3, [r2, r3]
 800300a:	b25b      	sxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	da10      	bge.n	8003032 <rx_pc_get+0x1ba>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3307      	adds	r3, #7
 8003014:	4a35      	ldr	r2, [pc, #212]	; (80030ec <rx_pc_get+0x274>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	b21a      	sxth	r2, r3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3308      	adds	r3, #8
 8003020:	4932      	ldr	r1, [pc, #200]	; (80030ec <rx_pc_get+0x274>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	b21b      	sxth	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	b21a      	sxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 8003030:	e00f      	b.n	8003052 <rx_pc_get+0x1da>
				else get->St = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3307      	adds	r3, #7
 8003036:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <rx_pc_get+0x274>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	b21a      	sxth	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3308      	adds	r3, #8
 8003042:	492a      	ldr	r1, [pc, #168]	; (80030ec <rx_pc_get+0x274>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	b21b      	sxth	r3, r3
 8003048:	4313      	orrs	r3, r2
 800304a:	b21a      	sxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				if((rxbuf_get_pc[i+9] & 0x80)) get->T = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3309      	adds	r3, #9
 8003056:	4a25      	ldr	r2, [pc, #148]	; (80030ec <rx_pc_get+0x274>)
 8003058:	5cd3      	ldrb	r3, [r2, r3]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	da10      	bge.n	8003082 <rx_pc_get+0x20a>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3309      	adds	r3, #9
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <rx_pc_get+0x274>)
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	b21a      	sxth	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	330a      	adds	r3, #10
 8003070:	491e      	ldr	r1, [pc, #120]	; (80030ec <rx_pc_get+0x274>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	b21b      	sxth	r3, r3
 8003076:	4313      	orrs	r3, r2
 8003078:	b21a      	sxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8003080:	e00f      	b.n	80030a2 <rx_pc_get+0x22a>
				else get->T = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3309      	adds	r3, #9
 8003086:	4a19      	ldr	r2, [pc, #100]	; (80030ec <rx_pc_get+0x274>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	b21a      	sxth	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	330a      	adds	r3, #10
 8003092:	4916      	ldr	r1, [pc, #88]	; (80030ec <rx_pc_get+0x274>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	b21b      	sxth	r3, r3
 8003098:	4313      	orrs	r3, r2
 800309a:	b21a      	sxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				get->cmd = DATA;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2205      	movs	r2, #5
 80030a6:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80030aa:	f000 bc98 	b.w	80039de <rx_pc_get+0xb66>

			}

			// Check for Encoder
			else if(rxbuf_get_pc[i+2] == 0x06){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3302      	adds	r3, #2
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <rx_pc_get+0x274>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	f040 80af 	bne.w	800321a <rx_pc_get+0x3a2>

				if((rxbuf_get_pc[i+3] & 0x80)) get->S3 = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3303      	adds	r3, #3
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <rx_pc_get+0x274>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da1a      	bge.n	8003100 <rx_pc_get+0x288>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3303      	adds	r3, #3
 80030ce:	4a07      	ldr	r2, [pc, #28]	; (80030ec <rx_pc_get+0x274>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	b21a      	sxth	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	4904      	ldr	r1, [pc, #16]	; (80030ec <rx_pc_get+0x274>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	b21b      	sxth	r3, r3
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 80030ea:	e019      	b.n	8003120 <rx_pc_get+0x2a8>
 80030ec:	200000cc 	.word	0x200000cc
 80030f0:	200000e4 	.word	0x200000e4
 80030f4:	2000010c 	.word	0x2000010c
 80030f8:	200000f8 	.word	0x200000f8
 80030fc:	20000238 	.word	0x20000238
				else get->S3 = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3303      	adds	r3, #3
 8003104:	4a90      	ldr	r2, [pc, #576]	; (8003348 <rx_pc_get+0x4d0>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	b21a      	sxth	r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3304      	adds	r3, #4
 8003110:	498d      	ldr	r1, [pc, #564]	; (8003348 <rx_pc_get+0x4d0>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	b21b      	sxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b21a      	sxth	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_pc[i+5] & 0x80)) get->S4 = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3305      	adds	r3, #5
 8003124:	4a88      	ldr	r2, [pc, #544]	; (8003348 <rx_pc_get+0x4d0>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	b25b      	sxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	da10      	bge.n	8003150 <rx_pc_get+0x2d8>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3305      	adds	r3, #5
 8003132:	4a85      	ldr	r2, [pc, #532]	; (8003348 <rx_pc_get+0x4d0>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	b21a      	sxth	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3306      	adds	r3, #6
 800313e:	4982      	ldr	r1, [pc, #520]	; (8003348 <rx_pc_get+0x4d0>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	b21b      	sxth	r3, r3
 8003144:	4313      	orrs	r3, r2
 8003146:	b21a      	sxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 800314e:	e00f      	b.n	8003170 <rx_pc_get+0x2f8>
				else get->S4 = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3305      	adds	r3, #5
 8003154:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <rx_pc_get+0x4d0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b21a      	sxth	r2, r3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3306      	adds	r3, #6
 8003160:	4979      	ldr	r1, [pc, #484]	; (8003348 <rx_pc_get+0x4d0>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	b21b      	sxth	r3, r3
 8003166:	4313      	orrs	r3, r2
 8003168:	b21a      	sxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_pc[i+7] & 0x80)) get->V3 = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3307      	adds	r3, #7
 8003174:	4a74      	ldr	r2, [pc, #464]	; (8003348 <rx_pc_get+0x4d0>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	b25b      	sxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	da10      	bge.n	80031a0 <rx_pc_get+0x328>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3307      	adds	r3, #7
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <rx_pc_get+0x4d0>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	b21a      	sxth	r2, r3
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3308      	adds	r3, #8
 800318e:	496e      	ldr	r1, [pc, #440]	; (8003348 <rx_pc_get+0x4d0>)
 8003190:	5ccb      	ldrb	r3, [r1, r3]
 8003192:	b21b      	sxth	r3, r3
 8003194:	4313      	orrs	r3, r2
 8003196:	b21a      	sxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 800319e:	e00f      	b.n	80031c0 <rx_pc_get+0x348>
				else get->V3 = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3307      	adds	r3, #7
 80031a4:	4a68      	ldr	r2, [pc, #416]	; (8003348 <rx_pc_get+0x4d0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	b21a      	sxth	r2, r3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	3308      	adds	r3, #8
 80031b0:	4965      	ldr	r1, [pc, #404]	; (8003348 <rx_pc_get+0x4d0>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b21a      	sxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

				if((rxbuf_get_pc[i+9] & 0x80)) get->V4 = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	3309      	adds	r3, #9
 80031c4:	4a60      	ldr	r2, [pc, #384]	; (8003348 <rx_pc_get+0x4d0>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da10      	bge.n	80031f0 <rx_pc_get+0x378>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3309      	adds	r3, #9
 80031d2:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <rx_pc_get+0x4d0>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	b21a      	sxth	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	330a      	adds	r3, #10
 80031de:	495a      	ldr	r1, [pc, #360]	; (8003348 <rx_pc_get+0x4d0>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b21a      	sxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 80031ee:	e00f      	b.n	8003210 <rx_pc_get+0x398>
				else get->V4 = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3309      	adds	r3, #9
 80031f4:	4a54      	ldr	r2, [pc, #336]	; (8003348 <rx_pc_get+0x4d0>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	330a      	adds	r3, #10
 8003200:	4951      	ldr	r1, [pc, #324]	; (8003348 <rx_pc_get+0x4d0>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	b21b      	sxth	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	b21a      	sxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				get->cmd = DATA;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2205      	movs	r2, #5
 8003214:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003218:	e3e1      	b.n	80039de <rx_pc_get+0xb66>
			}

			// Check for Data Odometry
			else if(rxbuf_get_pc[i+2] == 0x15){
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3302      	adds	r3, #2
 800321e:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <rx_pc_get+0x4d0>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	2b15      	cmp	r3, #21
 8003224:	f040 80f7 	bne.w	8003416 <rx_pc_get+0x59e>

				if((rxbuf_get_pc[i+3] & 0x80)) get->x_pos = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3303      	adds	r3, #3
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <rx_pc_get+0x4d0>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	b25b      	sxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	da10      	bge.n	8003258 <rx_pc_get+0x3e0>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3303      	adds	r3, #3
 800323a:	4a43      	ldr	r2, [pc, #268]	; (8003348 <rx_pc_get+0x4d0>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	b21a      	sxth	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	4940      	ldr	r1, [pc, #256]	; (8003348 <rx_pc_get+0x4d0>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	b21b      	sxth	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b21a      	sxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 8003256:	e00f      	b.n	8003278 <rx_pc_get+0x400>
				else get->x_pos = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	3303      	adds	r3, #3
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <rx_pc_get+0x4d0>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	b21a      	sxth	r2, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3304      	adds	r3, #4
 8003268:	4937      	ldr	r1, [pc, #220]	; (8003348 <rx_pc_get+0x4d0>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	b21b      	sxth	r3, r3
 800326e:	4313      	orrs	r3, r2
 8003270:	b21a      	sxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

				if((rxbuf_get_pc[i+5] & 0x80)) get->y_pos = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3305      	adds	r3, #5
 800327c:	4a32      	ldr	r2, [pc, #200]	; (8003348 <rx_pc_get+0x4d0>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	b25b      	sxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	da10      	bge.n	80032a8 <rx_pc_get+0x430>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3305      	adds	r3, #5
 800328a:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <rx_pc_get+0x4d0>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b21a      	sxth	r2, r3
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3306      	adds	r3, #6
 8003296:	492c      	ldr	r1, [pc, #176]	; (8003348 <rx_pc_get+0x4d0>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21a      	sxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 80032a6:	e00f      	b.n	80032c8 <rx_pc_get+0x450>
				else get->y_pos = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3305      	adds	r3, #5
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <rx_pc_get+0x4d0>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	3306      	adds	r3, #6
 80032b8:	4923      	ldr	r1, [pc, #140]	; (8003348 <rx_pc_get+0x4d0>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21a      	sxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

				if((rxbuf_get_pc[i+7] & 0x80)) get->t_pos = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3307      	adds	r3, #7
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <rx_pc_get+0x4d0>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da10      	bge.n	80032f8 <rx_pc_get+0x480>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3307      	adds	r3, #7
 80032da:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <rx_pc_get+0x4d0>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	b21a      	sxth	r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3308      	adds	r3, #8
 80032e6:	4918      	ldr	r1, [pc, #96]	; (8003348 <rx_pc_get+0x4d0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 80032f6:	e00f      	b.n	8003318 <rx_pc_get+0x4a0>
				else get->t_pos = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3307      	adds	r3, #7
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <rx_pc_get+0x4d0>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21a      	sxth	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3308      	adds	r3, #8
 8003308:	490f      	ldr	r1, [pc, #60]	; (8003348 <rx_pc_get+0x4d0>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	b21b      	sxth	r3, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	b21a      	sxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_pc[i+9] & 0x80)) get->x_vel = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3309      	adds	r3, #9
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <rx_pc_get+0x4d0>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	b25b      	sxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	da12      	bge.n	800334c <rx_pc_get+0x4d4>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3309      	adds	r3, #9
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <rx_pc_get+0x4d0>)
 800332c:	5cd3      	ldrb	r3, [r2, r3]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	330a      	adds	r3, #10
 8003336:	4904      	ldr	r1, [pc, #16]	; (8003348 <rx_pc_get+0x4d0>)
 8003338:	5ccb      	ldrb	r3, [r1, r3]
 800333a:	b21b      	sxth	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b21a      	sxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 8003346:	e011      	b.n	800336c <rx_pc_get+0x4f4>
 8003348:	200000cc 	.word	0x200000cc
				else get->x_vel = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3309      	adds	r3, #9
 8003350:	4a90      	ldr	r2, [pc, #576]	; (8003594 <rx_pc_get+0x71c>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	b21a      	sxth	r2, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	330a      	adds	r3, #10
 800335c:	498d      	ldr	r1, [pc, #564]	; (8003594 <rx_pc_get+0x71c>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	b21b      	sxth	r3, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	b21a      	sxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_pc[i+11] & 0x80)) get->y_vel = ((rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12])-(65536);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	330b      	adds	r3, #11
 8003370:	4a88      	ldr	r2, [pc, #544]	; (8003594 <rx_pc_get+0x71c>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	b25b      	sxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	da10      	bge.n	800339c <rx_pc_get+0x524>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	330b      	adds	r3, #11
 800337e:	4a85      	ldr	r2, [pc, #532]	; (8003594 <rx_pc_get+0x71c>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	b21a      	sxth	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	330c      	adds	r3, #12
 800338a:	4982      	ldr	r1, [pc, #520]	; (8003594 <rx_pc_get+0x71c>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	b21b      	sxth	r3, r3
 8003390:	4313      	orrs	r3, r2
 8003392:	b21a      	sxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 800339a:	e00f      	b.n	80033bc <rx_pc_get+0x544>
				else get->y_vel = (rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	330b      	adds	r3, #11
 80033a0:	4a7c      	ldr	r2, [pc, #496]	; (8003594 <rx_pc_get+0x71c>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	b21a      	sxth	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	330c      	adds	r3, #12
 80033ac:	4979      	ldr	r1, [pc, #484]	; (8003594 <rx_pc_get+0x71c>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b21a      	sxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8

				if((rxbuf_get_pc[i+13] & 0x80)) get->t_vel = ((rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14])-(65536);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	330d      	adds	r3, #13
 80033c0:	4a74      	ldr	r2, [pc, #464]	; (8003594 <rx_pc_get+0x71c>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da10      	bge.n	80033ec <rx_pc_get+0x574>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	330d      	adds	r3, #13
 80033ce:	4a71      	ldr	r2, [pc, #452]	; (8003594 <rx_pc_get+0x71c>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	b21a      	sxth	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	330e      	adds	r3, #14
 80033da:	496e      	ldr	r1, [pc, #440]	; (8003594 <rx_pc_get+0x71c>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 80033ea:	e00f      	b.n	800340c <rx_pc_get+0x594>
				else get->t_vel = (rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14];
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	330d      	adds	r3, #13
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <rx_pc_get+0x71c>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	330e      	adds	r3, #14
 80033fc:	4965      	ldr	r1, [pc, #404]	; (8003594 <rx_pc_get+0x71c>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	b21b      	sxth	r3, r3
 8003402:	4313      	orrs	r3, r2
 8003404:	b21a      	sxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa

				get->cmd = DATA;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2205      	movs	r2, #5
 8003410:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003414:	e2e3      	b.n	80039de <rx_pc_get+0xb66>

			}

			// Check for Data Send
			else if(rxbuf_get_pc[i+2] == 0x55){
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3302      	adds	r3, #2
 800341a:	4a5e      	ldr	r2, [pc, #376]	; (8003594 <rx_pc_get+0x71c>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	2b55      	cmp	r3, #85	; 0x55
 8003420:	f040 811f 	bne.w	8003662 <rx_pc_get+0x7ea>

				if((rxbuf_get_pc[i+3] & 0x80)) get->data1 = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3303      	adds	r3, #3
 8003428:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <rx_pc_get+0x71c>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	b25b      	sxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	da10      	bge.n	8003454 <rx_pc_get+0x5dc>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3303      	adds	r3, #3
 8003436:	4a57      	ldr	r2, [pc, #348]	; (8003594 <rx_pc_get+0x71c>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	b21a      	sxth	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	4954      	ldr	r1, [pc, #336]	; (8003594 <rx_pc_get+0x71c>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	b21b      	sxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	b21a      	sxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8003452:	e00f      	b.n	8003474 <rx_pc_get+0x5fc>
				else get->data1 = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3303      	adds	r3, #3
 8003458:	4a4e      	ldr	r2, [pc, #312]	; (8003594 <rx_pc_get+0x71c>)
 800345a:	5cd3      	ldrb	r3, [r2, r3]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3304      	adds	r3, #4
 8003464:	494b      	ldr	r1, [pc, #300]	; (8003594 <rx_pc_get+0x71c>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	b21b      	sxth	r3, r3
 800346a:	4313      	orrs	r3, r2
 800346c:	b21a      	sxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				if((rxbuf_get_pc[i+5] & 0x80)) get->data2 = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3305      	adds	r3, #5
 8003478:	4a46      	ldr	r2, [pc, #280]	; (8003594 <rx_pc_get+0x71c>)
 800347a:	5cd3      	ldrb	r3, [r2, r3]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	da10      	bge.n	80034a4 <rx_pc_get+0x62c>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3305      	adds	r3, #5
 8003486:	4a43      	ldr	r2, [pc, #268]	; (8003594 <rx_pc_get+0x71c>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	b21a      	sxth	r2, r3
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3306      	adds	r3, #6
 8003492:	4940      	ldr	r1, [pc, #256]	; (8003594 <rx_pc_get+0x71c>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	b21b      	sxth	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b21a      	sxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 80034a2:	e00f      	b.n	80034c4 <rx_pc_get+0x64c>
				else get->data2 = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3305      	adds	r3, #5
 80034a8:	4a3a      	ldr	r2, [pc, #232]	; (8003594 <rx_pc_get+0x71c>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	b21a      	sxth	r2, r3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3306      	adds	r3, #6
 80034b4:	4937      	ldr	r1, [pc, #220]	; (8003594 <rx_pc_get+0x71c>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	b21a      	sxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				if((rxbuf_get_pc[i+7] & 0x80)) get->data3 = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3307      	adds	r3, #7
 80034c8:	4a32      	ldr	r2, [pc, #200]	; (8003594 <rx_pc_get+0x71c>)
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da10      	bge.n	80034f4 <rx_pc_get+0x67c>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3307      	adds	r3, #7
 80034d6:	4a2f      	ldr	r2, [pc, #188]	; (8003594 <rx_pc_get+0x71c>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b21a      	sxth	r2, r3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3308      	adds	r3, #8
 80034e2:	492c      	ldr	r1, [pc, #176]	; (8003594 <rx_pc_get+0x71c>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 80034f2:	e00f      	b.n	8003514 <rx_pc_get+0x69c>
				else get->data3 = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3307      	adds	r3, #7
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <rx_pc_get+0x71c>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	b21a      	sxth	r2, r3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	3308      	adds	r3, #8
 8003504:	4923      	ldr	r1, [pc, #140]	; (8003594 <rx_pc_get+0x71c>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	b21b      	sxth	r3, r3
 800350a:	4313      	orrs	r3, r2
 800350c:	b21a      	sxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				if((rxbuf_get_pc[i+9] & 0x80)) get->data4 = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3309      	adds	r3, #9
 8003518:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <rx_pc_get+0x71c>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	b25b      	sxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	da10      	bge.n	8003544 <rx_pc_get+0x6cc>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3309      	adds	r3, #9
 8003526:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <rx_pc_get+0x71c>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	b21a      	sxth	r2, r3
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	330a      	adds	r3, #10
 8003532:	4918      	ldr	r1, [pc, #96]	; (8003594 <rx_pc_get+0x71c>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	b21b      	sxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b21a      	sxth	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
 8003542:	e00f      	b.n	8003564 <rx_pc_get+0x6ec>
				else get->data4 = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3309      	adds	r3, #9
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <rx_pc_get+0x71c>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	b21a      	sxth	r2, r3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	330a      	adds	r3, #10
 8003554:	490f      	ldr	r1, [pc, #60]	; (8003594 <rx_pc_get+0x71c>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	b21b      	sxth	r3, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	b21a      	sxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc

				if((rxbuf_get_pc[i+11] & 0x80)) get->data5 = ((rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12])-(65536);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	330b      	adds	r3, #11
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <rx_pc_get+0x71c>)
 800356a:	5cd3      	ldrb	r3, [r2, r3]
 800356c:	b25b      	sxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	da12      	bge.n	8003598 <rx_pc_get+0x720>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	330b      	adds	r3, #11
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <rx_pc_get+0x71c>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	b21a      	sxth	r2, r3
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	330c      	adds	r3, #12
 8003582:	4904      	ldr	r1, [pc, #16]	; (8003594 <rx_pc_get+0x71c>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	b21b      	sxth	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b21a      	sxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
 8003592:	e011      	b.n	80035b8 <rx_pc_get+0x740>
 8003594:	200000cc 	.word	0x200000cc
				else get->data5 = (rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12];
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	330b      	adds	r3, #11
 800359c:	4a95      	ldr	r2, [pc, #596]	; (80037f4 <rx_pc_get+0x97c>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	b21a      	sxth	r2, r3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	330c      	adds	r3, #12
 80035a8:	4992      	ldr	r1, [pc, #584]	; (80037f4 <rx_pc_get+0x97c>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce

				if((rxbuf_get_pc[i+13] & 0x80)) get->data6 = ((rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14])-(65536);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	330d      	adds	r3, #13
 80035bc:	4a8d      	ldr	r2, [pc, #564]	; (80037f4 <rx_pc_get+0x97c>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da10      	bge.n	80035e8 <rx_pc_get+0x770>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	330d      	adds	r3, #13
 80035ca:	4a8a      	ldr	r2, [pc, #552]	; (80037f4 <rx_pc_get+0x97c>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	330e      	adds	r3, #14
 80035d6:	4987      	ldr	r1, [pc, #540]	; (80037f4 <rx_pc_get+0x97c>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	b21b      	sxth	r3, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	b21a      	sxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 80035e6:	e00f      	b.n	8003608 <rx_pc_get+0x790>
				else get->data6 = (rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	330d      	adds	r3, #13
 80035ec:	4a81      	ldr	r2, [pc, #516]	; (80037f4 <rx_pc_get+0x97c>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	b21a      	sxth	r2, r3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	330e      	adds	r3, #14
 80035f8:	497e      	ldr	r1, [pc, #504]	; (80037f4 <rx_pc_get+0x97c>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b21a      	sxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0

				if((rxbuf_get_pc[i+15] & 0x80)) get->data6 = ((rxbuf_get_pc[i+15] << 8) | rxbuf_get_pc[i+15])-(65536);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	330f      	adds	r3, #15
 800360c:	4a79      	ldr	r2, [pc, #484]	; (80037f4 <rx_pc_get+0x97c>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	b25b      	sxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	da10      	bge.n	8003638 <rx_pc_get+0x7c0>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	330f      	adds	r3, #15
 800361a:	4a76      	ldr	r2, [pc, #472]	; (80037f4 <rx_pc_get+0x97c>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	b21a      	sxth	r2, r3
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	330f      	adds	r3, #15
 8003626:	4973      	ldr	r1, [pc, #460]	; (80037f4 <rx_pc_get+0x97c>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	b21b      	sxth	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	b21a      	sxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 8003636:	e00f      	b.n	8003658 <rx_pc_get+0x7e0>
				else get->data6 = (rxbuf_get_pc[i+15] << 8) | rxbuf_get_pc[i+16];
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	330f      	adds	r3, #15
 800363c:	4a6d      	ldr	r2, [pc, #436]	; (80037f4 <rx_pc_get+0x97c>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	b21a      	sxth	r2, r3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3310      	adds	r3, #16
 8003648:	496a      	ldr	r1, [pc, #424]	; (80037f4 <rx_pc_get+0x97c>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	b21b      	sxth	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b21a      	sxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
				get->cmd = DATA;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2205      	movs	r2, #5
 800365c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003660:	e1bd      	b.n	80039de <rx_pc_get+0xb66>
			}



			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x12){
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3302      	adds	r3, #2
 8003666:	4a63      	ldr	r2, [pc, #396]	; (80037f4 <rx_pc_get+0x97c>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	2b12      	cmp	r3, #18
 800366c:	f040 80a7 	bne.w	80037be <rx_pc_get+0x946>
				for(int j=0; j<19; j++){
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e00b      	b.n	800368e <rx_pc_get+0x816>
					rx_buf_command[j] = rxbuf_get_pc[j];
 8003676:	4a5f      	ldr	r2, [pc, #380]	; (80037f4 <rx_pc_get+0x97c>)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	7819      	ldrb	r1, [r3, #0]
 800367e:	4a5e      	ldr	r2, [pc, #376]	; (80037f8 <rx_pc_get+0x980>)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	460a      	mov	r2, r1
 8003686:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<19; j++){
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3301      	adds	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b12      	cmp	r3, #18
 8003692:	ddf0      	ble.n	8003676 <rx_pc_get+0x7fe>
				}

				get->id_data = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3303      	adds	r3, #3
 8003698:	4a56      	ldr	r2, [pc, #344]	; (80037f4 <rx_pc_get+0x97c>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b21a      	sxth	r2, r3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4953      	ldr	r1, [pc, #332]	; (80037f4 <rx_pc_get+0x97c>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b21b      	sxth	r3, r3
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_pc[i+5] & 0x80)) get->x_data = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3305      	adds	r3, #5
 80036ba:	4a4e      	ldr	r2, [pc, #312]	; (80037f4 <rx_pc_get+0x97c>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da10      	bge.n	80036e6 <rx_pc_get+0x86e>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	3305      	adds	r3, #5
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <rx_pc_get+0x97c>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	b21a      	sxth	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3306      	adds	r3, #6
 80036d4:	4947      	ldr	r1, [pc, #284]	; (80037f4 <rx_pc_get+0x97c>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	b21b      	sxth	r3, r3
 80036da:	4313      	orrs	r3, r2
 80036dc:	b21a      	sxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 80036e4:	e00f      	b.n	8003706 <rx_pc_get+0x88e>
				else get->x_data = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3305      	adds	r3, #5
 80036ea:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <rx_pc_get+0x97c>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	b21a      	sxth	r2, r3
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3306      	adds	r3, #6
 80036f6:	493f      	ldr	r1, [pc, #252]	; (80037f4 <rx_pc_get+0x97c>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	b21b      	sxth	r3, r3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b21a      	sxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_pc[i+7] & 0x80)) get->y_data = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3307      	adds	r3, #7
 800370a:	4a3a      	ldr	r2, [pc, #232]	; (80037f4 <rx_pc_get+0x97c>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
 800370e:	b25b      	sxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	da10      	bge.n	8003736 <rx_pc_get+0x8be>
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3307      	adds	r3, #7
 8003718:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <rx_pc_get+0x97c>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b21a      	sxth	r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3308      	adds	r3, #8
 8003724:	4933      	ldr	r1, [pc, #204]	; (80037f4 <rx_pc_get+0x97c>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	b21b      	sxth	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b21a      	sxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 8003734:	e00f      	b.n	8003756 <rx_pc_get+0x8de>
				else get->y_data = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3307      	adds	r3, #7
 800373a:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <rx_pc_get+0x97c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	b21a      	sxth	r2, r3
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3308      	adds	r3, #8
 8003746:	492b      	ldr	r1, [pc, #172]	; (80037f4 <rx_pc_get+0x97c>)
 8003748:	5ccb      	ldrb	r3, [r1, r3]
 800374a:	b21b      	sxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b21a      	sxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_pc[i+9] & 0x80)) get->t_data = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3309      	adds	r3, #9
 800375a:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <rx_pc_get+0x97c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	b25b      	sxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	da10      	bge.n	8003786 <rx_pc_get+0x90e>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3309      	adds	r3, #9
 8003768:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <rx_pc_get+0x97c>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b21a      	sxth	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	330a      	adds	r3, #10
 8003774:	491f      	ldr	r1, [pc, #124]	; (80037f4 <rx_pc_get+0x97c>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	b21b      	sxth	r3, r3
 800377a:	4313      	orrs	r3, r2
 800377c:	b21a      	sxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8003784:	e00f      	b.n	80037a6 <rx_pc_get+0x92e>
				else get->t_data = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3309      	adds	r3, #9
 800378a:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <rx_pc_get+0x97c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	b21a      	sxth	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	330a      	adds	r3, #10
 8003796:	4917      	ldr	r1, [pc, #92]	; (80037f4 <rx_pc_get+0x97c>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	b21b      	sxth	r3, r3
 800379c:	4313      	orrs	r3, r2
 800379e:	b21a      	sxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				get->aktuator = rxbuf_get_pc[i+11];
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	330b      	adds	r3, #11
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <rx_pc_get+0x97c>)
 80037ac:	5cd2      	ldrb	r2, [r2, r3]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e

				get->cmd = MOVE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80037bc:	e10f      	b.n	80039de <rx_pc_get+0xb66>

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_pc[2] == 0x13){
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <rx_pc_get+0x97c>)
 80037c0:	789b      	ldrb	r3, [r3, #2]
 80037c2:	2b13      	cmp	r3, #19
 80037c4:	f040 810b 	bne.w	80039de <rx_pc_get+0xb66>
				uint8_t chk = checksum_pc_generator(rxbuf_get_pc,18);
 80037c8:	2112      	movs	r1, #18
 80037ca:	480a      	ldr	r0, [pc, #40]	; (80037f4 <rx_pc_get+0x97c>)
 80037cc:	f7ff fa3a 	bl	8002c44 <checksum_pc_generator>
 80037d0:	4603      	mov	r3, r0
 80037d2:	72fb      	strb	r3, [r7, #11]
				if(chk == rxbuf_get_pc[18]){
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <rx_pc_get+0x97c>)
 80037d6:	7c9b      	ldrb	r3, [r3, #18]
 80037d8:	7afa      	ldrb	r2, [r7, #11]
 80037da:	429a      	cmp	r2, r3
 80037dc:	f040 80ff 	bne.w	80039de <rx_pc_get+0xb66>
					// get id holder
//					if(rxbuf_get_pc[i+3]>id_holder){
						id_holder = rxbuf_get_pc[i+3];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3303      	adds	r3, #3
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <rx_pc_get+0x97c>)
 80037e6:	5cd2      	ldrb	r2, [r2, r3]
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <rx_pc_get+0x984>)
 80037ea:	701a      	strb	r2, [r3, #0]
//					}
					// Save message to holder
					for(int j=0; j<19; j++){
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e01b      	b.n	800382a <rx_pc_get+0x9b2>
 80037f2:	bf00      	nop
 80037f4:	200000cc 	.word	0x200000cc
 80037f8:	200000f8 	.word	0x200000f8
 80037fc:	20000238 	.word	0x20000238
						rx_buf_holder[((rxbuf_get_pc[i+3])*19)+j] = rxbuf_get_pc[j];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	3303      	adds	r3, #3
 8003804:	4a7f      	ldr	r2, [pc, #508]	; (8003a04 <rx_pc_get+0xb8c>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	461a      	mov	r2, r3
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	497a      	ldr	r1, [pc, #488]	; (8003a04 <rx_pc_get+0xb8c>)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	440a      	add	r2, r1
 800381e:	7811      	ldrb	r1, [r2, #0]
 8003820:	4a79      	ldr	r2, [pc, #484]	; (8003a08 <rx_pc_get+0xb90>)
 8003822:	54d1      	strb	r1, [r2, r3]
					for(int j=0; j<19; j++){
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b12      	cmp	r3, #18
 800382e:	dde7      	ble.n	8003800 <rx_pc_get+0x988>
					}

					get->astar_id = (rxbuf_get_pc[i+3]);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	3303      	adds	r3, #3
 8003834:	4a73      	ldr	r2, [pc, #460]	; (8003a04 <rx_pc_get+0xb8c>)
 8003836:	5cd2      	ldrb	r2, [r2, r3]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
					get->astar_length = (rxbuf_get_pc[i+4]);
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	4a70      	ldr	r2, [pc, #448]	; (8003a04 <rx_pc_get+0xb8c>)
 8003844:	5cd2      	ldrb	r2, [r2, r3]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+5]);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3305      	adds	r3, #5
 8003850:	4a6c      	ldr	r2, [pc, #432]	; (8003a04 <rx_pc_get+0xb8c>)
 8003852:	5cd1      	ldrb	r1, [r2, r3]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3303      	adds	r3, #3
 8003858:	4a6a      	ldr	r2, [pc, #424]	; (8003a04 <rx_pc_get+0xb8c>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	461a      	mov	r2, r3
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	b209      	sxth	r1, r1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+6]);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	3306      	adds	r3, #6
 8003870:	4a64      	ldr	r2, [pc, #400]	; (8003a04 <rx_pc_get+0xb8c>)
 8003872:	5cd1      	ldrb	r1, [r2, r3]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3303      	adds	r3, #3
 8003878:	4a62      	ldr	r2, [pc, #392]	; (8003a04 <rx_pc_get+0xb8c>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	461a      	mov	r2, r3
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	b209      	sxth	r1, r1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3264      	adds	r2, #100	; 0x64
 800388a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+7]);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3307      	adds	r3, #7
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <rx_pc_get+0xb8c>)
 8003894:	5cd1      	ldrb	r1, [r2, r3]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3303      	adds	r3, #3
 800389a:	4a5a      	ldr	r2, [pc, #360]	; (8003a04 <rx_pc_get+0xb8c>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	461a      	mov	r2, r3
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	b209      	sxth	r1, r1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+8]);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3308      	adds	r3, #8
 80038b4:	4a53      	ldr	r2, [pc, #332]	; (8003a04 <rx_pc_get+0xb8c>)
 80038b6:	5cd1      	ldrb	r1, [r2, r3]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3303      	adds	r3, #3
 80038bc:	4a51      	ldr	r2, [pc, #324]	; (8003a04 <rx_pc_get+0xb8c>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	b209      	sxth	r1, r1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3264      	adds	r2, #100	; 0x64
 80038d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+9]);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3309      	adds	r3, #9
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <rx_pc_get+0xb8c>)
 80038da:	5cd1      	ldrb	r1, [r2, r3]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3303      	adds	r3, #3
 80038e0:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <rx_pc_get+0xb8c>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	b209      	sxth	r1, r1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+10]);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	330a      	adds	r3, #10
 80038fa:	4a42      	ldr	r2, [pc, #264]	; (8003a04 <rx_pc_get+0xb8c>)
 80038fc:	5cd1      	ldrb	r1, [r2, r3]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3303      	adds	r3, #3
 8003902:	4a40      	ldr	r2, [pc, #256]	; (8003a04 <rx_pc_get+0xb8c>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	461a      	mov	r2, r3
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	b209      	sxth	r1, r1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3264      	adds	r2, #100	; 0x64
 8003916:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+11]);
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	330b      	adds	r3, #11
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <rx_pc_get+0xb8c>)
 8003920:	5cd1      	ldrb	r1, [r2, r3]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3303      	adds	r3, #3
 8003926:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <rx_pc_get+0xb8c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	461a      	mov	r2, r3
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	1cda      	adds	r2, r3, #3
 8003934:	b209      	sxth	r1, r1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+12]);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	330c      	adds	r3, #12
 8003940:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <rx_pc_get+0xb8c>)
 8003942:	5cd1      	ldrb	r1, [r2, r3]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3303      	adds	r3, #3
 8003948:	4a2e      	ldr	r2, [pc, #184]	; (8003a04 <rx_pc_get+0xb8c>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	461a      	mov	r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	1cda      	adds	r2, r3, #3
 8003956:	b209      	sxth	r1, r1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3264      	adds	r2, #100	; 0x64
 800395c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+13]);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	330d      	adds	r3, #13
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <rx_pc_get+0xb8c>)
 8003966:	5cd1      	ldrb	r1, [r2, r3]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3303      	adds	r3, #3
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <rx_pc_get+0xb8c>)
 800396e:	5cd3      	ldrb	r3, [r2, r3]
 8003970:	461a      	mov	r2, r3
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	b209      	sxth	r1, r1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+14]);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	330e      	adds	r3, #14
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <rx_pc_get+0xb8c>)
 8003988:	5cd1      	ldrb	r1, [r2, r3]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3303      	adds	r3, #3
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <rx_pc_get+0xb8c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	461a      	mov	r2, r3
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	b209      	sxth	r1, r1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3264      	adds	r2, #100	; 0x64
 80039a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_total_length = (rxbuf_get_pc[i+15] << 8) | rxbuf_get_pc[i+16];
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	330f      	adds	r3, #15
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <rx_pc_get+0xb8c>)
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3310      	adds	r3, #16
 80039b6:	4913      	ldr	r1, [pc, #76]	; (8003a04 <rx_pc_get+0xb8c>)
 80039b8:	5ccb      	ldrb	r3, [r1, r3]
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	b21b      	sxth	r3, r3
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
					get->astar_msg_id = rxbuf_get_pc[i+17];
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	3311      	adds	r3, #17
 80039cc:	4a0d      	ldr	r2, [pc, #52]	; (8003a04 <rx_pc_get+0xb8c>)
 80039ce:	5cd2      	ldrb	r2, [r2, r3]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					get->cmd = MOVE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2203      	movs	r2, #3
 80039da:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
	for(int i = 0; i < 19; i++){
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b12      	cmp	r3, #18
 80039e8:	f77f aa4e 	ble.w	8002e88 <rx_pc_get+0x10>
				}
			}

		}
	}
	HAL_UART_Receive_DMA(huart_pc, rxbuf_get_pc, 19);
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <rx_pc_get+0xb94>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2213      	movs	r2, #19
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <rx_pc_get+0xb8c>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 f932 	bl	8007c5e <HAL_UART_Receive_DMA>
}
 80039fa:	bf00      	nop
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200000cc 	.word	0x200000cc
 8003a08:	2000010c 	.word	0x2000010c
 8003a0c:	200000c8 	.word	0x200000c8

08003a10 <init_loadcell>:

static uint32_t tare = 8388607;
static float knownOriginal = 1;  // in milli gram
static float knownHX711 = 1;

void init_loadcell(TIM_HandleTypeDef* htim){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	htim_loadcell = htim;
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <init_loadcell+0x40>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim_loadcell);
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <init_loadcell+0x40>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fd8a 	bl	800753c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4809      	ldr	r0, [pc, #36]	; (8003a54 <init_loadcell+0x44>)
 8003a2e:	f001 feb1 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003a32:	200a      	movs	r0, #10
 8003a34:	f000 ff44 	bl	80048c0 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4805      	ldr	r0, [pc, #20]	; (8003a54 <init_loadcell+0x44>)
 8003a3e:	f001 fea9 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003a42:	200a      	movs	r0, #10
 8003a44:	f000 ff3c 	bl	80048c0 <HAL_Delay>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000023c 	.word	0x2000023c
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint16_t id_astar= 0;
////////////////////////////////////// COMMUNICATION CALLBACK ////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_UART_RxCpltCallback+0x30>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <HAL_UART_RxCpltCallback+0x18>
	    // Callback for Communicate to PC
		#ifdef USE_COM_PC
		rx_pc_get(&message_from_pc);
 8003a68:	4808      	ldr	r0, [pc, #32]	; (8003a8c <HAL_UART_RxCpltCallback+0x34>)
 8003a6a:	f7ff fa05 	bl	8002e78 <rx_pc_get>
		#ifdef USE_COM_CONTROL
		rx_ctrl_get(&message_from_ctrl);

		#endif
	}
}
 8003a6e:	e006      	b.n	8003a7e <HAL_UART_RxCpltCallback+0x26>
	} else if(huart == &huart6){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_UART_RxCpltCallback+0x38>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d102      	bne.n	8003a7e <HAL_UART_RxCpltCallback+0x26>
		rx_ctrl_get(&message_from_ctrl);
 8003a78:	4806      	ldr	r0, [pc, #24]	; (8003a94 <HAL_UART_RxCpltCallback+0x3c>)
 8003a7a:	f7fe fba7 	bl	80021cc <rx_ctrl_get>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000081c 	.word	0x2000081c
 8003a8c:	20000240 	.word	0x20000240
 8003a90:	200008ac 	.word	0x200008ac
 8003a94:	2000042c 	.word	0x2000042c

08003a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a98:	b5b0      	push	{r4, r5, r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a9e:	f000 fe9d 	bl	80047dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aa2:	f000 f88b 	bl	8003bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003aa6:	f000 faeb 	bl	8004080 <MX_GPIO_Init>
  MX_DMA_Init();
 8003aaa:	f000 faab 	bl	8004004 <MX_DMA_Init>
  MX_ADC1_Init();
 8003aae:	f000 f8ef 	bl	8003c90 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003ab2:	f000 fa29 	bl	8003f08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003ab6:	f000 fa51 	bl	8003f5c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003aba:	f000 fa79 	bl	8003fb0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003abe:	f000 f987 	bl	8003dd0 <MX_TIM1_Init>
  MX_SPI1_Init();
 8003ac2:	f000 f94d 	bl	8003d60 <MX_SPI1_Init>
  MX_I2C1_Init();
 8003ac6:	f000 f91d 	bl	8003d04 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003aca:	f000 f9d1 	bl	8003e70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////// SENSOR INITIALIZATION ////////////////////////////////////

    // Volt & Current Initialization
    #ifdef USE_VOLT_CURRENT
    VoltCurrent_Init(&hadc1);
 8003ace:	482d      	ldr	r0, [pc, #180]	; (8003b84 <main+0xec>)
 8003ad0:	f7fc fcfe 	bl	80004d0 <VoltCurrent_Init>
    #endif

    // Load cell Initialization
    init_loadcell(&htim2);
 8003ad4:	482c      	ldr	r0, [pc, #176]	; (8003b88 <main+0xf0>)
 8003ad6:	f7ff ff9b 	bl	8003a10 <init_loadcell>

    // Initialize Communication to Control
    #ifdef USE_COM_CONTROL
    komunikasi_ctrl_init(&huart6);
 8003ada:	482c      	ldr	r0, [pc, #176]	; (8003b8c <main+0xf4>)
 8003adc:	f7fe fa6c 	bl	8001fb8 <komunikasi_ctrl_init>
    rx_ctrl_start_get();
 8003ae0:	f7fe fb64 	bl	80021ac <rx_ctrl_start_get>
    #endif

    // Initialize Communication to PC
    #ifdef USE_COM_PC
    komunikasi_pc_init(&huart1);
 8003ae4:	482a      	ldr	r0, [pc, #168]	; (8003b90 <main+0xf8>)
 8003ae6:	f7ff f89d 	bl	8002c24 <komunikasi_pc_init>
    rx_pc_start_get();
 8003aea:	f7ff f9b5 	bl	8002e58 <rx_pc_start_get>
    #endif

    // IMU Initialization
	#ifdef USE_IMU
    bno055_start(&bno,&err,&hi2c1);
 8003aee:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <main+0xfc>)
 8003af0:	4929      	ldr	r1, [pc, #164]	; (8003b98 <main+0x100>)
 8003af2:	482a      	ldr	r0, [pc, #168]	; (8003b9c <main+0x104>)
 8003af4:	f7fe f96c 	bl	8001dd0 <bno055_start>
  while (1)
  {

	  	  ////////////////////////////////////// ASYNCHRONOUS READING & SENDING ///////////////////////////////////////////

	  CurrentTick = HAL_GetTick();
 8003af8:	f000 fed6 	bl	80048a8 <HAL_GetTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <main+0x108>)
 8003b00:	6013      	str	r3, [r2, #0]

	  if(CurrentTick-SensorTick > 300){
 8003b02:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <main+0x108>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <main+0x10c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b10:	d927      	bls.n	8003b62 <main+0xca>

//		   Sending Sensor Data
//		  tx_pc_send_Sensor(Sensor_Data);

//		   Sending Odometry Data
		  tx_pc_send_Odometry(message_from_ctrl.x_pos,message_from_ctrl.y_pos,message_from_ctrl.t_pos,message_from_ctrl.x_vel,message_from_ctrl.y_vel,message_from_ctrl.t_vel);
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <main+0x110>)
 8003b14:	f9b3 01a0 	ldrsh.w	r0, [r3, #416]	; 0x1a0
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <main+0x110>)
 8003b1a:	f9b3 11a2 	ldrsh.w	r1, [r3, #418]	; 0x1a2
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <main+0x110>)
 8003b20:	f9b3 41a4 	ldrsh.w	r4, [r3, #420]	; 0x1a4
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <main+0x110>)
 8003b26:	f9b3 51a6 	ldrsh.w	r5, [r3, #422]	; 0x1a6
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <main+0x110>)
 8003b2c:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <main+0x110>)
 8003b32:	f9b2 21aa 	ldrsh.w	r2, [r2, #426]	; 0x1aa
 8003b36:	9201      	str	r2, [sp, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	f7ff f91b 	bl	8002d78 <tx_pc_send_Odometry>

//		   Sending BNO055 Data
		  get_euler_imu(&bno,&eul,&lia,&temperature,&BNO055_Data);
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <main+0x114>)
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <main+0x118>)
 8003b48:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <main+0x11c>)
 8003b4a:	491b      	ldr	r1, [pc, #108]	; (8003bb8 <main+0x120>)
 8003b4c:	4813      	ldr	r0, [pc, #76]	; (8003b9c <main+0x104>)
 8003b4e:	f7fe f9c5 	bl	8001edc <get_euler_imu>
		  tx_pc_send_BNO055(BNO055_Data);
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <main+0x114>)
 8003b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b56:	f7ff f895 	bl	8002c84 <tx_pc_send_BNO055>

		  SensorTick = CurrentTick;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <main+0x108>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <main+0x10c>)
 8003b60:	6013      	str	r3, [r2, #0]
	  }
	  ////////////////////////////////////// SENDING DATA TO CONTROL ///////////////////////////

	  // Sending BNO08X Data
	  tx_ctrl_send_Astar();
 8003b62:	f7fe fad3 	bl	800210c <tx_ctrl_send_Astar>
	  tx_ctrl_send_Command();
 8003b66:	f7fe fb0b 	bl	8002180 <tx_ctrl_send_Command>

	  // Sending Data From CTRL To PC
//	  tx_pc_send_data(message_from_ctrl.data1,message_from_ctrl.data2,message_from_ctrl.data3,message_from_ctrl.data4,message_from_ctrl.data5,message_from_ctrl.data6,message_from_ctrl.data7);

//	   Reading IMU Data
	  get_euler_imu(&bno,&eul,&lia,&temperature,&BNO055_Data);
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <main+0x114>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <main+0x118>)
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <main+0x11c>)
 8003b72:	4911      	ldr	r1, [pc, #68]	; (8003bb8 <main+0x120>)
 8003b74:	4809      	ldr	r0, [pc, #36]	; (8003b9c <main+0x104>)
 8003b76:	f7fe f9b1 	bl	8001edc <get_euler_imu>
//	  tx_pc_send_Odometry(message_from_ctrl.x_pos,message_from_ctrl.y_pos,message_from_ctrl.t_pos,message_from_ctrl.x_vel,message_from_ctrl.y_vel,message_from_ctrl.t_vel);
	  tx_ctrl_send_BNO055(BNO055_Data);
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <main+0x114>)
 8003b7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b7e:	f7fe fa4b 	bl	8002018 <tx_ctrl_send_BNO055>
	  CurrentTick = HAL_GetTick();
 8003b82:	e7b9      	b.n	8003af8 <main+0x60>
 8003b84:	200006f0 	.word	0x200006f0
 8003b88:	200007d4 	.word	0x200007d4
 8003b8c:	200008ac 	.word	0x200008ac
 8003b90:	2000081c 	.word	0x2000081c
 8003b94:	20000738 	.word	0x20000738
 8003b98:	200006d4 	.word	0x200006d4
 8003b9c:	20000628 	.word	0x20000628
 8003ba0:	20000a14 	.word	0x20000a14
 8003ba4:	20000a18 	.word	0x20000a18
 8003ba8:	2000042c 	.word	0x2000042c
 8003bac:	20000618 	.word	0x20000618
 8003bb0:	200006d5 	.word	0x200006d5
 8003bb4:	200006e4 	.word	0x200006e4
 8003bb8:	200006d8 	.word	0x200006d8

08003bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b094      	sub	sp, #80	; 0x50
 8003bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	2230      	movs	r2, #48	; 0x30
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fd7e 	bl	80086cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd0:	f107 030c 	add.w	r3, r7, #12
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <SystemClock_Config+0xcc>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <SystemClock_Config+0xcc>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <SystemClock_Config+0xcc>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <SystemClock_Config+0xd0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <SystemClock_Config+0xd0>)
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <SystemClock_Config+0xd0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c20:	2301      	movs	r3, #1
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c24:	2310      	movs	r3, #16
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c30:	2308      	movs	r3, #8
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003c34:	2354      	movs	r3, #84	; 0x54
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c40:	f107 0320 	add.w	r3, r7, #32
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 ff49 	bl	8006adc <HAL_RCC_OscConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003c50:	f000 fabe 	bl	80041d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c54:	230f      	movs	r3, #15
 8003c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 f9ab 	bl	8006fcc <HAL_RCC_ClockConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003c7c:	f000 faa8 	bl	80041d0 <Error_Handler>
  }
}
 8003c80:	bf00      	nop
 8003c82:	3750      	adds	r7, #80	; 0x50
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40007000 	.word	0x40007000

08003c90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <MX_ADC1_Init+0x6c>)
 8003c98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003c9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ca0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ca2:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cc4:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <MX_ADC1_Init+0x70>)
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <MX_ADC1_Init+0x68>)
 8003ce4:	f000 fe10 	bl	8004908 <HAL_ADC_Init>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8003cee:	f000 fa6f 	bl	80041d0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200006f0 	.word	0x200006f0
 8003cfc:	40012000 	.word	0x40012000
 8003d00:	0f000001 	.word	0x0f000001

08003d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d0a:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <MX_I2C1_Init+0x54>)
 8003d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d10:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <MX_I2C1_Init+0x58>)
 8003d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d40:	4804      	ldr	r0, [pc, #16]	; (8003d54 <MX_I2C1_Init+0x50>)
 8003d42:	f001 fd41 	bl	80057c8 <HAL_I2C_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d4c:	f000 fa40 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000738 	.word	0x20000738
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	000186a0 	.word	0x000186a0

08003d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <MX_SPI1_Init+0x6c>)
 8003d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d98:	2238      	movs	r2, #56	; 0x38
 8003d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003db0:	220a      	movs	r2, #10
 8003db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003db4:	4804      	ldr	r0, [pc, #16]	; (8003dc8 <MX_SPI1_Init+0x68>)
 8003db6:	f003 fae9 	bl	800738c <HAL_SPI_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003dc0:	f000 fa06 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000028 	.word	0x20000028
 8003dcc:	40013000 	.word	0x40013000

08003dd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de4:	463b      	mov	r3, r7
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <MX_TIM1_Init+0x9c>)
 8003df0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003df4:	2253      	movs	r2, #83	; 0x53
 8003df6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e0c:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e18:	4813      	ldr	r0, [pc, #76]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e1a:	f003 fb40 	bl	800749e <HAL_TIM_Base_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003e24:	f000 f9d4 	bl	80041d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	4619      	mov	r1, r3
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e36:	f003 fbdb 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003e40:	f000 f9c6 	bl	80041d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <MX_TIM1_Init+0x98>)
 8003e52:	f003 fdbb 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e5c:	f000 f9b8 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	2000078c 	.word	0x2000078c
 8003e6c:	40010000 	.word	0x40010000

08003e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003e96:	2253      	movs	r2, #83	; 0x53
 8003e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003eb4:	4813      	ldr	r0, [pc, #76]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003eb6:	f003 faf2 	bl	800749e <HAL_TIM_Base_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003ec0:	f000 f986 	bl	80041d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	4619      	mov	r1, r3
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003ed2:	f003 fb8d 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003edc:	f000 f978 	bl	80041d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4619      	mov	r1, r3
 8003eec:	4805      	ldr	r0, [pc, #20]	; (8003f04 <MX_TIM2_Init+0x94>)
 8003eee:	f003 fd6d 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003ef8:	f000 f96a 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200007d4 	.word	0x200007d4

08003f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <MX_USART1_UART_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f003 fdb2 	bl	8007aa8 <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f4a:	f000 f941 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000081c 	.word	0x2000081c
 8003f58:	40011000 	.word	0x40011000

08003f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <MX_USART2_UART_Init+0x50>)
 8003f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f92:	4805      	ldr	r0, [pc, #20]	; (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f94:	f003 fd88 	bl	8007aa8 <HAL_UART_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f9e:	f000 f917 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000864 	.word	0x20000864
 8003fac:	40004400 	.word	0x40004400

08003fb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <MX_USART6_UART_Init+0x50>)
 8003fb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003fe6:	4805      	ldr	r0, [pc, #20]	; (8003ffc <MX_USART6_UART_Init+0x4c>)
 8003fe8:	f003 fd5e 	bl	8007aa8 <HAL_UART_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003ff2:	f000 f8ed 	bl	80041d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200008ac 	.word	0x200008ac
 8004000:	40011400 	.word	0x40011400

08004004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <MX_DMA_Init+0x78>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a1a      	ldr	r2, [pc, #104]	; (800407c <MX_DMA_Init+0x78>)
 8004014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <MX_DMA_Init+0x78>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_DMA_Init+0x78>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <MX_DMA_Init+0x78>)
 8004030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <MX_DMA_Init+0x78>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2010      	movs	r0, #16
 8004048:	f000 fe79 	bl	8004d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800404c:	2010      	movs	r0, #16
 800404e:	f000 fe92 	bl	8004d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	2039      	movs	r0, #57	; 0x39
 8004058:	f000 fe71 	bl	8004d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800405c:	2039      	movs	r0, #57	; 0x39
 800405e:	f000 fe8a 	bl	8004d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004062:	2200      	movs	r2, #0
 8004064:	2100      	movs	r1, #0
 8004066:	203a      	movs	r0, #58	; 0x3a
 8004068:	f000 fe69 	bl	8004d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800406c:	203a      	movs	r0, #58	; 0x3a
 800406e:	f000 fe82 	bl	8004d76 <HAL_NVIC_EnableIRQ>

}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <MX_GPIO_Init+0x140>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a48      	ldr	r2, [pc, #288]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a41      	ldr	r2, [pc, #260]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b38      	ldr	r3, [pc, #224]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8004106:	2200      	movs	r2, #0
 8004108:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800410c:	482d      	ldr	r0, [pc, #180]	; (80041c4 <MX_GPIO_Init+0x144>)
 800410e:	f001 fb41 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8004112:	2200      	movs	r2, #0
 8004114:	f24e 5138 	movw	r1, #58680	; 0xe538
 8004118:	482b      	ldr	r0, [pc, #172]	; (80041c8 <MX_GPIO_Init+0x148>)
 800411a:	f001 fb3b 	bl	8005794 <HAL_GPIO_WritePin>
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004124:	4829      	ldr	r0, [pc, #164]	; (80041cc <MX_GPIO_Init+0x14c>)
 8004126:	f001 fb35 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800412a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004130:	2301      	movs	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4619      	mov	r1, r3
 8004142:	4820      	ldr	r0, [pc, #128]	; (80041c4 <MX_GPIO_Init+0x144>)
 8004144:	f001 f9a2 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4619      	mov	r1, r3
 800415a:	481c      	ldr	r0, [pc, #112]	; (80041cc <MX_GPIO_Init+0x14c>)
 800415c:	f001 f996 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pins : MX7665_Pin LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin
                           MUL_SCK_Pin MUL_Latch_Pin MUL_MOSI_Pin LCD_WR_Pin */
  GPIO_InitStruct.Pin = MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8004160:	f24e 5338 	movw	r3, #58680	; 0xe538
 8004164:	617b      	str	r3, [r7, #20]
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004166:	2301      	movs	r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416e:	2300      	movs	r3, #0
 8004170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	4619      	mov	r1, r3
 8004178:	4813      	ldr	r0, [pc, #76]	; (80041c8 <MX_GPIO_Init+0x148>)
 800417a:	f001 f987 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004184:	2301      	movs	r3, #1
 8004186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	2300      	movs	r3, #0
 800418e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	4619      	mov	r1, r3
 8004196:	480d      	ldr	r0, [pc, #52]	; (80041cc <MX_GPIO_Init+0x14c>)
 8004198:	f001 f978 	bl	800548c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 800419c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_GPIO_Init+0x148>)
 80041b2:	f001 f96b 	bl	800548c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041b6:	bf00      	nop
 80041b8:	3728      	adds	r7, #40	; 0x28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40020800 	.word	0x40020800
 80041c8:	40020400 	.word	0x40020400
 80041cc:	40020000 	.word	0x40020000

080041d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <Error_Handler+0x8>
	...

080041dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_MspInit+0x4c>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	4a0f      	ldr	r2, [pc, #60]	; (8004228 <HAL_MspInit+0x4c>)
 80041ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f0:	6453      	str	r3, [r2, #68]	; 0x44
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_MspInit+0x4c>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_MspInit+0x4c>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_MspInit+0x4c>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_MspInit+0x4c>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800

0800422c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_ADC_MspInit+0x7c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d127      	bne.n	800429e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_ADC_MspInit+0x80>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <HAL_ADC_MspInit+0x80>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_ADC_MspInit+0x80>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_ADC_MspInit+0x80>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_ADC_MspInit+0x80>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_ADC_MspInit+0x80>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8004286:	2312      	movs	r3, #18
 8004288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800428a:	2303      	movs	r3, #3
 800428c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	4805      	ldr	r0, [pc, #20]	; (80042b0 <HAL_ADC_MspInit+0x84>)
 800429a:	f001 f8f7 	bl	800548c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800429e:	bf00      	nop
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40012000 	.word	0x40012000
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40020000 	.word	0x40020000

080042b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_I2C_MspInit+0x84>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d12b      	bne.n	800432e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_I2C_MspInit+0x88>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_I2C_MspInit+0x88>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_I2C_MspInit+0x88>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f2:	23c0      	movs	r3, #192	; 0xc0
 80042f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042f6:	2312      	movs	r3, #18
 80042f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fe:	2303      	movs	r3, #3
 8004300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004302:	2304      	movs	r3, #4
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	480c      	ldr	r0, [pc, #48]	; (8004340 <HAL_I2C_MspInit+0x8c>)
 800430e:	f001 f8bd 	bl	800548c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_I2C_MspInit+0x88>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <HAL_I2C_MspInit+0x88>)
 800431c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_I2C_MspInit+0x88>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800432e:	bf00      	nop
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40005400 	.word	0x40005400
 800433c:	40023800 	.word	0x40023800
 8004340:	40020400 	.word	0x40020400

08004344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_SPI_MspInit+0x84>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d12b      	bne.n	80043be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_SPI_MspInit+0x88>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_SPI_MspInit+0x88>)
 8004370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004374:	6453      	str	r3, [r2, #68]	; 0x44
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_SPI_MspInit+0x88>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_SPI_MspInit+0x88>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_SPI_MspInit+0x88>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_SPI_MspInit+0x88>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800439e:	2360      	movs	r3, #96	; 0x60
 80043a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043aa:	2303      	movs	r3, #3
 80043ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043ae:	2305      	movs	r3, #5
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b2:	f107 0314 	add.w	r3, r7, #20
 80043b6:	4619      	mov	r1, r3
 80043b8:	4805      	ldr	r0, [pc, #20]	; (80043d0 <HAL_SPI_MspInit+0x8c>)
 80043ba:	f001 f867 	bl	800548c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043be:	bf00      	nop
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40013000 	.word	0x40013000
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40020000 	.word	0x40020000

080043d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_TIM_Base_MspInit+0x64>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6453      	str	r3, [r2, #68]	; 0x44
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004402:	e012      	b.n	800442a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d10d      	bne.n	800442a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a09      	ldr	r2, [pc, #36]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_TIM_Base_MspInit+0x68>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a92      	ldr	r2, [pc, #584]	; (80046a8 <HAL_UART_MspInit+0x268>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d15c      	bne.n	800451c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	4b91      	ldr	r3, [pc, #580]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	4a90      	ldr	r2, [pc, #576]	; (80046ac <HAL_UART_MspInit+0x26c>)
 800446c:	f043 0310 	orr.w	r3, r3, #16
 8004470:	6453      	str	r3, [r2, #68]	; 0x44
 8004472:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	4b8a      	ldr	r3, [pc, #552]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	4a89      	ldr	r2, [pc, #548]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
 800448e:	4b87      	ldr	r3, [pc, #540]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800449a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044ac:	2307      	movs	r3, #7
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b4:	4619      	mov	r1, r3
 80044b6:	487e      	ldr	r0, [pc, #504]	; (80046b0 <HAL_UART_MspInit+0x270>)
 80044b8:	f000 ffe8 	bl	800548c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80044bc:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044be:	4a7e      	ldr	r2, [pc, #504]	; (80046b8 <HAL_UART_MspInit+0x278>)
 80044c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ca:	4b7a      	ldr	r3, [pc, #488]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d0:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d6:	4b77      	ldr	r3, [pc, #476]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e4:	4b73      	ldr	r3, [pc, #460]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80044ea:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044f2:	4b70      	ldr	r3, [pc, #448]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044f8:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <HAL_UART_MspInit+0x274>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80044fe:	486d      	ldr	r0, [pc, #436]	; (80046b4 <HAL_UART_MspInit+0x274>)
 8004500:	f000 fc54 	bl	8004dac <HAL_DMA_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800450a:	f7ff fe61 	bl	80041d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a68      	ldr	r2, [pc, #416]	; (80046b4 <HAL_UART_MspInit+0x274>)
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c
 8004514:	4a67      	ldr	r2, [pc, #412]	; (80046b4 <HAL_UART_MspInit+0x274>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800451a:	e0c1      	b.n	80046a0 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a66      	ldr	r2, [pc, #408]	; (80046bc <HAL_UART_MspInit+0x27c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d15b      	bne.n	80045de <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	4b60      	ldr	r3, [pc, #384]	; (80046ac <HAL_UART_MspInit+0x26c>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a5f      	ldr	r2, [pc, #380]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_UART_MspInit+0x26c>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b56      	ldr	r3, [pc, #344]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800455e:	230c      	movs	r3, #12
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800456e:	2307      	movs	r3, #7
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004576:	4619      	mov	r1, r3
 8004578:	484d      	ldr	r0, [pc, #308]	; (80046b0 <HAL_UART_MspInit+0x270>)
 800457a:	f000 ff87 	bl	800548c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800457e:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_UART_MspInit+0x280>)
 8004580:	4a50      	ldr	r2, [pc, #320]	; (80046c4 <HAL_UART_MspInit+0x284>)
 8004582:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004584:	4b4e      	ldr	r3, [pc, #312]	; (80046c0 <HAL_UART_MspInit+0x280>)
 8004586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800458a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800458c:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <HAL_UART_MspInit+0x280>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004592:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <HAL_UART_MspInit+0x280>)
 8004594:	2200      	movs	r2, #0
 8004596:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004598:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_UART_MspInit+0x280>)
 800459a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800459e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045a0:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045a6:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80045ac:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045b4:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045bc:	2200      	movs	r2, #0
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80045c0:	483f      	ldr	r0, [pc, #252]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045c2:	f000 fbf3 	bl	8004dac <HAL_DMA_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80045cc:	f7ff fe00 	bl	80041d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a3b      	ldr	r2, [pc, #236]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80045d6:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <HAL_UART_MspInit+0x280>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80045dc:	e060      	b.n	80046a0 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_UART_MspInit+0x288>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d15b      	bne.n	80046a0 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_UART_MspInit+0x26c>)
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <HAL_UART_MspInit+0x26c>)
 80045f2:	f043 0320 	orr.w	r3, r3, #32
 80045f6:	6453      	str	r3, [r2, #68]	; 0x44
 80045f8:	4b2c      	ldr	r3, [pc, #176]	; (80046ac <HAL_UART_MspInit+0x26c>)
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_UART_MspInit+0x26c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4a27      	ldr	r2, [pc, #156]	; (80046ac <HAL_UART_MspInit+0x26c>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6313      	str	r3, [r2, #48]	; 0x30
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_UART_MspInit+0x26c>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004620:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004632:	2308      	movs	r3, #8
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463a:	4619      	mov	r1, r3
 800463c:	481c      	ldr	r0, [pc, #112]	; (80046b0 <HAL_UART_MspInit+0x270>)
 800463e:	f000 ff25 	bl	800548c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004644:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <HAL_UART_MspInit+0x290>)
 8004646:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004648:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_UART_MspInit+0x28c>)
 800464a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800464e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004658:	2200      	movs	r2, #0
 800465a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_UART_MspInit+0x28c>)
 800465e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004662:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004666:	2200      	movs	r2, #0
 8004668:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_UART_MspInit+0x28c>)
 800466c:	2200      	movs	r2, #0
 800466e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004676:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_UART_MspInit+0x28c>)
 800467a:	2200      	movs	r2, #0
 800467c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004680:	2200      	movs	r2, #0
 8004682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004684:	4811      	ldr	r0, [pc, #68]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004686:	f000 fb91 	bl	8004dac <HAL_DMA_Init>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8004690:	f7ff fd9e 	bl	80041d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <HAL_UART_MspInit+0x28c>)
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
 800469a:	4a0c      	ldr	r2, [pc, #48]	; (80046cc <HAL_UART_MspInit+0x28c>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80046a0:	bf00      	nop
 80046a2:	3738      	adds	r7, #56	; 0x38
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020000 	.word	0x40020000
 80046b4:	200008f4 	.word	0x200008f4
 80046b8:	40026440 	.word	0x40026440
 80046bc:	40004400 	.word	0x40004400
 80046c0:	20000954 	.word	0x20000954
 80046c4:	40026088 	.word	0x40026088
 80046c8:	40011400 	.word	0x40011400
 80046cc:	200009b4 	.word	0x200009b4
 80046d0:	40026428 	.word	0x40026428

080046d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046d8:	e7fe      	b.n	80046d8 <NMI_Handler+0x4>

080046da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <HardFault_Handler+0x4>

080046e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <MemManage_Handler+0x4>

080046e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ea:	e7fe      	b.n	80046ea <BusFault_Handler+0x4>

080046ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <UsageFault_Handler+0x4>

080046f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046f2:	b480      	push	{r7}
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004720:	f000 f8ae 	bl	8004880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}

08004728 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <DMA1_Stream5_IRQHandler+0x10>)
 800472e:	f000 fc43 	bl	8004fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000954 	.word	0x20000954

0800473c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <DMA2_Stream1_IRQHandler+0x10>)
 8004742:	f000 fc39 	bl	8004fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200009b4 	.word	0x200009b4

08004750 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <DMA2_Stream2_IRQHandler+0x10>)
 8004756:	f000 fc2f 	bl	8004fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200008f4 	.word	0x200008f4

08004764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <SystemInit+0x20>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	4a05      	ldr	r2, [pc, #20]	; (8004784 <SystemInit+0x20>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800478c:	f7ff ffea 	bl	8004764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004798:	e002      	b.n	80047a0 <LoopCopyDataInit>

0800479a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800479a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800479c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479e:	3304      	adds	r3, #4

080047a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a4:	d3f9      	bcc.n	800479a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047a8:	4c0a      	ldr	r4, [pc, #40]	; (80047d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047ac:	e001      	b.n	80047b2 <LoopFillZerobss>

080047ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b0:	3204      	adds	r2, #4

080047b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b4:	d3fb      	bcc.n	80047ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047b6:	f003 ff91 	bl	80086dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ba:	f7ff f96d 	bl	8003a98 <main>
  bx  lr    
 80047be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80047c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80047cc:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 80047d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80047d4:	20000a20 	.word	0x20000a20

080047d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047d8:	e7fe      	b.n	80047d8 <ADC_IRQHandler>
	...

080047dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <HAL_Init+0x40>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <HAL_Init+0x40>)
 80047e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_Init+0x40>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0a      	ldr	r2, [pc, #40]	; (800481c <HAL_Init+0x40>)
 80047f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_Init+0x40>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a07      	ldr	r2, [pc, #28]	; (800481c <HAL_Init+0x40>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004804:	2003      	movs	r0, #3
 8004806:	f000 fa8f 	bl	8004d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800480a:	200f      	movs	r0, #15
 800480c:	f000 f808 	bl	8004820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004810:	f7ff fce4 	bl	80041dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023c00 	.word	0x40023c00

08004820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_InitTick+0x54>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_InitTick+0x58>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4619      	mov	r1, r3
 8004832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004836:	fbb3 f3f1 	udiv	r3, r3, r1
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	4618      	mov	r0, r3
 8004840:	f000 faa7 	bl	8004d92 <HAL_SYSTICK_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00e      	b.n	800486c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b0f      	cmp	r3, #15
 8004852:	d80a      	bhi.n	800486a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004854:	2200      	movs	r2, #0
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485c:	f000 fa6f 	bl	8004d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <HAL_InitTick+0x5c>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000000 	.word	0x20000000
 8004878:	20000008 	.word	0x20000008
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_IncTick+0x20>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_IncTick+0x24>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4413      	add	r3, r2
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_IncTick+0x24>)
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000008 	.word	0x20000008
 80048a4:	20000a1c 	.word	0x20000a1c

080048a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return uwTick;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_GetTick+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000a1c 	.word	0x20000a1c

080048c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7ff ffee 	bl	80048a8 <HAL_GetTick>
 80048cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d8:	d005      	beq.n	80048e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_Delay+0x44>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048e6:	bf00      	nop
 80048e8:	f7ff ffde 	bl	80048a8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d8f7      	bhi.n	80048e8 <HAL_Delay+0x28>
  {
  }
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000008 	.word	0x20000008

08004908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e033      	b.n	8004986 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fc80 	bl	800422c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800494e:	f023 0302 	bic.w	r3, r3, #2
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f818 	bl	8004990 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
 8004976:	e001      	b.n	800497c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004998:	4b79      	ldr	r3, [pc, #484]	; (8004b80 <ADC_Init+0x1f0>)
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	021a      	lsls	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <ADC_Init+0x1f4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6899      	ldr	r1, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	e00f      	b.n	8004a8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0202 	bic.w	r2, r2, #2
 8004a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	7e1b      	ldrb	r3, [r3, #24]
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ada:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	035a      	lsls	r2, r3, #13
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	e007      	b.n	8004b04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	051a      	lsls	r2, r3, #20
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b46:	025a      	lsls	r2, r3, #9
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6899      	ldr	r1, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	029a      	lsls	r2, r3, #10
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40012300 	.word	0x40012300
 8004b84:	0f000001 	.word	0x0f000001

08004b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	60d3      	str	r3, [r2, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 0307 	and.w	r3, r3, #7
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db0b      	blt.n	8004c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4907      	ldr	r1, [pc, #28]	; (8004c24 <__NVIC_EnableIRQ+0x38>)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e100 	.word	0xe000e100

08004c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db0a      	blt.n	8004c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	490c      	ldr	r1, [pc, #48]	; (8004c74 <__NVIC_SetPriority+0x4c>)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	0112      	lsls	r2, r2, #4
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c50:	e00a      	b.n	8004c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4908      	ldr	r1, [pc, #32]	; (8004c78 <__NVIC_SetPriority+0x50>)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	3b04      	subs	r3, #4
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	440b      	add	r3, r1
 8004c66:	761a      	strb	r2, [r3, #24]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000e100 	.word	0xe000e100
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	; 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f1c3 0307 	rsb	r3, r3, #7
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	bf28      	it	cs
 8004c9a:	2304      	movcs	r3, #4
 8004c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d902      	bls.n	8004cac <NVIC_EncodePriority+0x30>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3b03      	subs	r3, #3
 8004caa:	e000      	b.n	8004cae <NVIC_EncodePriority+0x32>
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	43d9      	mvns	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd4:	4313      	orrs	r3, r2
         );
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3724      	adds	r7, #36	; 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cf4:	d301      	bcc.n	8004cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e00f      	b.n	8004d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <SysTick_Config+0x40>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d02:	210f      	movs	r1, #15
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d08:	f7ff ff8e 	bl	8004c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <SysTick_Config+0x40>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <SysTick_Config+0x40>)
 8004d14:	2207      	movs	r2, #7
 8004d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	e000e010 	.word	0xe000e010

08004d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff29 	bl	8004b88 <__NVIC_SetPriorityGrouping>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d50:	f7ff ff3e 	bl	8004bd0 <__NVIC_GetPriorityGrouping>
 8004d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff ff8e 	bl	8004c7c <NVIC_EncodePriority>
 8004d60:	4602      	mov	r2, r0
 8004d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff5d 	bl	8004c28 <__NVIC_SetPriority>
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff31 	bl	8004bec <__NVIC_EnableIRQ>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ffa2 	bl	8004ce4 <SysTick_Config>
 8004da0:	4603      	mov	r3, r0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004db8:	f7ff fd76 	bl	80048a8 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e099      	b.n	8004efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004de8:	e00f      	b.n	8004e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dea:	f7ff fd5d 	bl	80048a8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d908      	bls.n	8004e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2203      	movs	r2, #3
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e078      	b.n	8004efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e8      	bne.n	8004dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4b38      	ldr	r3, [pc, #224]	; (8004f04 <HAL_DMA_Init+0x158>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d107      	bne.n	8004e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d117      	bne.n	8004ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa6f 	bl	8005394 <DMA_CheckFifoParam>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e016      	b.n	8004efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa26 	bl	8005328 <DMA_CalcBaseAndBitshift>
 8004edc:	4603      	mov	r3, r0
 8004ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	223f      	movs	r2, #63	; 0x3f
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	f010803f 	.word	0xf010803f

08004f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_DMA_Start_IT+0x26>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e040      	b.n	8004fb0 <HAL_DMA_Start_IT+0xa8>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d12f      	bne.n	8004fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f9b8 	bl	80052cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	223f      	movs	r2, #63	; 0x3f
 8004f62:	409a      	lsls	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0216 	orr.w	r2, r2, #22
 8004f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e005      	b.n	8004fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
 8004fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fc4:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <HAL_DMA_IRQHandler+0x248>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a8e      	ldr	r2, [pc, #568]	; (8005204 <HAL_DMA_IRQHandler+0x24c>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01a      	beq.n	8005024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	2208      	movs	r2, #8
 8005012:	409a      	lsls	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f043 0201 	orr.w	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	2201      	movs	r2, #1
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d012      	beq.n	800505a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	2201      	movs	r2, #1
 8005048:	409a      	lsls	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f043 0202 	orr.w	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	2204      	movs	r2, #4
 8005060:	409a      	lsls	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d012      	beq.n	8005090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	2204      	movs	r2, #4
 800507e:	409a      	lsls	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0204 	orr.w	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	2210      	movs	r2, #16
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d043      	beq.n	8005128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d03c      	beq.n	8005128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	2210      	movs	r2, #16
 80050b4:	409a      	lsls	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d018      	beq.n	80050fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d108      	bne.n	80050e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d024      	beq.n	8005128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
 80050e6:	e01f      	b.n	8005128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
 80050f8:	e016      	b.n	8005128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d107      	bne.n	8005118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0208 	bic.w	r2, r2, #8
 8005116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	2220      	movs	r2, #32
 800512e:	409a      	lsls	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 808f 	beq.w	8005258 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8087 	beq.w	8005258 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	2220      	movs	r2, #32
 8005150:	409a      	lsls	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b05      	cmp	r3, #5
 8005160:	d136      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0216 	bic.w	r2, r2, #22
 8005170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_DMA_IRQHandler+0x1da>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0208 	bic.w	r2, r2, #8
 80051a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	223f      	movs	r2, #63	; 0x3f
 80051a8:	409a      	lsls	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d07e      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
        }
        return;
 80051ce:	e079      	b.n	80052c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01d      	beq.n	800521a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10d      	bne.n	8005208 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d031      	beq.n	8005258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
 80051fc:	e02c      	b.n	8005258 <HAL_DMA_IRQHandler+0x2a0>
 80051fe:	bf00      	nop
 8005200:	20000000 	.word	0x20000000
 8005204:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d023      	beq.n	8005258 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
 8005218:	e01e      	b.n	8005258 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0210 	bic.w	r2, r2, #16
 8005236:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	2b00      	cmp	r3, #0
 800525e:	d032      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d022      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2205      	movs	r2, #5
 8005270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	3301      	adds	r3, #1
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	429a      	cmp	r2, r3
 800528e:	d307      	bcc.n	80052a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f2      	bne.n	8005284 <HAL_DMA_IRQHandler+0x2cc>
 800529e:	e000      	b.n	80052a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
 80052c2:	e000      	b.n	80052c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80052c4:	bf00      	nop
    }
  }
}
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d108      	bne.n	800530c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800530a:	e007      	b.n	800531c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	3b10      	subs	r3, #16
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <DMA_CalcBaseAndBitshift+0x64>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <DMA_CalcBaseAndBitshift+0x68>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d909      	bls.n	800536a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	659a      	str	r2, [r3, #88]	; 0x58
 8005368:	e007      	b.n	800537a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	aaaaaaab 	.word	0xaaaaaaab
 8005390:	08008770 	.word	0x08008770

08005394 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11f      	bne.n	80053ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d856      	bhi.n	8005462 <DMA_CheckFifoParam+0xce>
 80053b4:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <DMA_CheckFifoParam+0x28>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053df 	.word	0x080053df
 80053c4:	080053cd 	.word	0x080053cd
 80053c8:	08005463 	.word	0x08005463
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d046      	beq.n	8005466 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e043      	b.n	8005466 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053e6:	d140      	bne.n	800546a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ec:	e03d      	b.n	800546a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f6:	d121      	bne.n	800543c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d837      	bhi.n	800546e <DMA_CheckFifoParam+0xda>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <DMA_CheckFifoParam+0x70>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005415 	.word	0x08005415
 8005408:	0800541b 	.word	0x0800541b
 800540c:	08005415 	.word	0x08005415
 8005410:	0800542d 	.word	0x0800542d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e030      	b.n	800547c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d025      	beq.n	8005472 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800542a:	e022      	b.n	8005472 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005434:	d11f      	bne.n	8005476 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800543a:	e01c      	b.n	8005476 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d903      	bls.n	800544a <DMA_CheckFifoParam+0xb6>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d003      	beq.n	8005450 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005448:	e018      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      break;
 800544e:	e015      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      break;
 8005460:	e00b      	b.n	800547a <DMA_CheckFifoParam+0xe6>
      break;
 8005462:	bf00      	nop
 8005464:	e00a      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;
 8005466:	bf00      	nop
 8005468:	e008      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;
 800546a:	bf00      	nop
 800546c:	e006      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;   
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <DMA_CheckFifoParam+0xe8>
      break;
 800547a:	bf00      	nop
    }
  } 
  
  return status; 
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e159      	b.n	800575c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054a8:	2201      	movs	r2, #1
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	f040 8148 	bne.w	8005756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d005      	beq.n	80054de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d130      	bne.n	8005540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005514:	2201      	movs	r2, #1
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 0201 	and.w	r2, r3, #1
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b03      	cmp	r3, #3
 800554a:	d017      	beq.n	800557c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	2203      	movs	r2, #3
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d123      	bne.n	80055d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	08da      	lsrs	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3208      	adds	r2, #8
 8005590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	220f      	movs	r2, #15
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	08da      	lsrs	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3208      	adds	r2, #8
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0203 	and.w	r2, r3, #3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80a2 	beq.w	8005756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	4b57      	ldr	r3, [pc, #348]	; (8005774 <HAL_GPIO_Init+0x2e8>)
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	4a56      	ldr	r2, [pc, #344]	; (8005774 <HAL_GPIO_Init+0x2e8>)
 800561c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005620:	6453      	str	r3, [r2, #68]	; 0x44
 8005622:	4b54      	ldr	r3, [pc, #336]	; (8005774 <HAL_GPIO_Init+0x2e8>)
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800562e:	4a52      	ldr	r2, [pc, #328]	; (8005778 <HAL_GPIO_Init+0x2ec>)
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	3302      	adds	r3, #2
 8005636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	220f      	movs	r2, #15
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a49      	ldr	r2, [pc, #292]	; (800577c <HAL_GPIO_Init+0x2f0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d019      	beq.n	800568e <HAL_GPIO_Init+0x202>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a48      	ldr	r2, [pc, #288]	; (8005780 <HAL_GPIO_Init+0x2f4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_GPIO_Init+0x1fe>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a47      	ldr	r2, [pc, #284]	; (8005784 <HAL_GPIO_Init+0x2f8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00d      	beq.n	8005686 <HAL_GPIO_Init+0x1fa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a46      	ldr	r2, [pc, #280]	; (8005788 <HAL_GPIO_Init+0x2fc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <HAL_GPIO_Init+0x1f6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a45      	ldr	r2, [pc, #276]	; (800578c <HAL_GPIO_Init+0x300>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d101      	bne.n	800567e <HAL_GPIO_Init+0x1f2>
 800567a:	2304      	movs	r3, #4
 800567c:	e008      	b.n	8005690 <HAL_GPIO_Init+0x204>
 800567e:	2307      	movs	r3, #7
 8005680:	e006      	b.n	8005690 <HAL_GPIO_Init+0x204>
 8005682:	2303      	movs	r3, #3
 8005684:	e004      	b.n	8005690 <HAL_GPIO_Init+0x204>
 8005686:	2302      	movs	r3, #2
 8005688:	e002      	b.n	8005690 <HAL_GPIO_Init+0x204>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_GPIO_Init+0x204>
 800568e:	2300      	movs	r3, #0
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f002 0203 	and.w	r2, r2, #3
 8005696:	0092      	lsls	r2, r2, #2
 8005698:	4093      	lsls	r3, r2
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056a0:	4935      	ldr	r1, [pc, #212]	; (8005778 <HAL_GPIO_Init+0x2ec>)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	3302      	adds	r3, #2
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ae:	4b38      	ldr	r3, [pc, #224]	; (8005790 <HAL_GPIO_Init+0x304>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056d2:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <HAL_GPIO_Init+0x304>)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056d8:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <HAL_GPIO_Init+0x304>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056fc:	4a24      	ldr	r2, [pc, #144]	; (8005790 <HAL_GPIO_Init+0x304>)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005702:	4b23      	ldr	r3, [pc, #140]	; (8005790 <HAL_GPIO_Init+0x304>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	43db      	mvns	r3, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	4013      	ands	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005726:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_GPIO_Init+0x304>)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800572c:	4b18      	ldr	r3, [pc, #96]	; (8005790 <HAL_GPIO_Init+0x304>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005750:	4a0f      	ldr	r2, [pc, #60]	; (8005790 <HAL_GPIO_Init+0x304>)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	f67f aea2 	bls.w	80054a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3724      	adds	r7, #36	; 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	40013800 	.word	0x40013800
 800577c:	40020000 	.word	0x40020000
 8005780:	40020400 	.word	0x40020400
 8005784:	40020800 	.word	0x40020800
 8005788:	40020c00 	.word	0x40020c00
 800578c:	40021000 	.word	0x40021000
 8005790:	40013c00 	.word	0x40013c00

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057b0:	e003      	b.n	80057ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e12b      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fe fd60 	bl	80042b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800582c:	f001 fd86 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a81      	ldr	r2, [pc, #516]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d807      	bhi.n	800584c <HAL_I2C_Init+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a80      	ldr	r2, [pc, #512]	; (8005a40 <HAL_I2C_Init+0x278>)
 8005840:	4293      	cmp	r3, r2
 8005842:	bf94      	ite	ls
 8005844:	2301      	movls	r3, #1
 8005846:	2300      	movhi	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e006      	b.n	800585a <HAL_I2C_Init+0x92>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a7d      	ldr	r2, [pc, #500]	; (8005a44 <HAL_I2C_Init+0x27c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	bf94      	ite	ls
 8005854:	2301      	movls	r3, #1
 8005856:	2300      	movhi	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0e7      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a78      	ldr	r2, [pc, #480]	; (8005a48 <HAL_I2C_Init+0x280>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a6a      	ldr	r2, [pc, #424]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d802      	bhi.n	800589c <HAL_I2C_Init+0xd4>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	e009      	b.n	80058b0 <HAL_I2C_Init+0xe8>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	4a69      	ldr	r2, [pc, #420]	; (8005a4c <HAL_I2C_Init+0x284>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	099b      	lsrs	r3, r3, #6
 80058ae:	3301      	adds	r3, #1
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	495c      	ldr	r1, [pc, #368]	; (8005a3c <HAL_I2C_Init+0x274>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d819      	bhi.n	8005904 <HAL_I2C_Init+0x13c>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e59      	subs	r1, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fbb1 f3f3 	udiv	r3, r1, r3
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058e4:	400b      	ands	r3, r1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_I2C_Init+0x138>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1e59      	subs	r1, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fe:	e051      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005900:	2304      	movs	r3, #4
 8005902:	e04f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d111      	bne.n	8005930 <HAL_I2C_Init+0x168>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	fbb0 f3f3 	udiv	r3, r0, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e012      	b.n	8005956 <HAL_I2C_Init+0x18e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1e58      	subs	r0, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	0099      	lsls	r1, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	fbb0 f3f3 	udiv	r3, r0, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Init+0x196>
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <HAL_I2C_Init+0x1bc>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e58      	subs	r0, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	440b      	add	r3, r1
 8005974:	fbb0 f3f3 	udiv	r3, r0, r3
 8005978:	3301      	adds	r3, #1
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005982:	e00f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e58      	subs	r0, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	0099      	lsls	r1, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	fbb0 f3f3 	udiv	r3, r0, r3
 800599a:	3301      	adds	r3, #1
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	6809      	ldr	r1, [r1, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6911      	ldr	r1, [r2, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	000186a0 	.word	0x000186a0
 8005a40:	001e847f 	.word	0x001e847f
 8005a44:	003d08ff 	.word	0x003d08ff
 8005a48:	431bde83 	.word	0x431bde83
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
 8005a60:	4613      	mov	r3, r2
 8005a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a64:	f7fe ff20 	bl	80048a8 <HAL_GetTick>
 8005a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 80e0 	bne.w	8005c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2319      	movs	r3, #25
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4970      	ldr	r1, [pc, #448]	; (8005c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fdf4 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0d3      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2C_Master_Transmit+0x50>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0cc      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d007      	beq.n	8005ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2221      	movs	r2, #33	; 0x21
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	893a      	ldrh	r2, [r7, #8]
 8005af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a50      	ldr	r2, [pc, #320]	; (8005c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b08:	8979      	ldrh	r1, [r7, #10]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6a3a      	ldr	r2, [r7, #32]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fbc8 	bl	80062a4 <I2C_MasterRequestWrite>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e08d      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b34:	e066      	b.n	8005c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	6a39      	ldr	r1, [r7, #32]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 feb2 	bl	80068a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d107      	bne.n	8005b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e06b      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_I2C_Master_Transmit+0x188>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	6a39      	ldr	r1, [r7, #32]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fea9 	bl	8006934 <I2C_WaitOnBTFFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d107      	bne.n	8005c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01a      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d194      	bne.n	8005b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	00100002 	.word	0x00100002
 8005c48:	ffff0000 	.word	0xffff0000

08005c4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08c      	sub	sp, #48	; 0x30
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	817b      	strh	r3, [r7, #10]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c60:	f7fe fe22 	bl	80048a8 <HAL_GetTick>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	f040 8217 	bne.w	80060a2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2319      	movs	r3, #25
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	497c      	ldr	r1, [pc, #496]	; (8005e70 <HAL_I2C_Master_Receive+0x224>)
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fcf6 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e20a      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_I2C_Master_Receive+0x50>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e203      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d007      	beq.n	8005cc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2222      	movs	r2, #34	; 0x22
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	893a      	ldrh	r2, [r7, #8]
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a5c      	ldr	r2, [pc, #368]	; (8005e74 <HAL_I2C_Master_Receive+0x228>)
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d04:	8979      	ldrh	r1, [r7, #10]
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fb4c 	bl	80063a8 <I2C_MasterRequestRead>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e1c4      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d113      	bne.n	8005d4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d22:	2300      	movs	r3, #0
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e198      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d11b      	bne.n	8005d8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e178      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d11b      	bne.n	8005dca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	e158      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005df0:	e144      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	f200 80f1 	bhi.w	8005fde <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d123      	bne.n	8005e4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fddb 	bl	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e145      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e4a:	e117      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d14e      	bne.n	8005ef2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	4906      	ldr	r1, [pc, #24]	; (8005e78 <HAL_I2C_Master_Receive+0x22c>)
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fc06 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e11a      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
 8005e6e:	bf00      	nop
 8005e70:	00100002 	.word	0x00100002
 8005e74:	ffff0000 	.word	0xffff0000
 8005e78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ef0:	e0c4      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2200      	movs	r2, #0
 8005efa:	496c      	ldr	r1, [pc, #432]	; (80060ac <HAL_I2C_Master_Receive+0x460>)
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fbb7 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0cb      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	2200      	movs	r2, #0
 8005f56:	4955      	ldr	r1, [pc, #340]	; (80060ac <HAL_I2C_Master_Receive+0x460>)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fb89 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e09d      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fdc:	e04e      	b.n	800607c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fcee 	bl	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e058      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b04      	cmp	r3, #4
 8006030:	d124      	bne.n	800607c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	2b03      	cmp	r3, #3
 8006038:	d107      	bne.n	800604a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006048:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	f47f aeb6 	bne.w	8005df2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3728      	adds	r7, #40	; 0x28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	00010004 	.word	0x00010004

080060b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	817b      	strh	r3, [r7, #10]
 80060c2:	460b      	mov	r3, r1
 80060c4:	813b      	strh	r3, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060ca:	f7fe fbed 	bl	80048a8 <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	f040 80d9 	bne.w	8006290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	2319      	movs	r3, #25
 80060e4:	2201      	movs	r2, #1
 80060e6:	496d      	ldr	r1, [pc, #436]	; (800629c <HAL_I2C_Mem_Write+0x1ec>)
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fac1 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0cc      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_I2C_Mem_Write+0x56>
 8006102:	2302      	movs	r3, #2
 8006104:	e0c5      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b01      	cmp	r3, #1
 800611a:	d007      	beq.n	800612c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2221      	movs	r2, #33	; 0x21
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2240      	movs	r2, #64	; 0x40
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a4d      	ldr	r2, [pc, #308]	; (80062a0 <HAL_I2C_Mem_Write+0x1f0>)
 800616c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800616e:	88f8      	ldrh	r0, [r7, #6]
 8006170:	893a      	ldrh	r2, [r7, #8]
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	4603      	mov	r3, r0
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f9e0 	bl	8006544 <I2C_RequestMemoryWrite>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d052      	beq.n	8006230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e081      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fb86 	bl	80068a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e06b      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d11b      	bne.n	8006230 <HAL_I2C_Mem_Write+0x180>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1aa      	bne.n	800618e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fb79 	bl	8006934 <I2C_WaitOnBTFFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	2b04      	cmp	r3, #4
 800624e:	d107      	bne.n	8006260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e016      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	00100002 	.word	0x00100002
 80062a0:	ffff0000 	.word	0xffff0000

080062a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	460b      	mov	r3, r1
 80062b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d006      	beq.n	80062ce <I2C_MasterRequestWrite+0x2a>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d003      	beq.n	80062ce <I2C_MasterRequestWrite+0x2a>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062cc:	d108      	bne.n	80062e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e00b      	b.n	80062f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	2b12      	cmp	r3, #18
 80062e6:	d107      	bne.n	80062f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f9b3 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d103      	bne.n	8006328 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e035      	b.n	8006398 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006334:	d108      	bne.n	8006348 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	e01b      	b.n	8006380 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006348:	897b      	ldrh	r3, [r7, #10]
 800634a:	11db      	asrs	r3, r3, #7
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0306 	and.w	r3, r3, #6
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f063 030f 	orn	r3, r3, #15
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	490e      	ldr	r1, [pc, #56]	; (80063a0 <I2C_MasterRequestWrite+0xfc>)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f9fc 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e010      	b.n	8006398 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006376:	897b      	ldrh	r3, [r7, #10]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4907      	ldr	r1, [pc, #28]	; (80063a4 <I2C_MasterRequestWrite+0x100>)
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f9ec 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	00010008 	.word	0x00010008
 80063a4:	00010002 	.word	0x00010002

080063a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	460b      	mov	r3, r1
 80063b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d006      	beq.n	80063e2 <I2C_MasterRequestRead+0x3a>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d003      	beq.n	80063e2 <I2C_MasterRequestRead+0x3a>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e0:	d108      	bne.n	80063f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e00b      	b.n	800640c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	2b11      	cmp	r3, #17
 80063fa:	d107      	bne.n	800640c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f929 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006432:	d103      	bne.n	800643c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e079      	b.n	8006534 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006448:	d108      	bne.n	800645c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800644a:	897b      	ldrh	r3, [r7, #10]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	611a      	str	r2, [r3, #16]
 800645a:	e05f      	b.n	800651c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800645c:	897b      	ldrh	r3, [r7, #10]
 800645e:	11db      	asrs	r3, r3, #7
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f003 0306 	and.w	r3, r3, #6
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f063 030f 	orn	r3, r3, #15
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4930      	ldr	r1, [pc, #192]	; (800653c <I2C_MasterRequestRead+0x194>)
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f972 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e054      	b.n	8006534 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800648a:	897b      	ldrh	r3, [r7, #10]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4929      	ldr	r1, [pc, #164]	; (8006540 <I2C_MasterRequestRead+0x198>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f962 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e044      	b.n	8006534 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f8c7 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d103      	bne.n	8006500 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e017      	b.n	8006534 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006504:	897b      	ldrh	r3, [r7, #10]
 8006506:	11db      	asrs	r3, r3, #7
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0306 	and.w	r3, r3, #6
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f063 030e 	orn	r3, r3, #14
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4907      	ldr	r1, [pc, #28]	; (8006540 <I2C_MasterRequestRead+0x198>)
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f91e 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	00010008 	.word	0x00010008
 8006540:	00010002 	.word	0x00010002

08006544 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4603      	mov	r3, r0
 8006554:	817b      	strh	r3, [r7, #10]
 8006556:	460b      	mov	r3, r1
 8006558:	813b      	strh	r3, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800656c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	2200      	movs	r2, #0
 8006576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f878 	bl	8006670 <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006594:	d103      	bne.n	800659e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e05f      	b.n	8006662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065a2:	897b      	ldrh	r3, [r7, #10]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	492d      	ldr	r1, [pc, #180]	; (800666c <I2C_RequestMemoryWrite+0x128>)
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f8d3 	bl	8006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e04c      	b.n	8006662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	6a39      	ldr	r1, [r7, #32]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f95e 	bl	80068a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d107      	bne.n	8006606 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e02b      	b.n	8006662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006610:	893b      	ldrh	r3, [r7, #8]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	611a      	str	r2, [r3, #16]
 800661a:	e021      	b.n	8006660 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800661c:	893b      	ldrh	r3, [r7, #8]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b29b      	uxth	r3, r3
 8006622:	b2da      	uxtb	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800662a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662c:	6a39      	ldr	r1, [r7, #32]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f938 	bl	80068a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2b04      	cmp	r3, #4
 8006640:	d107      	bne.n	8006652 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e005      	b.n	8006662 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006656:	893b      	ldrh	r3, [r7, #8]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	00010002 	.word	0x00010002

08006670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006680:	e048      	b.n	8006714 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006688:	d044      	beq.n	8006714 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fe f90d 	bl	80048a8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d139      	bne.n	8006714 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d10d      	bne.n	80066c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	43da      	mvns	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4013      	ands	r3, r2
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	e00c      	b.n	80066e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	43da      	mvns	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d116      	bne.n	8006714 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e023      	b.n	800675c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10d      	bne.n	800673a <I2C_WaitOnFlagUntilTimeout+0xca>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	43da      	mvns	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4013      	ands	r3, r2
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	e00c      	b.n	8006754 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	43da      	mvns	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4013      	ands	r3, r2
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	429a      	cmp	r2, r3
 8006758:	d093      	beq.n	8006682 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006772:	e071      	b.n	8006858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006782:	d123      	bne.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006792:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800679c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	f043 0204 	orr.w	r2, r3, #4
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e067      	b.n	800689c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d2:	d041      	beq.n	8006858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d4:	f7fe f868 	bl	80048a8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d136      	bne.n	8006858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10c      	bne.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00b      	b.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e021      	b.n	800689c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	0c1b      	lsrs	r3, r3, #16
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10c      	bne.n	800687c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	43da      	mvns	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4013      	ands	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	e00b      	b.n	8006894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	43da      	mvns	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf14      	ite	ne
 800688e:	2301      	movne	r3, #1
 8006890:	2300      	moveq	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f af6d 	bne.w	8006774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b0:	e034      	b.n	800691c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f8e3 	bl	8006a7e <I2C_IsAcknowledgeFailed>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e034      	b.n	800692c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c8:	d028      	beq.n	800691c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fd ffed 	bl	80048a8 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11d      	bne.n	800691c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b80      	cmp	r3, #128	; 0x80
 80068ec:	d016      	beq.n	800691c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e007      	b.n	800692c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	d1c3      	bne.n	80068b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006940:	e034      	b.n	80069ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f89b 	bl	8006a7e <I2C_IsAcknowledgeFailed>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e034      	b.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006958:	d028      	beq.n	80069ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fd ffa5 	bl	80048a8 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11d      	bne.n	80069ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b04      	cmp	r3, #4
 800697c:	d016      	beq.n	80069ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e007      	b.n	80069bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d1c3      	bne.n	8006942 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069d0:	e049      	b.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d119      	bne.n	8006a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0210 	mvn.w	r2, #16
 80069e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e030      	b.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a14:	f7fd ff48 	bl	80048a8 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11d      	bne.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	d016      	beq.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f043 0220 	orr.w	r2, r3, #32
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e007      	b.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	d1ae      	bne.n	80069d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d11b      	bne.n	8006ace <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0204 	orr.w	r2, r3, #4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e267      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d075      	beq.n	8006be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006afa:	4b88      	ldr	r3, [pc, #544]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d00c      	beq.n	8006b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4b85      	ldr	r3, [pc, #532]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d112      	bne.n	8006b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b12:	4b82      	ldr	r3, [pc, #520]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1e:	d10b      	bne.n	8006b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b20:	4b7e      	ldr	r3, [pc, #504]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05b      	beq.n	8006be4 <HAL_RCC_OscConfig+0x108>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d157      	bne.n	8006be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e242      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d106      	bne.n	8006b50 <HAL_RCC_OscConfig+0x74>
 8006b42:	4b76      	ldr	r3, [pc, #472]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a75      	ldr	r2, [pc, #468]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e01d      	b.n	8006b8c <HAL_RCC_OscConfig+0xb0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x98>
 8006b5a:	4b70      	ldr	r3, [pc, #448]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6f      	ldr	r2, [pc, #444]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	4b6d      	ldr	r3, [pc, #436]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6c      	ldr	r2, [pc, #432]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e00b      	b.n	8006b8c <HAL_RCC_OscConfig+0xb0>
 8006b74:	4b69      	ldr	r3, [pc, #420]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a68      	ldr	r2, [pc, #416]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4b66      	ldr	r3, [pc, #408]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a65      	ldr	r2, [pc, #404]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b94:	f7fd fe88 	bl	80048a8 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b9c:	f7fd fe84 	bl	80048a8 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b64      	cmp	r3, #100	; 0x64
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e207      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bae:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f0      	beq.n	8006b9c <HAL_RCC_OscConfig+0xc0>
 8006bba:	e014      	b.n	8006be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbc:	f7fd fe74 	bl	80048a8 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc4:	f7fd fe70 	bl	80048a8 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b64      	cmp	r3, #100	; 0x64
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e1f3      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd6:	4b51      	ldr	r3, [pc, #324]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f0      	bne.n	8006bc4 <HAL_RCC_OscConfig+0xe8>
 8006be2:	e000      	b.n	8006be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d063      	beq.n	8006cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bf2:	4b4a      	ldr	r3, [pc, #296]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d11c      	bne.n	8006c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c0a:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d116      	bne.n	8006c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c16:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_RCC_OscConfig+0x152>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d001      	beq.n	8006c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e1c7      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4937      	ldr	r1, [pc, #220]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c42:	e03a      	b.n	8006cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d020      	beq.n	8006c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c4c:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <HAL_RCC_OscConfig+0x244>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fd fe29 	bl	80048a8 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fd fe25 	bl	80048a8 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e1a8      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4925      	ldr	r1, [pc, #148]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	e015      	b.n	8006cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <HAL_RCC_OscConfig+0x244>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fd fe08 	bl	80048a8 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c9c:	f7fd fe04 	bl	80048a8 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e187      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d036      	beq.n	8006d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <HAL_RCC_OscConfig+0x248>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fd fde8 	bl	80048a8 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cdc:	f7fd fde4 	bl	80048a8 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e167      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x200>
 8006cfa:	e01b      	b.n	8006d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <HAL_RCC_OscConfig+0x248>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d02:	f7fd fdd1 	bl	80048a8 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d08:	e00e      	b.n	8006d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d0a:	f7fd fdcd 	bl	80048a8 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d907      	bls.n	8006d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e150      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	42470000 	.word	0x42470000
 8006d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d28:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1ea      	bne.n	8006d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8097 	beq.w	8006e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d46:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	4b7d      	ldr	r3, [pc, #500]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	4a7c      	ldr	r2, [pc, #496]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	6413      	str	r3, [r2, #64]	; 0x40
 8006d62:	4b7a      	ldr	r3, [pc, #488]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	60bb      	str	r3, [r7, #8]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d72:	4b77      	ldr	r3, [pc, #476]	; (8006f50 <HAL_RCC_OscConfig+0x474>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d118      	bne.n	8006db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d7e:	4b74      	ldr	r3, [pc, #464]	; (8006f50 <HAL_RCC_OscConfig+0x474>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a73      	ldr	r2, [pc, #460]	; (8006f50 <HAL_RCC_OscConfig+0x474>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d8a:	f7fd fd8d 	bl	80048a8 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d92:	f7fd fd89 	bl	80048a8 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e10c      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da4:	4b6a      	ldr	r3, [pc, #424]	; (8006f50 <HAL_RCC_OscConfig+0x474>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d106      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x2ea>
 8006db8:	4b64      	ldr	r3, [pc, #400]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbc:	4a63      	ldr	r2, [pc, #396]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc4:	e01c      	b.n	8006e00 <HAL_RCC_OscConfig+0x324>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b05      	cmp	r3, #5
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCC_OscConfig+0x30c>
 8006dce:	4b5f      	ldr	r3, [pc, #380]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a5e      	ldr	r2, [pc, #376]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dd4:	f043 0304 	orr.w	r3, r3, #4
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	4b5c      	ldr	r3, [pc, #368]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4a5b      	ldr	r2, [pc, #364]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70
 8006de6:	e00b      	b.n	8006e00 <HAL_RCC_OscConfig+0x324>
 8006de8:	4b58      	ldr	r3, [pc, #352]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	4a57      	ldr	r2, [pc, #348]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dee:	f023 0301 	bic.w	r3, r3, #1
 8006df2:	6713      	str	r3, [r2, #112]	; 0x70
 8006df4:	4b55      	ldr	r3, [pc, #340]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	4a54      	ldr	r2, [pc, #336]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006dfa:	f023 0304 	bic.w	r3, r3, #4
 8006dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d015      	beq.n	8006e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e08:	f7fd fd4e 	bl	80048a8 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e10:	f7fd fd4a 	bl	80048a8 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e0cb      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e26:	4b49      	ldr	r3, [pc, #292]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0ee      	beq.n	8006e10 <HAL_RCC_OscConfig+0x334>
 8006e32:	e014      	b.n	8006e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e34:	f7fd fd38 	bl	80048a8 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e3a:	e00a      	b.n	8006e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3c:	f7fd fd34 	bl	80048a8 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e0b5      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e52:	4b3e      	ldr	r3, [pc, #248]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1ee      	bne.n	8006e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d105      	bne.n	8006e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e64:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	4a38      	ldr	r2, [pc, #224]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80a1 	beq.w	8006fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e7a:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d05c      	beq.n	8006f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d141      	bne.n	8006f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8e:	4b31      	ldr	r3, [pc, #196]	; (8006f54 <HAL_RCC_OscConfig+0x478>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd fd08 	bl	80048a8 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fd fd04 	bl	80048a8 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e087      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eae:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69da      	ldr	r2, [r3, #28]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	491b      	ldr	r1, [pc, #108]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <HAL_RCC_OscConfig+0x478>)
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eea:	f7fd fcdd 	bl	80048a8 <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef2:	f7fd fcd9 	bl	80048a8 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e05c      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f04:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x416>
 8006f10:	e054      	b.n	8006fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f12:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <HAL_RCC_OscConfig+0x478>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fd fcc6 	bl	80048a8 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fd fcc2 	bl	80048a8 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e045      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_OscConfig+0x470>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x444>
 8006f3e:	e03d      	b.n	8006fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d107      	bne.n	8006f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e038      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40007000 	.word	0x40007000
 8006f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f58:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <HAL_RCC_OscConfig+0x4ec>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d028      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d121      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d11a      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f88:	4013      	ands	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d111      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800

08006fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0cc      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe0:	4b68      	ldr	r3, [pc, #416]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d90c      	bls.n	8007008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fee:	4b65      	ldr	r3, [pc, #404]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b63      	ldr	r3, [pc, #396]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0b8      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d020      	beq.n	8007056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007020:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a58      	ldr	r2, [pc, #352]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800702a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007038:	4b53      	ldr	r3, [pc, #332]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	4a52      	ldr	r2, [pc, #328]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	494d      	ldr	r1, [pc, #308]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	4313      	orrs	r3, r2
 8007054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d044      	beq.n	80070ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d107      	bne.n	800707a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706a:	4b47      	ldr	r3, [pc, #284]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d119      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e07f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d003      	beq.n	800708a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708a:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e06f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e067      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070aa:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f023 0203 	bic.w	r2, r3, #3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4934      	ldr	r1, [pc, #208]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070bc:	f7fd fbf4 	bl	80048a8 <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c2:	e00a      	b.n	80070da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c4:	f7fd fbf0 	bl	80048a8 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e04f      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 020c 	and.w	r2, r3, #12
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d1eb      	bne.n	80070c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070ec:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d20c      	bcs.n	8007114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fa:	4b22      	ldr	r3, [pc, #136]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007102:	4b20      	ldr	r3, [pc, #128]	; (8007184 <HAL_RCC_ClockConfig+0x1b8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d001      	beq.n	8007114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e032      	b.n	800717a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4916      	ldr	r1, [pc, #88]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800713e:	4b12      	ldr	r3, [pc, #72]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	490e      	ldr	r1, [pc, #56]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	4313      	orrs	r3, r2
 8007150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007152:	f000 f821 	bl	8007198 <HAL_RCC_GetSysClockFreq>
 8007156:	4602      	mov	r2, r0
 8007158:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	490a      	ldr	r1, [pc, #40]	; (800718c <HAL_RCC_ClockConfig+0x1c0>)
 8007164:	5ccb      	ldrb	r3, [r1, r3]
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7fd fb54 	bl	8004820 <HAL_InitTick>

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023c00 	.word	0x40023c00
 8007188:	40023800 	.word	0x40023800
 800718c:	08008758 	.word	0x08008758
 8007190:	20000000 	.word	0x20000000
 8007194:	20000004 	.word	0x20000004

08007198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b090      	sub	sp, #64	; 0x40
 800719e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a8:	2300      	movs	r3, #0
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071b0:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 030c 	and.w	r3, r3, #12
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d00d      	beq.n	80071d8 <HAL_RCC_GetSysClockFreq+0x40>
 80071bc:	2b08      	cmp	r3, #8
 80071be:	f200 80a1 	bhi.w	8007304 <HAL_RCC_GetSysClockFreq+0x16c>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x34>
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d003      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ca:	e09b      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b53      	ldr	r3, [pc, #332]	; (800731c <HAL_RCC_GetSysClockFreq+0x184>)
 80071ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071d0:	e09b      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071d2:	4b53      	ldr	r3, [pc, #332]	; (8007320 <HAL_RCC_GetSysClockFreq+0x188>)
 80071d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071d6:	e098      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d8:	4b4f      	ldr	r3, [pc, #316]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071e2:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d028      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ee:	4b4a      	ldr	r3, [pc, #296]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	099b      	lsrs	r3, r3, #6
 80071f4:	2200      	movs	r2, #0
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	627a      	str	r2, [r7, #36]	; 0x24
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007200:	2100      	movs	r1, #0
 8007202:	4b47      	ldr	r3, [pc, #284]	; (8007320 <HAL_RCC_GetSysClockFreq+0x188>)
 8007204:	fb03 f201 	mul.w	r2, r3, r1
 8007208:	2300      	movs	r3, #0
 800720a:	fb00 f303 	mul.w	r3, r0, r3
 800720e:	4413      	add	r3, r2
 8007210:	4a43      	ldr	r2, [pc, #268]	; (8007320 <HAL_RCC_GetSysClockFreq+0x188>)
 8007212:	fba0 1202 	umull	r1, r2, r0, r2
 8007216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007218:	460a      	mov	r2, r1
 800721a:	62ba      	str	r2, [r7, #40]	; 0x28
 800721c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800721e:	4413      	add	r3, r2
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2200      	movs	r2, #0
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	61fa      	str	r2, [r7, #28]
 800722a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007232:	f7f8 ffcf 	bl	80001d4 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4613      	mov	r3, r2
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723e:	e053      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	099b      	lsrs	r3, r3, #6
 8007246:	2200      	movs	r2, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	617a      	str	r2, [r7, #20]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007252:	f04f 0b00 	mov.w	fp, #0
 8007256:	4652      	mov	r2, sl
 8007258:	465b      	mov	r3, fp
 800725a:	f04f 0000 	mov.w	r0, #0
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	0159      	lsls	r1, r3, #5
 8007264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007268:	0150      	lsls	r0, r2, #5
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	ebb2 080a 	subs.w	r8, r2, sl
 8007272:	eb63 090b 	sbc.w	r9, r3, fp
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007282:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007286:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800728a:	ebb2 0408 	subs.w	r4, r2, r8
 800728e:	eb63 0509 	sbc.w	r5, r3, r9
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	00eb      	lsls	r3, r5, #3
 800729c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072a0:	00e2      	lsls	r2, r4, #3
 80072a2:	4614      	mov	r4, r2
 80072a4:	461d      	mov	r5, r3
 80072a6:	eb14 030a 	adds.w	r3, r4, sl
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	eb45 030b 	adc.w	r3, r5, fp
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072be:	4629      	mov	r1, r5
 80072c0:	028b      	lsls	r3, r1, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c8:	4621      	mov	r1, r4
 80072ca:	028a      	lsls	r2, r1, #10
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	2200      	movs	r2, #0
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	60fa      	str	r2, [r7, #12]
 80072d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072dc:	f7f8 ff7a 	bl	80001d4 <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4613      	mov	r3, r2
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	3301      	adds	r3, #1
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007302:	e002      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <HAL_RCC_GetSysClockFreq+0x184>)
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800730c:	4618      	mov	r0, r3
 800730e:	3740      	adds	r7, #64	; 0x40
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400
 8007320:	017d7840 	.word	0x017d7840

08007324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007328:	4b03      	ldr	r3, [pc, #12]	; (8007338 <HAL_RCC_GetHCLKFreq+0x14>)
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000000 	.word	0x20000000

0800733c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007340:	f7ff fff0 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	0a9b      	lsrs	r3, r3, #10
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4903      	ldr	r1, [pc, #12]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40023800 	.word	0x40023800
 8007360:	08008768 	.word	0x08008768

08007364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007368:	f7ff ffdc 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0b5b      	lsrs	r3, r3, #13
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	08008768 	.word	0x08008768

0800738c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e07b      	b.n	8007496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ae:	d009      	beq.n	80073c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
 80073b6:	e005      	b.n	80073c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fc ffb0 	bl	8004344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0104 	and.w	r1, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	f003 0210 	and.w	r2, r3, #16
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e041      	b.n	8007534 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fc ff85 	bl	80043d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 f94f 	bl	8007780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d001      	beq.n	8007554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e03c      	b.n	80075ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <HAL_TIM_Base_Start+0xa0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_TIM_Base_Start+0x5c>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756e:	d013      	beq.n	8007598 <HAL_TIM_Base_Start+0x5c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIM_Base_Start+0xa4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_TIM_Base_Start+0x5c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <HAL_TIM_Base_Start+0xa8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_TIM_Base_Start+0x5c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_TIM_Base_Start+0xac>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_TIM_Base_Start+0x5c>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a16      	ldr	r2, [pc, #88]	; (80075ec <HAL_TIM_Base_Start+0xb0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d111      	bne.n	80075bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b06      	cmp	r3, #6
 80075a8:	d010      	beq.n	80075cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ba:	e007      	b.n	80075cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40014000 	.word	0x40014000

080075f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_TIM_ConfigClockSource+0x1c>
 8007608:	2302      	movs	r3, #2
 800760a:	e0b4      	b.n	8007776 <HAL_TIM_ConfigClockSource+0x186>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800762a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007644:	d03e      	beq.n	80076c4 <HAL_TIM_ConfigClockSource+0xd4>
 8007646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764a:	f200 8087 	bhi.w	800775c <HAL_TIM_ConfigClockSource+0x16c>
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007652:	f000 8086 	beq.w	8007762 <HAL_TIM_ConfigClockSource+0x172>
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765a:	d87f      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d01a      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0xa6>
 8007660:	2b70      	cmp	r3, #112	; 0x70
 8007662:	d87b      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d050      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x11a>
 8007668:	2b60      	cmp	r3, #96	; 0x60
 800766a:	d877      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d03c      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0xfa>
 8007670:	2b50      	cmp	r3, #80	; 0x50
 8007672:	d873      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d058      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x13a>
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d86f      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d064      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x15a>
 8007680:	2b30      	cmp	r3, #48	; 0x30
 8007682:	d86b      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d060      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x15a>
 8007688:	2b20      	cmp	r3, #32
 800768a:	d867      	bhi.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d05c      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	2b10      	cmp	r3, #16
 8007692:	d05a      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x15a>
 8007694:	e062      	b.n	800775c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076a6:	f000 f971 	bl	800798c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	609a      	str	r2, [r3, #8]
      break;
 80076c2:	e04f      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076d4:	f000 f95a 	bl	800798c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e6:	609a      	str	r2, [r3, #8]
      break;
 80076e8:	e03c      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	461a      	mov	r2, r3
 80076f8:	f000 f8ce 	bl	8007898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2150      	movs	r1, #80	; 0x50
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f927 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 8007708:	e02c      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007716:	461a      	mov	r2, r3
 8007718:	f000 f8ed 	bl	80078f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2160      	movs	r1, #96	; 0x60
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f917 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 8007728:	e01c      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	461a      	mov	r2, r3
 8007738:	f000 f8ae 	bl	8007898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2140      	movs	r1, #64	; 0x40
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f907 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 8007748:	e00c      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f000 f8fe 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 800775a:	e003      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
      break;
 8007760:	e000      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a3a      	ldr	r2, [pc, #232]	; (800787c <TIM_Base_SetConfig+0xfc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00f      	beq.n	80077b8 <TIM_Base_SetConfig+0x38>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779e:	d00b      	beq.n	80077b8 <TIM_Base_SetConfig+0x38>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a37      	ldr	r2, [pc, #220]	; (8007880 <TIM_Base_SetConfig+0x100>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d007      	beq.n	80077b8 <TIM_Base_SetConfig+0x38>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a36      	ldr	r2, [pc, #216]	; (8007884 <TIM_Base_SetConfig+0x104>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d003      	beq.n	80077b8 <TIM_Base_SetConfig+0x38>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a35      	ldr	r2, [pc, #212]	; (8007888 <TIM_Base_SetConfig+0x108>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d108      	bne.n	80077ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a2b      	ldr	r2, [pc, #172]	; (800787c <TIM_Base_SetConfig+0xfc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01b      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d8:	d017      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a28      	ldr	r2, [pc, #160]	; (8007880 <TIM_Base_SetConfig+0x100>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a27      	ldr	r2, [pc, #156]	; (8007884 <TIM_Base_SetConfig+0x104>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00f      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a26      	ldr	r2, [pc, #152]	; (8007888 <TIM_Base_SetConfig+0x108>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00b      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a25      	ldr	r2, [pc, #148]	; (800788c <TIM_Base_SetConfig+0x10c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d007      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a24      	ldr	r2, [pc, #144]	; (8007890 <TIM_Base_SetConfig+0x110>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_Base_SetConfig+0x8a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a23      	ldr	r2, [pc, #140]	; (8007894 <TIM_Base_SetConfig+0x114>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d108      	bne.n	800781c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a0e      	ldr	r2, [pc, #56]	; (800787c <TIM_Base_SetConfig+0xfc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d103      	bne.n	8007850 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b01      	cmp	r3, #1
 8007860:	d105      	bne.n	800786e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f023 0201 	bic.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]
  }
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40010000 	.word	0x40010000
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40000c00 	.word	0x40000c00
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800

08007898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f023 030a 	bic.w	r3, r3, #10
 80078d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b087      	sub	sp, #28
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	f023 0210 	bic.w	r2, r3, #16
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	031b      	lsls	r3, r3, #12
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007932:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	f043 0307 	orr.w	r3, r3, #7
 8007978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	021a      	lsls	r2, r3, #8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	609a      	str	r2, [r3, #8]
}
 80079c0:	bf00      	nop
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e050      	b.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d018      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a30:	d013      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00e      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d10c      	bne.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800
 8007aa0:	40000c00 	.word	0x40000c00
 8007aa4:	40014000 	.word	0x40014000

08007aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e042      	b.n	8007b40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fc fcb6 	bl	8004440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb79 	bl	80081e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695a      	ldr	r2, [r3, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b20      	cmp	r3, #32
 8007b66:	d175      	bne.n	8007c54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Transmit+0x2c>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e06e      	b.n	8007c56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b86:	f7fc fe8f 	bl	80048a8 <HAL_GetTick>
 8007b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba0:	d108      	bne.n	8007bb4 <HAL_UART_Transmit+0x6c>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	e003      	b.n	8007bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bbc:	e02e      	b.n	8007c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2180      	movs	r1, #128	; 0x80
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f98b 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e03a      	b.n	8007c56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	e007      	b.n	8007c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1cb      	bne.n	8007bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2140      	movs	r1, #64	; 0x40
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f957 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e006      	b.n	8007c56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3720      	adds	r7, #32
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d112      	bne.n	8007c9e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_UART_Receive_DMA+0x26>
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e00b      	b.n	8007ca0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	461a      	mov	r2, r3
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f97f 	bl	8007f98 <UART_Start_Receive_DMA>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	e000      	b.n	8007ca0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c9e:	2302      	movs	r3, #2
  }
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b09c      	sub	sp, #112	; 0x70
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d172      	bne.n	8007dea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	2200      	movs	r2, #0
 8007d08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d2c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	667b      	str	r3, [r7, #100]	; 0x64
 8007d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3314      	adds	r3, #20
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	623b      	str	r3, [r7, #32]
   return(result);
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d88:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3314      	adds	r3, #20
 8007d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d92:	633a      	str	r2, [r7, #48]	; 0x30
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d119      	bne.n	8007dea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0310 	bic.w	r3, r3, #16
 8007dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dd6:	61fa      	str	r2, [r7, #28]
 8007dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69b9      	ldr	r1, [r7, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	617b      	str	r3, [r7, #20]
   return(result);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dec:	2200      	movs	r2, #0
 8007dee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d106      	bne.n	8007e06 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e00:	f7ff ff66 	bl	8007cd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e04:	e002      	b.n	8007e0c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e08:	f7fb fe26 	bl	8003a58 <HAL_UART_RxCpltCallback>
}
 8007e0c:	bf00      	nop
 8007e0e:	3770      	adds	r7, #112	; 0x70
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d108      	bne.n	8007e42 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e34:	085b      	lsrs	r3, r3, #1
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7ff ff48 	bl	8007cd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e40:	e002      	b.n	8007e48 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff ff30 	bl	8007ca8 <HAL_UART_RxHalfCpltCallback>
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6c:	2b80      	cmp	r3, #128	; 0x80
 8007e6e:	bf0c      	ite	eq
 8007e70:	2301      	moveq	r3, #1
 8007e72:	2300      	movne	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b21      	cmp	r3, #33	; 0x21
 8007e82:	d108      	bne.n	8007e96 <UART_DMAError+0x46>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f000 f91b 	bl	80080cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b22      	cmp	r3, #34	; 0x22
 8007eb6:	d108      	bne.n	8007eca <UART_DMAError+0x7a>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ec4:	68b8      	ldr	r0, [r7, #8]
 8007ec6:	f000 f929 	bl	800811c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f043 0210 	orr.w	r2, r3, #16
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed6:	68b8      	ldr	r0, [r7, #8]
 8007ed8:	f7ff fef0 	bl	8007cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef4:	e03b      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efc:	d037      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fc fcd3 	bl	80048a8 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e03a      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d023      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b80      	cmp	r3, #128	; 0x80
 8007f2a:	d020      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d01d      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d116      	bne.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f8e0 	bl	800811c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e00f      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4013      	ands	r3, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2301      	moveq	r3, #1
 8007f80:	2300      	movne	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d0b4      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b098      	sub	sp, #96	; 0x60
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2222      	movs	r2, #34	; 0x22
 8007fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc4:	4a3e      	ldr	r2, [pc, #248]	; (80080c0 <UART_Start_Receive_DMA+0x128>)
 8007fc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	4a3d      	ldr	r2, [pc, #244]	; (80080c4 <UART_Start_Receive_DMA+0x12c>)
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	4a3c      	ldr	r2, [pc, #240]	; (80080c8 <UART_Start_Receive_DMA+0x130>)
 8007fd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	2200      	movs	r2, #0
 8007fde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	f7fc ff86 	bl	8004f08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d019      	beq.n	800804e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	330c      	adds	r3, #12
 8008020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800802a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008030:	65bb      	str	r3, [r7, #88]	; 0x58
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800803a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800803c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008040:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3314      	adds	r3, #20
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	657b      	str	r3, [r7, #84]	; 0x54
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800806e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3314      	adds	r3, #20
 8008088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	617b      	str	r3, [r7, #20]
   return(result);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080a2:	627a      	str	r2, [r7, #36]	; 0x24
 80080a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6a39      	ldr	r1, [r7, #32]
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3760      	adds	r7, #96	; 0x60
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	08007ce9 	.word	0x08007ce9
 80080c4:	08007e15 	.word	0x08007e15
 80080c8:	08007e51 	.word	0x08007e51

080080cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b089      	sub	sp, #36	; 0x24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	61ba      	str	r2, [r7, #24]
 80080f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6979      	ldr	r1, [r7, #20]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	613b      	str	r3, [r7, #16]
   return(result);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e5      	bne.n	80080d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008110:	bf00      	nop
 8008112:	3724      	adds	r7, #36	; 0x24
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b095      	sub	sp, #84	; 0x54
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800813a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	330c      	adds	r3, #12
 8008142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008144:	643a      	str	r2, [r7, #64]	; 0x40
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800814a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e5      	bne.n	8008124 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3314      	adds	r3, #20
 800815e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	61fb      	str	r3, [r7, #28]
   return(result);
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3314      	adds	r3, #20
 8008176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008190:	2b01      	cmp	r3, #1
 8008192:	d119      	bne.n	80081c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f023 0310 	bic.w	r3, r3, #16
 80081aa:	647b      	str	r3, [r7, #68]	; 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	330c      	adds	r3, #12
 80081b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081b4:	61ba      	str	r2, [r7, #24]
 80081b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6979      	ldr	r1, [r7, #20]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	613b      	str	r3, [r7, #16]
   return(result);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e5      	bne.n	8008194 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081d6:	bf00      	nop
 80081d8:	3754      	adds	r7, #84	; 0x54
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e8:	b0c0      	sub	sp, #256	; 0x100
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	68d9      	ldr	r1, [r3, #12]
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	ea40 0301 	orr.w	r3, r0, r1
 800820c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	431a      	orrs	r2, r3
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	431a      	orrs	r2, r3
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800823c:	f021 010c 	bic.w	r1, r1, #12
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800824a:	430b      	orrs	r3, r1
 800824c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	6999      	ldr	r1, [r3, #24]
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	ea40 0301 	orr.w	r3, r0, r1
 800826a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b8f      	ldr	r3, [pc, #572]	; (80084b0 <UART_SetConfig+0x2cc>)
 8008274:	429a      	cmp	r2, r3
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0xa0>
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b8d      	ldr	r3, [pc, #564]	; (80084b4 <UART_SetConfig+0x2d0>)
 8008280:	429a      	cmp	r2, r3
 8008282:	d104      	bne.n	800828e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7ff f86e 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8008288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800828c:	e003      	b.n	8008296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800828e:	f7ff f855 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8008292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a0:	f040 810c 	bne.w	80084bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	1891      	adds	r1, r2, r2
 80082bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80082be:	415b      	adcs	r3, r3
 80082c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082c6:	4621      	mov	r1, r4
 80082c8:	eb12 0801 	adds.w	r8, r2, r1
 80082cc:	4629      	mov	r1, r5
 80082ce:	eb43 0901 	adc.w	r9, r3, r1
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082e6:	4690      	mov	r8, r2
 80082e8:	4699      	mov	r9, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	eb18 0303 	adds.w	r3, r8, r3
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082f4:	462b      	mov	r3, r5
 80082f6:	eb49 0303 	adc.w	r3, r9, r3
 80082fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800830a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800830e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008312:	460b      	mov	r3, r1
 8008314:	18db      	adds	r3, r3, r3
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
 8008318:	4613      	mov	r3, r2
 800831a:	eb42 0303 	adc.w	r3, r2, r3
 800831e:	657b      	str	r3, [r7, #84]	; 0x54
 8008320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008328:	f7f7 ff54 	bl	80001d4 <__aeabi_uldivmod>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4b61      	ldr	r3, [pc, #388]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008332:	fba3 2302 	umull	r2, r3, r3, r2
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	011c      	lsls	r4, r3, #4
 800833a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833e:	2200      	movs	r2, #0
 8008340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	1891      	adds	r1, r2, r2
 8008352:	64b9      	str	r1, [r7, #72]	; 0x48
 8008354:	415b      	adcs	r3, r3
 8008356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800835c:	4641      	mov	r1, r8
 800835e:	eb12 0a01 	adds.w	sl, r2, r1
 8008362:	4649      	mov	r1, r9
 8008364:	eb43 0b01 	adc.w	fp, r3, r1
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800837c:	4692      	mov	sl, r2
 800837e:	469b      	mov	fp, r3
 8008380:	4643      	mov	r3, r8
 8008382:	eb1a 0303 	adds.w	r3, sl, r3
 8008386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800838a:	464b      	mov	r3, r9
 800838c:	eb4b 0303 	adc.w	r3, fp, r3
 8008390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083a8:	460b      	mov	r3, r1
 80083aa:	18db      	adds	r3, r3, r3
 80083ac:	643b      	str	r3, [r7, #64]	; 0x40
 80083ae:	4613      	mov	r3, r2
 80083b0:	eb42 0303 	adc.w	r3, r2, r3
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
 80083b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083be:	f7f7 ff09 	bl	80001d4 <__aeabi_uldivmod>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4611      	mov	r1, r2
 80083c8:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <UART_SetConfig+0x2d4>)
 80083ca:	fba3 2301 	umull	r2, r3, r3, r1
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	2264      	movs	r2, #100	; 0x64
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
 80083d6:	1acb      	subs	r3, r1, r3
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083de:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <UART_SetConfig+0x2d4>)
 80083e0:	fba3 2302 	umull	r2, r3, r3, r2
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083ec:	441c      	add	r4, r3
 80083ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008400:	4642      	mov	r2, r8
 8008402:	464b      	mov	r3, r9
 8008404:	1891      	adds	r1, r2, r2
 8008406:	63b9      	str	r1, [r7, #56]	; 0x38
 8008408:	415b      	adcs	r3, r3
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008410:	4641      	mov	r1, r8
 8008412:	1851      	adds	r1, r2, r1
 8008414:	6339      	str	r1, [r7, #48]	; 0x30
 8008416:	4649      	mov	r1, r9
 8008418:	414b      	adcs	r3, r1
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008428:	4659      	mov	r1, fp
 800842a:	00cb      	lsls	r3, r1, #3
 800842c:	4651      	mov	r1, sl
 800842e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008432:	4651      	mov	r1, sl
 8008434:	00ca      	lsls	r2, r1, #3
 8008436:	4610      	mov	r0, r2
 8008438:	4619      	mov	r1, r3
 800843a:	4603      	mov	r3, r0
 800843c:	4642      	mov	r2, r8
 800843e:	189b      	adds	r3, r3, r2
 8008440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008444:	464b      	mov	r3, r9
 8008446:	460a      	mov	r2, r1
 8008448:	eb42 0303 	adc.w	r3, r2, r3
 800844c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800845c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008464:	460b      	mov	r3, r1
 8008466:	18db      	adds	r3, r3, r3
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
 800846a:	4613      	mov	r3, r2
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800847a:	f7f7 feab 	bl	80001d4 <__aeabi_uldivmod>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008484:	fba3 1302 	umull	r1, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	2164      	movs	r1, #100	; 0x64
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	3332      	adds	r3, #50	; 0x32
 8008496:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <UART_SetConfig+0x2d4>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	f003 0207 	and.w	r2, r3, #7
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4422      	add	r2, r4
 80084aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084ac:	e106      	b.n	80086bc <UART_SetConfig+0x4d8>
 80084ae:	bf00      	nop
 80084b0:	40011000 	.word	0x40011000
 80084b4:	40011400 	.word	0x40011400
 80084b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084ce:	4642      	mov	r2, r8
 80084d0:	464b      	mov	r3, r9
 80084d2:	1891      	adds	r1, r2, r2
 80084d4:	6239      	str	r1, [r7, #32]
 80084d6:	415b      	adcs	r3, r3
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
 80084da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084de:	4641      	mov	r1, r8
 80084e0:	1854      	adds	r4, r2, r1
 80084e2:	4649      	mov	r1, r9
 80084e4:	eb43 0501 	adc.w	r5, r3, r1
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	00eb      	lsls	r3, r5, #3
 80084f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084f6:	00e2      	lsls	r2, r4, #3
 80084f8:	4614      	mov	r4, r2
 80084fa:	461d      	mov	r5, r3
 80084fc:	4643      	mov	r3, r8
 80084fe:	18e3      	adds	r3, r4, r3
 8008500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008504:	464b      	mov	r3, r9
 8008506:	eb45 0303 	adc.w	r3, r5, r3
 800850a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800850e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800851a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800851e:	f04f 0200 	mov.w	r2, #0
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800852a:	4629      	mov	r1, r5
 800852c:	008b      	lsls	r3, r1, #2
 800852e:	4621      	mov	r1, r4
 8008530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008534:	4621      	mov	r1, r4
 8008536:	008a      	lsls	r2, r1, #2
 8008538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800853c:	f7f7 fe4a 	bl	80001d4 <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4b60      	ldr	r3, [pc, #384]	; (80086c8 <UART_SetConfig+0x4e4>)
 8008546:	fba3 2302 	umull	r2, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	011c      	lsls	r4, r3, #4
 800854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800855c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	61b9      	str	r1, [r7, #24]
 8008568:	415b      	adcs	r3, r3
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008570:	4641      	mov	r1, r8
 8008572:	1851      	adds	r1, r2, r1
 8008574:	6139      	str	r1, [r7, #16]
 8008576:	4649      	mov	r1, r9
 8008578:	414b      	adcs	r3, r1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008588:	4659      	mov	r1, fp
 800858a:	00cb      	lsls	r3, r1, #3
 800858c:	4651      	mov	r1, sl
 800858e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008592:	4651      	mov	r1, sl
 8008594:	00ca      	lsls	r2, r1, #3
 8008596:	4610      	mov	r0, r2
 8008598:	4619      	mov	r1, r3
 800859a:	4603      	mov	r3, r0
 800859c:	4642      	mov	r2, r8
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085a4:	464b      	mov	r3, r9
 80085a6:	460a      	mov	r2, r1
 80085a8:	eb42 0303 	adc.w	r3, r2, r3
 80085ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80085ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085c8:	4649      	mov	r1, r9
 80085ca:	008b      	lsls	r3, r1, #2
 80085cc:	4641      	mov	r1, r8
 80085ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085d2:	4641      	mov	r1, r8
 80085d4:	008a      	lsls	r2, r1, #2
 80085d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085da:	f7f7 fdfb 	bl	80001d4 <__aeabi_uldivmod>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	4b38      	ldr	r3, [pc, #224]	; (80086c8 <UART_SetConfig+0x4e4>)
 80085e6:	fba3 2301 	umull	r2, r3, r3, r1
 80085ea:	095b      	lsrs	r3, r3, #5
 80085ec:	2264      	movs	r2, #100	; 0x64
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	1acb      	subs	r3, r1, r3
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	3332      	adds	r3, #50	; 0x32
 80085f8:	4a33      	ldr	r2, [pc, #204]	; (80086c8 <UART_SetConfig+0x4e4>)
 80085fa:	fba2 2303 	umull	r2, r3, r2, r3
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008604:	441c      	add	r4, r3
 8008606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800860a:	2200      	movs	r2, #0
 800860c:	673b      	str	r3, [r7, #112]	; 0x70
 800860e:	677a      	str	r2, [r7, #116]	; 0x74
 8008610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	1891      	adds	r1, r2, r2
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	415b      	adcs	r3, r3
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008624:	4641      	mov	r1, r8
 8008626:	1851      	adds	r1, r2, r1
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	4649      	mov	r1, r9
 800862c:	414b      	adcs	r3, r1
 800862e:	607b      	str	r3, [r7, #4]
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800863c:	4659      	mov	r1, fp
 800863e:	00cb      	lsls	r3, r1, #3
 8008640:	4651      	mov	r1, sl
 8008642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008646:	4651      	mov	r1, sl
 8008648:	00ca      	lsls	r2, r1, #3
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	4603      	mov	r3, r0
 8008650:	4642      	mov	r2, r8
 8008652:	189b      	adds	r3, r3, r2
 8008654:	66bb      	str	r3, [r7, #104]	; 0x68
 8008656:	464b      	mov	r3, r9
 8008658:	460a      	mov	r2, r1
 800865a:	eb42 0303 	adc.w	r3, r2, r3
 800865e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	663b      	str	r3, [r7, #96]	; 0x60
 800866a:	667a      	str	r2, [r7, #100]	; 0x64
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	f04f 0300 	mov.w	r3, #0
 8008674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008678:	4649      	mov	r1, r9
 800867a:	008b      	lsls	r3, r1, #2
 800867c:	4641      	mov	r1, r8
 800867e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008682:	4641      	mov	r1, r8
 8008684:	008a      	lsls	r2, r1, #2
 8008686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800868a:	f7f7 fda3 	bl	80001d4 <__aeabi_uldivmod>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <UART_SetConfig+0x4e4>)
 8008694:	fba3 1302 	umull	r1, r3, r3, r2
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	2164      	movs	r1, #100	; 0x64
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	3332      	adds	r3, #50	; 0x32
 80086a6:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <UART_SetConfig+0x4e4>)
 80086a8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	f003 020f 	and.w	r2, r3, #15
 80086b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4422      	add	r2, r4
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086c2:	46bd      	mov	sp, r7
 80086c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c8:	51eb851f 	.word	0x51eb851f

080086cc <memset>:
 80086cc:	4402      	add	r2, r0
 80086ce:	4603      	mov	r3, r0
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d100      	bne.n	80086d6 <memset+0xa>
 80086d4:	4770      	bx	lr
 80086d6:	f803 1b01 	strb.w	r1, [r3], #1
 80086da:	e7f9      	b.n	80086d0 <memset+0x4>

080086dc <__libc_init_array>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4d0d      	ldr	r5, [pc, #52]	; (8008714 <__libc_init_array+0x38>)
 80086e0:	4c0d      	ldr	r4, [pc, #52]	; (8008718 <__libc_init_array+0x3c>)
 80086e2:	1b64      	subs	r4, r4, r5
 80086e4:	10a4      	asrs	r4, r4, #2
 80086e6:	2600      	movs	r6, #0
 80086e8:	42a6      	cmp	r6, r4
 80086ea:	d109      	bne.n	8008700 <__libc_init_array+0x24>
 80086ec:	4d0b      	ldr	r5, [pc, #44]	; (800871c <__libc_init_array+0x40>)
 80086ee:	4c0c      	ldr	r4, [pc, #48]	; (8008720 <__libc_init_array+0x44>)
 80086f0:	f000 f826 	bl	8008740 <_init>
 80086f4:	1b64      	subs	r4, r4, r5
 80086f6:	10a4      	asrs	r4, r4, #2
 80086f8:	2600      	movs	r6, #0
 80086fa:	42a6      	cmp	r6, r4
 80086fc:	d105      	bne.n	800870a <__libc_init_array+0x2e>
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	f855 3b04 	ldr.w	r3, [r5], #4
 8008704:	4798      	blx	r3
 8008706:	3601      	adds	r6, #1
 8008708:	e7ee      	b.n	80086e8 <__libc_init_array+0xc>
 800870a:	f855 3b04 	ldr.w	r3, [r5], #4
 800870e:	4798      	blx	r3
 8008710:	3601      	adds	r6, #1
 8008712:	e7f2      	b.n	80086fa <__libc_init_array+0x1e>
 8008714:	08008780 	.word	0x08008780
 8008718:	08008780 	.word	0x08008780
 800871c:	08008780 	.word	0x08008780
 8008720:	08008784 	.word	0x08008784

08008724 <memcpy>:
 8008724:	440a      	add	r2, r1
 8008726:	4291      	cmp	r1, r2
 8008728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800872c:	d100      	bne.n	8008730 <memcpy+0xc>
 800872e:	4770      	bx	lr
 8008730:	b510      	push	{r4, lr}
 8008732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873a:	4291      	cmp	r1, r2
 800873c:	d1f9      	bne.n	8008732 <memcpy+0xe>
 800873e:	bd10      	pop	{r4, pc}

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
